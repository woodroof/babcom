- Сохранять content

- Path и отсутствующий tmp

- сделать честный join_diff

- Все получаемые атрибуты должны быть for share (get_object_data? группы?)
  - Иначе гонка с изменением. Блокировать объект И атрибуты И группы?

- bug в postgresql
  - stable-функция в select'е выполняется до функции изменения

- is_visible и content в change_object и change_object_groups
  - get_next_list
- блокировка в is_in_group
  - и вообще просмотреть pp_utils
  - и использование is-функций в data

- Странные ситуации в python-скрипте
  - Отлавливать ислючения из api/get_notification/... и писать ошибку
  - Отправка в сокет, по которому более никто не слушает
  - Прерывание получения данных от клиента
    - В том числе при загрузке файла
  - Проверить reconnect

Мысли для v4:
- Переделать тесты приложения
- В ошибках json-функций печатать реальные значения параметров
- Тесты для data.*
- Тесты для json.array_find
- Позитивные тесты для json.*
- Убрать title из списка predefined-атрибутов, да и другие тоже
- Для ролей задавать пол
- Для удаления атрибута нужно что-то другое, т.к. нельзя задать значение null
- Удалять уведомления по подписке
- redirect странный, т.к. иногда нужно подписаться на объект "вместо", а иногда - перенаправить, т.е. нужен open и subscribe
- Нет diff'ов акторов в случае, если изменился заголовок/подзаголовок
- Список пуст, загрузить ещё
- Действия для элементов не возвращать с сервера, а генерировать по схеме
- В restrictions возможные значения
- Проверка на длину текстового поля - с trim'ом ( \t\n)
- Форматирование везде? В заголовке, подзаголовке, сообщении об ошибке...
- При выводе многострочных атрибутов автоматом добавлять перенос строки после описания
- Не равно нулю в restrictions
- reason не нужен
- Актора получать как-то автоматически
- Посокращать названия функций
- Делить проект по схемам?
- Не проверять постоянно на notified
- В функциях не изменять, а возвращать изменения, чтобы один раз считать diff'ы
- Неудобно перекладывать поля руками
- Для "скрытых" действий можно было бы некоторые поля не заполнять
- Выпадашки с людьми проще промежуточных объектов со списками
- Больше всякого по умолчанию (disabled, etc.)
- Почему user_params - массив?
- Шаблон для элементов списка должен быть в родительском элементе
- Нет checklist'ов
- Создаём, возвращаем id, а потом тут же получаем код
- Задавать несколько групп сразу, тогда не нужно будет перекладывать атрибуты
- Явные зависимости между объектами? А то кнопки зависят не только от актора, но и от его организаций.
- Убирать подписки на элементы списка по инициативе клиента (чаты)
- Уведомления все не скидывают, слишком много
- Не делать ассерты в действиях, а просто ничего не делать, если уже не надо
- От клиентов нужно получать клиента и версию, иначе не ясно, кто работает неправильно
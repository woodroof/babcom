-- Расширения
insert into data.extensions(code) values
('meta'),
('mail'),
('history'),
('notifications');

-- Вспомогательные функции
CREATE OR REPLACE FUNCTION utils.system_time(in_days_shift integer DEFAULT NULL::integer)
  RETURNS text AS
$BODY$
declare
  v_years_shift integer := data.get_integer_param('years_shift');
  v_days_shift integer := data.get_integer_param('days_shift');
  v_time timestamp with time zone;
begin
  if in_days_shift is null then
    v_time := now() + (v_years_shift || 'y')::interval + (v_days_shift || 'd')::interval;
  else
    v_time := now() + (v_years_shift || 'y')::interval + (v_days_shift || 'd')::interval + (in_days_shift || 'd')::interval;
  end if;

  return to_char(v_time, 'yyyy.mm.dd hh24:mi:ss.us');
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION utils.current_time(in_days_shift integer DEFAULT NULL::integer)
  RETURNS text AS
$BODY$
declare
  v_years_shift integer := data.get_integer_param('years_shift');
  v_days_shift integer := data.get_integer_param('days_shift');
  v_time timestamp with time zone;
begin
  if in_days_shift is null then
    v_time := now() + (v_years_shift || 'y')::interval + (v_days_shift || 'd')::interval;
  else
    v_time := now() + (v_years_shift || 'y')::interval + (v_days_shift || 'd')::interval + (in_days_shift || 'd')::interval;
  end if;

  return to_char(v_time, 'dd.mm.yyyy hh24:mi');
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

-- Параметры
insert into data.params(code, value, description) values
('years_shift', jsonb '242', 'Смещение года'),
('days_shift', jsonb '-55', 'Смещение дней'),
('template', jsonb '
{
  "groups": [
    {
      "attributes": ["balance"]
    },
    {
      "attributes": ["transaction_time", "transaction_sum", "balance_rest", "transaction_from", "transaction_to", "transaction_description"]
    },
    {
      "actions": ["generate_money", "state_money_transfer", "transfer", "send_mail", "send_mail_from_future", "send_notification", "show_transaction_list", "create_personal_document"]
    },
    {
      "attributes": ["person_race", "person_state", "person_psi_scale", "person_job_position"]
    },
    {
      "attributes": ["person_biography"]
    },
    {
      "attributes": ["person_salary"]
    },
    {
      "attributes": ["political_influence"]
    },
    {
      "attributes": ["mail_type", "mail_send_time", "mail_title", "mail_author", "mail_receivers"],
      "actions": ["reply", "reply_all", "delete_mail"]
    },
    {
      "attributes": ["mail_body"]
    },
    {
      "attributes": ["news_time", "news_media", "news_title"],
      "actions": ["edit_news", "delete_news"]
    },
    {
      "attributes": ["state_tax"],
      "actions": ["change_state_tax"]
    },
    {
      "attributes": ["corporation_state", "corporation_capitalization", "corporation_sectors", "dividend_vote"],
      "actions": ["set_dividend_vote"]
    },
    {
      "attributes": ["corporation_members"],
      "actions": ["create_percent_deal"]
    },
    {
      "actions": ["create_deal"]
    },
    {
      "attributes": ["corporation_deals", "corporation_draft_deals", "corporation_canceled_deals"]
    },
    {
      "attributes": ["document_title", "document_time", "document_author"],
      "actions": ["share_document", "edit_med_document", "edit_document", "delete_document", "delete_library_document", "delete_personal_document"]
    },
    {
      "attributes": ["med_document_patient"]
    },
    {
      "attributes": ["deal_time", "deal_cancel_time", "deal_status", "deal_sector", "asset_name", "asset_cost", "asset_amortization", "deal_income"],
      "actions": ["edit_deal", "delete_deal", "check_deal", "confirm_deal", "cancel_deal"]
    },
    {
      "attributes": ["percent_deal_time", "percent_deal_status", "percent_deal_corporation", "percent_deal_sender", "percent_deal_receiver", "percent_deal_percent", "percent_deal_sum"],
      "actions": ["edit_percent_deal", "confirm_percent_deal", "cancel_percent_deal"]
    },
    {
      "attributes": ["deal_participant1"],
      "actions": ["edit_deal_member1", "delete_deal_member1"]
    },
    {
      "attributes": ["deal_participant2"],
      "actions": ["edit_deal_member2", "delete_deal_member2"]
    },
    {
      "attributes": ["deal_participant3"],
      "actions": ["edit_deal_member3", "delete_deal_member3"]
    },
    {
      "attributes": ["deal_participant4"],
      "actions": ["edit_deal_member4", "delete_deal_member4"]
    },
    {
      "attributes": ["deal_participant5"],
      "actions": ["edit_deal_member5", "delete_deal_member5"]
    },
    {
      "attributes": ["deal_participant6"],
      "actions": ["edit_deal_member6", "delete_deal_member6"]
    },
    {
      "attributes": ["deal_participant7"],
      "actions": ["edit_deal_member7", "delete_deal_member7"]
    },
    {
      "attributes": ["deal_participant8"],
      "actions": ["edit_deal_member8", "delete_deal_member8"]
    },
    {
      "attributes": ["deal_participant9"],
      "actions": ["edit_deal_member9", "delete_deal_member9"]
    },
    {
      "attributes": ["deal_participant10"],
      "actions": ["edit_deal_member10", "delete_deal_member10"]
    },
    {
      "actions": ["add_deal_member"]
    },
    {
      "attributes": ["description", "content"]
    },
    {
      "actions": ["login"]
    },
    {
      "attributes": ["sector_volume", "sector_volume_changes"],
      "actions": ["change_sector_volume"]
    },
    {
      "attributes": ["market_last_time"],
      "actions": ["calc_money"]
    },
    {
      "attributes": ["vote_status", "vote_theme", "vote_history"],
      "actions": ["start_vote", "stop_vote", "vote_yes", "vote_no"]
    },
    {
      "attributes": ["agreement_accept_cost", "agreement_cancel_cost", "agreement_status", "agreement_type", "agreement_signers"],
      "actions": ["create_agreement", "confirm_agreement", "delete_agreement", "cancel_agreement", "reject_agreement"]
    }
  ]
}
', 'Шаблон объекта');

-- Группы
insert into data.objects(code) values
('persons'),
('offline'),
('online'),
('masters'),
('security'),
('politicians'),
('senators'),
('congressmen'),
('ambassadors'),
('medics'),
('researchers'),
('crew'),
('ea_military'),
('med_documents'),
('research_documents'),
('crew_documents'),
('corporations'),
('news_hub'),
('states'),
('normal_deals'),
('draft_deals'),
('canceled_deals'),
('percent_deals'),
('done_percent_deals'),
('draft_percent_deals'),
('canceled_percent_deals'),
('person_draft_percent_deals'),
('secretaries');

-- СМИ
insert into data.objects(code) values
('media_isn'),
('media_ibc');

-- Государства
insert into data.objects(code) values
('state_ea'),
('state_centauri'),
('state_narn'),
('state_vorlon'),
('state_drazzi'),
('state_brakiri'),
('state_markabi'),
('state_minbari'),
('state_ikarra'),
('state_dilgar'),
('state_antares'),
('state_drakh'),
('state_anlashok');

-- Персонажи
insert into data.objects(code) values
('anonymous');

insert into data.objects(code)
select 'person' || o.* from generate_series(1, 61) o;

-- Объекты
insert into data.objects(code) values
('mail_contacts'),
('transaction_destinations'),
('mailbox'),
('notifications'),
('inbox'),
('outbox'),
('library'),
('personal_library'),
('med_library'),
('research_library'),
('crew_library'),
('transactions'),
('assembly'),
('market'),
('meta_entities'),
('vote');

insert into data.objects(code) values
('corporation_ipx'),
('corporation_rocketdain'),
('corporation_umbrella'),
('corporation_weiland'),
('corporation_mars'),
('corporation_tong'),
('corporation_kref'),
('corporation_ea'),
('corporation_brakos_diamond'),
('corporation_droshalla_power'),
('corporation_unnaming_blassing'),
('corporation_bhara'),
('corporation_antares_finance'),
('corporation_marba'),
('corporation_mollari'),
('corporation_makan'),
('corporation_masters'),
('corporation_artalan'),
('corporation_psi_corps'),
('corporation_anklav_telepaths'),
('corporation_guild_telepaths'),
('corporation_an_lashok');

insert into data.objects(code)
select 'news' || o.value from generate_series(1, 14) o(value);

insert into data.objects(code) values
('category_rules'),
('category_laws'),
('category_laws_ea'),
('category_laws_assembly'),
('category_laws_congress'),
('category_laws_babylon'),
('category_universe');

insert into data.objects(code)
select 'library_document' || o.value from generate_series(1, 47) o(value);

insert into data.objects(code)
select 'personal_document' || o.* from generate_series(1, 16) o(value);

insert into data.objects(code) values
('sector_resources'),
('sector_vpk'),
('sector_connections'),
('sector_medicine'),
('sector_black_market');

-- Функции для получения значений атрибутов
CREATE OR REPLACE FUNCTION attribute_value_description_functions.person_race(
    in_user_object_id integer,
    in_attribute_id integer,
    in_value jsonb)
  RETURNS text AS
$BODY$
declare
  v_text_value text := json.get_string(in_value);
begin
  case when v_text_value = 'human' then
    return 'Человек';
  when v_text_value = 'centauri' then
    return 'Центавр';
  when v_text_value = 'narn' then
    return 'Нарн';
  when v_text_value = 'drazzi' then
    return 'Драззи';
  when v_text_value = 'brakiri' then
    return 'Бракири';
  when v_text_value = 'markab' then
    return 'Маркаб';
  when v_text_value = 'minbar' then
    return 'Минбари';
  when v_text_value = 'ikkarian' then
    return 'Иккарианец';
  when v_text_value = 'dilgar' then
    return 'Дилгарец';
  when v_text_value = 'antares' then
    return 'Антарес';
  else
    return 'Неизвестно';
  end case;
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_description_functions.person_state(
    in_user_object_id integer,
    in_attribute_id integer,
    in_value jsonb)
  RETURNS text AS
$BODY$
declare
  v_text_value text := json.get_string(in_value);
begin
  case when v_text_value = 'ea' then
    return 'Земной Альянс';
  when v_text_value = 'centauri' then
    return 'Республика Центавр';
  when v_text_value = 'narn' then
    return 'Режим Нарна';
  when v_text_value = 'vorlon' then
    return 'Ворлонская империя';
  when v_text_value = 'drazzi' then
    return 'Дрази';
  when v_text_value = 'brakiri' then
    return 'Бракири';
  when v_text_value = 'markabi' then
    return 'Идеократия Маркаби';
  when v_text_value = 'minbari' then
    return 'Минбарская федерация';
  when v_text_value = 'ikarra' then
    return 'Идилия Икарры';
  when v_text_value = 'dilgar' then
    return 'Диктатура Дилгар';
  when v_text_value = 'antares' then
    return 'Синдикат Антареса';
  when v_text_value = 'drakh' then
    return 'Технократия Дракхов';
  when v_text_value = 'anlashok' then
    return 'Ан-Лашок';
  else
    return 'Неизвестно';
  end case;
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_description_functions.person_psi_scale(
    in_user_object_id integer,
    in_attribute_id integer,
    in_value jsonb)
  RETURNS text AS
$BODY$
declare
  v_int_value integer := json.get_integer(in_value);
begin
  return 'P' || v_int_value;
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_description_functions.mail_type(
    in_user_object_id integer,
    in_attribute_id integer,
    in_value jsonb)
  RETURNS text AS
$BODY$
declare
  v_text_value text := json.get_string(in_value);
begin
  case when v_text_value = 'inbox' then
    return 'Входящее';
  when v_text_value = 'outbox' then
    return 'Исходящее';
  end case;

  return null;
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_description_functions.deal_status(
    in_user_object_id integer,
    in_attribute_id integer,
    in_value jsonb)
  RETURNS text AS
$BODY$
declare
  v_text_value text := json.get_string(in_value);
begin
  case when v_text_value = 'draft' then
    return 'Подготавливается';
  when v_text_value = 'normal' then
    return 'Утверждена';
  when v_text_value = 'canceled' then
    return 'Расторгнута';
  when v_text_value = 'deleted' then
    return 'Удалена';
  end case;

  return null;
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_description_functions.percent_deal_status(
    in_user_object_id integer,
    in_attribute_id integer,
    in_value jsonb)
  RETURNS text AS
$BODY$
declare
  v_text_value text := json.get_string(in_value);
begin
  case when v_text_value = 'draft' then
    return 'Предложение';
  when v_text_value = 'done' then
    return 'Утверждено';
  when v_text_value = 'canceled' then
    return 'Отклонено';
  end case;

  return null;
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_description_functions.vote_status(
    in_user_object_id integer,
    in_attribute_id integer,
    in_value jsonb)
  RETURNS text AS
$BODY$
declare
  v_text_value text := json.get_string(in_value);
begin
  case when v_text_value = 'yes' then
    return 'Идёт голосование';
  when v_text_value = 'no' then
    return 'Нет голосования';
  end case;

  return null;
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

-- Атрибуты
insert into data.attributes(code, name, type, value_description_function) values
('persons', 'Список доступных персонажей', 'INVISIBLE', null),
('politicians', 'Список политиков', 'INVISIBLE', null),
('mail_contacts', 'Список доступных контактов', 'INVISIBLE', null),
('transaction_destinations', 'Список доступных назначений переводов', 'INVISIBLE', null),
('all_transaction_destinations', 'Список доступных назначений переводов', 'INVISIBLE', null),
('type', 'Тип', 'HIDDEN', null),
('name', 'Имя', 'NORMAL', null),
('description', 'Описание', 'NORMAL', null),
('content', 'Содержимое', 'NORMAL', null),
('system_value', 'Содержимое', 'SYSTEM', null),
('meta_entities', 'Мета-объекты', 'INVISIBLE', null),
('notifications', 'Уведомления', 'INVISIBLE', null),
('notification_description', 'Описание уведомления', 'NORMAL', null),
('notification_object_code', 'Объект, привязанный к уведомлению', 'HIDDEN', null),
('notification_time', 'Время отправки уведомления', 'NORMAL', null),
('notification_status', 'Статус уведомления', 'INVISIBLE', null),
('system_meta', 'Маркер мета-объекта', 'SYSTEM', null),
('system_mail_contact', 'Маркер объекта, которому можно отправлять письма', 'SYSTEM', null),
('person_race', 'Раса', 'NORMAL', 'person_race'),
('person_state', 'Государство', 'NORMAL', 'person_state'),
('system_person_state', 'Управление государством', 'SYSTEM', null),
('person_media', 'Журналист СМИ', 'NORMAL', 'code'),
('person_job_position', 'Должность', 'NORMAL', null),
('person_biography', 'Биография', 'NORMAL', null),
('system_psi_scale', 'Рейтинг телепата', 'SYSTEM', null),
('person_psi_scale', 'Рейтинг телепата', 'NORMAL', 'person_psi_scale'),
('system_mail_folder_type', 'Тип папки писем', 'SYSTEM', null),
('mail_title', 'Заголовок', 'NORMAL', null),
('system_mail_send_time', 'Реальное время отправки письма', 'SYSTEM', null),
('mail_send_time', 'Время отправки письма', 'NORMAL', null),
('mail_author', 'Автор', 'NORMAL', 'code'),
('mail_receivers', 'Получатели', 'NORMAL', 'codes'),
('mail_body', 'Тело', 'NORMAL', null),
('mail_type', 'Тип письма', 'NORMAL', 'mail_type'),
('inbox', 'Входящие письма', 'INVISIBLE', null),
('outbox', 'Исходящие письма', 'INVISIBLE', null),
('transaction_from', 'Отправитель', 'NORMAL', 'code'),
('transaction_to', 'Получатель', 'NORMAL', 'code'),
('transaction_time', 'Время перевода', 'NORMAL', null),
('transaction_description', 'Сообщение', 'NORMAL', null),
('transaction_sum', 'Сумма', 'NORMAL', null),
('balance_rest', 'Остаток после операции', 'NORMAL', null),
('corporations', 'Все корпорации', 'INVISIBLE', null),
('corporation_state', 'Государство корпорации', 'NORMAL', 'code'),
('system_corporation_members', 'Члены корпорации', 'SYSTEM', null),
('corporation_members', 'Члены корпорации', 'NORMAL', null),
('system_corporation_capitalization', 'Капитализация корпорации', 'SYSTEM', null),
('corporation_capitalization', 'Капитализация корпорации', 'NORMAL', null),
('corporation_sectors', 'Рынки корпорации', 'NORMAL', 'codes'),
('system_corporation_deals', 'Активные сделки корпорации', 'SYSTEM', null),
('corporation_deals', 'Активные сделки корпорации', 'NORMAL', null),
('system_corporation_draft_deals', 'Подготавливаемые сделки корпорации', 'SYSTEM', null),
('corporation_draft_deals', 'Подготавливаемые сделки корпорации', 'NORMAL', null),
('system_corporation_canceled_deals', 'Расторгнутые сделки корпорации', 'SYSTEM', null),
('corporation_canceled_deals', 'Расторгнутые сделки корпорации', 'NORMAL', null),
('dividend_vote', 'Согласие на выплату дивидендов', 'NORMAL', null),
('system_deal_time', 'Дата изменения сделки', 'SYSTEM', null),
('deal_time', 'Дата утверждения сделки', 'NORMAL', null),
('deal_cancel_time', 'Дата расторжения сделки', 'NORMAL', null),
('deal_status', 'Статус сделки', 'NORMAL', 'deal_status'),
('deal_author', 'Автор сделки', 'SYSTEM', null),
('deal_sector', 'Рынок сделки', 'NORMAL', 'code'),
('asset_name', 'Имя актива', 'NORMAL', null),
('asset_cost', 'Стоимость актива', 'NORMAL', null),
('document_title', 'Заголовок документа', 'NORMAL', null),
('system_document_time', 'Реальное время создания документа', 'SYSTEM', null),
('document_time', 'Время создания', 'NORMAL', null),
('document_author', 'Автор', 'NORMAL', 'code'),
('med_document_patient', 'Пациент', 'NORMAL', 'code'),
('sectors', 'Отрасли', 'INVISIBLE', null),
('asset_amortization', 'Расходность актива', 'NORMAL', null),
('deal_income', 'Доходность сделки', 'NORMAL', null),
('system_deal_participant1', 'Участник сделки 1', 'SYSTEM', null),
('deal_participant1', 'Участник сделки 1', 'NORMAL', null),
('system_deal_participant2', 'Участник сделки 2', 'SYSTEM', null),
('deal_participant2', 'Участник сделки 2', 'NORMAL', null),
('system_deal_participant3', 'Участник сделки 3', 'SYSTEM', null),
('deal_participant3', 'Участник сделки 3', 'NORMAL', null),
('system_deal_participant4', 'Участник сделки 4', 'SYSTEM', null),
('deal_participant4', 'Участник сделки 4', 'NORMAL', null),
('system_deal_participant5', 'Участник сделки 5', 'SYSTEM', null),
('deal_participant5', 'Участник сделки 5', 'NORMAL', null),
('system_deal_participant6', 'Участник сделки 6', 'SYSTEM', null),
('deal_participant6', 'Участник сделки 6', 'NORMAL', null),
('system_deal_participant7', 'Участник сделки 7', 'SYSTEM', null),
('deal_participant7', 'Участник сделки 7', 'NORMAL', null),
('system_deal_participant8', 'Участник сделки 8', 'SYSTEM', null),
('deal_participant8', 'Участник сделки 8', 'NORMAL', null),
('system_deal_participant9', 'Участник сделки 9', 'SYSTEM', null),
('deal_participant9', 'Участник сделки 9', 'NORMAL', null),
('system_deal_participant10', 'Участник сделки 10', 'SYSTEM', null),
('deal_participant10', 'Участник сделки 10', 'NORMAL', null),
('transactions', 'Транзакции', 'SYSTEM', null),
('sector_volume', 'Объём отрасли', 'NORMAL',null),
('sector_volume_changes', 'Изменение объёма отрасли', 'NORMAL',null),
('state_tax', 'Ставка налога в стране, %', 'NORMAL', null),
('system_balance', 'Остаток на счету', 'SYSTEM', null),
('balance', 'Остаток на счету', 'NORMAL', null),
('system_offline', 'Маркер персонажа offline-игрока', 'SYSTEM', null),
('system_online', 'Маркер персонажа online-игрока', 'SYSTEM', null),
('system_master', 'Маркер мастерского персонажа', 'SYSTEM', null),
('system_security', 'Маркер персонажа, имеющего доступ к системе безопасности', 'SYSTEM', null),
('system_politician', 'Маркер персонажа-политика', 'SYSTEM', null),
('system_senator', 'Маркер персонажа-сенатора', 'SYSTEM', null),
('system_congressman', 'Маркер персонажа-конгрессмена', 'SYSTEM', null),
('system_ambassador', 'Маркер персонажа-посла', 'SYSTEM', null),
('system_medic', 'Маркер персонажа-медика', 'SYSTEM', null),
('system_researcher', 'Маркер персонажа-исследователя', 'SYSTEM', null),
('system_crew_member', 'Маркер члена экипажа', 'SYSTEM', null),
('system_ea_military', 'Маркер военного EA', 'SYSTEM', null),
('system_med_documents', 'Маркер персонажа, имеющего доступ к медицинским документам', 'SYSTEM', null),
('system_research_documents', 'Маркер персонажа, имеющего доступ к научным отчётам', 'SYSTEM', null),
('system_crew_documents', 'Маркер персонажа, имеющего доступ к отчётам команды', 'SYSTEM', null),
('system_library_category', 'Категория документа', 'SYSTEM', null),
('system_personal_document', 'Личный документ', 'SYSTEM', null),
('news_title', 'Заголовок новости', 'NORMAL', null),
('news_media', 'Источник новости', 'NORMAL', 'code'),
('system_news_time', 'Реальное время публикации новости', 'SYSTEM', null),
('news_time', 'Время публикации новости', 'NORMAL', null),
('market_last_time', 'Время последнего пересчёта рынка', 'NORMAL', null),
('person_salary', 'Доход за цикл', 'NORMAL', null),
('system_person_salary', 'Доход за цикл', 'SYSTEM', null),
('system_percent_deal_time', 'Дата изменения сделки продажи доли', 'SYSTEM', null),
('percent_deal_time', 'Дата утверждения сделки', 'NORMAL', null),
('percent_deal_status', 'Статус сделки', 'NORMAL', 'percent_deal_status'),
('percent_deal_corporation', 'Корпорация', 'NORMAL', 'code'),
('percent_deal_sender', 'Продавец', 'NORMAL', 'code'),
('percent_deal_receiver', 'Покупатель', 'NORMAL', 'code'),
('percent_deal_percent', 'Процент акций', 'NORMAL', null),
('percent_deal_sum', 'Сумма сделки', 'NORMAL', null),
('percent_deals', 'Cделки', 'SYSTEM', null),
('political_influence', 'Политическое влияние', 'NORMAL', null),
('system_political_influence', 'Политическое влияние', 'SYSTEM', null),
('system_person_votes_num', 'Количество голосований за экономический цикл', 'SYSTEM', null),
('vote_status', 'Статус', 'NORMAL', 'vote_status'),
('vote_theme', 'Тема голосования', 'NORMAL', null),
('vote_yes', 'Голосование За', 'SYSTEM', null),
('vote_no', 'Голосование Против', 'SYSTEM', null),
('system_vote_history_json', 'История голосований', 'INVISIBLE', null),
('system_vote_history', 'История голосований', 'SYSTEM', null),
('vote_history', 'История голосований', 'NORMAL', null),
('vote_last_number', 'Номер последнего голосования', 'SYSTEM', null),
('system_secretary', 'Признак секретаря', 'SYSTEM', null);

CREATE OR REPLACE FUNCTION attribute_value_change_functions.json_member_to_object(in_params jsonb)
  RETURNS void AS
$BODY$
declare
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_user_object_id integer := json.get_opt_integer(in_params, null, 'user_object_id');
  v_attribute_id integer := json.get_integer(in_params, 'attribute_id');
  v_attribute_value jsonb;
begin
  v_attribute_value := data.get_attribute_value(v_object_id, v_object_id, v_attribute_id);
  
  perform data.remove_object_from_object(oo.object_id, v_object_id)
    from data.object_objects oo
    where oo.parent_object_id = v_object_id and
          oo.parent_object_id != oo.object_id and
          oo.intermediate_object_ids is null and
          oo.object_id not in (select data.get_object_id(member) from jsonb_to_recordset(v_attribute_value) as (member text));

  perform data.add_object_to_object(o.id, v_object_id)
    from jsonb_to_recordset(v_attribute_value) as c(member text)
    join data.objects o on o.code = c.member
    where not exists(select 1 from data.object_objects oo
                    where oo.object_id = o.id and
                     oo.parent_object_id = v_object_id and
                     oo.parent_object_id != oo.object_id and
                     oo.intermediate_object_ids is null);
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

-- Функции для создания связей
insert into data.attribute_value_change_functions(attribute_id, function, params) values
(data.get_attribute_id('type'), 'string_value_to_object', jsonb '{"params": {"person": "persons", "corporation": "corporations", "news": "news_hub", "crew_document": "crew_library", "research_document": "research_library", "med_document": "med_library", "sector": "market", "state": "states", "mail_folder": "mailbox", "done_percent_deals": "percent_deals", "draft_percent_deals": "percent_deals", "canceled_percent_deals": "percent_deals"}}'),
(data.get_attribute_id('person_media'), 'string_value_to_object', jsonb '{"params": {"media_isn": "media_isn", "media_ibc": "media_ibc"}}'),
(data.get_attribute_id('news_media'), 'string_value_to_object', jsonb '{"params": {"media_isn": "media_isn", "media_ibc": "media_ibc"}}'),
(data.get_attribute_id('type'), 'string_value_to_attribute', jsonb '{"params": {"person": {"object_code": "transaction_destinations", "attribute_code": "transaction_destinations"}, "state": {"object_code": "transaction_destinations", "attribute_code": "transaction_destinations"}, "corporation": {"object_code": "transaction_destinations", "attribute_code": "transaction_destinations"}}}'),
(data.get_attribute_id('type'), 'string_value_to_attribute', jsonb '{"params": {"person": {"object_code": "transaction_destinations", "attribute_code": "all_transaction_destinations"}, "state": {"object_code": "transaction_destinations", "attribute_code": "all_transaction_destinations"}, "corporation": {"object_code": "transaction_destinations", "attribute_code": "all_transaction_destinations"}}}'),
(data.get_attribute_id('type'), 'string_value_to_attribute', jsonb '{"params": {"person": {"object_code": "persons", "attribute_code": "persons"}, "sector": {"object_code": "market", "attribute_code": "sectors"}, "corporation": {"object_code": "corporations", "attribute_code": "corporations"}}}'),
(data.get_attribute_id('system_offline'), 'boolean_value_to_object', jsonb '{"object_code": "offline"}'),
(data.get_attribute_id('system_online'), 'boolean_value_to_object', jsonb '{"object_code": "online"}'),
(data.get_attribute_id('system_master'), 'boolean_value_to_object', jsonb '{"object_code": "masters"}'),
(data.get_attribute_id('system_secretary'), 'boolean_value_to_object', jsonb '{"object_code": "secretaries"}'),
(data.get_attribute_id('system_security'), 'boolean_value_to_object', jsonb '{"object_code": "security"}'),
(data.get_attribute_id('system_senator'), 'boolean_value_to_object', jsonb '{"object_code": "senators"}'),
(data.get_attribute_id('system_congressman'), 'boolean_value_to_object', jsonb '{"object_code": "congressmen"}'),
(data.get_attribute_id('system_ambassador'), 'boolean_value_to_object', jsonb '{"object_code": "ambassadors"}'),
(data.get_attribute_id('system_politician'), 'boolean_value_to_object', jsonb '{"object_code": "politicians"}'),
(data.get_attribute_id('system_medic'), 'boolean_value_to_object', jsonb '{"object_code": "medics"}'),
(data.get_attribute_id('system_researcher'), 'boolean_value_to_object', jsonb '{"object_code": "researchers"}'),
(data.get_attribute_id('system_crew_member'), 'boolean_value_to_object', jsonb '{"object_code": "crew"}'),
(data.get_attribute_id('system_ea_military'), 'boolean_value_to_object', jsonb '{"object_code": "ea_military"}'),
(data.get_attribute_id('system_med_documents'), 'boolean_value_to_object', jsonb '{"object_code": "med_documents"}'),
(data.get_attribute_id('system_research_documents'), 'boolean_value_to_object', jsonb '{"object_code": "research_documents"}'),
(data.get_attribute_id('system_crew_documents'), 'boolean_value_to_object', jsonb '{"object_code": "crew_documents"}'),
(data.get_attribute_id('system_mail_contact'), 'boolean_value_to_attribute', jsonb '{"object_code": "mail_contacts", "attribute_code": "mail_contacts"}'),
(data.get_attribute_id('system_politician'), 'boolean_value_to_attribute', jsonb '{"object_code": "politicians", "attribute_code": "politicians"}'),
(data.get_attribute_id('system_personal_document'), 'boolean_value_to_value_attribute', jsonb '{"object_code": "personal_library", "attribute_code": "system_value"}'),
(data.get_attribute_id('system_meta'), 'boolean_value_to_value_attribute', jsonb '{"object_code": "meta_entities", "attribute_code": "meta_entities"}'),
(data.get_attribute_id('system_corporation_members'), 'json_member_to_object', null),
(data.get_attribute_id('deal_status'), 'string_value_to_object', jsonb '{"params": {"normal": "normal_deals", "draft": "draft_deals", "canceled": "canceled_deals"}}'),
(data.get_attribute_id('percent_deal_status'), 'string_value_to_object', jsonb '{"params": {"done": "done_percent_deals", "draft": "draft_percent_deals", "canceled": "canceled_percent_deals"}}');

insert into data.attribute_value_change_functions(attribute_id, function, params)
select data.get_attribute_id('system_library_category'), 'string_value_to_object', ('{"params": {' || string_agg(s.value, ',') || '}}')::jsonb
from (
  select '"category_rules": "category_rules"' as value
  union select '"category_laws": "category_laws"'
  union select '"category_laws_ea": "category_laws_ea"'
  union select '"category_laws_assembly": "category_laws_assembly"'
  union select '"category_laws_congress": "category_laws_congress"'
  union select '"category_laws_babylon": "category_laws_babylon"'
  union select '"category_universe": "category_universe"'
  union select '"library": "library"'
) s;

insert into data.attribute_value_change_functions(attribute_id, function, params) values
(data.get_attribute_id('system_person_state'), 'string_value_to_object', jsonb '{"params": {"ea": "state_ea"}}');

-- Функции для вычисления атрибутов
CREATE OR REPLACE FUNCTION attribute_value_fill_functions.merge_metaobjects(in_params jsonb)
  RETURNS void AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_attribute_id integer := json.get_integer(in_params, 'attribute_id');
  v_source_object_id integer := data.get_object_id(json.get_string(in_params, 'object_code'));
  v_source_attribute_id integer := data.get_attribute_id(json.get_string(in_params, 'attribute_code'));

  v_metaobjects record;

  v_attribute_name_id integer := data.get_attribute_id('name');
  v_groups jsonb :=
    json_build_array(
      json_build_object(
        'objects',
        json_build_array(
          json_build_object(
            'code',
            data.get_object_code(v_user_object_id),
            'name',
            data.get_attribute_value(v_user_object_id, v_user_object_id, v_attribute_name_id)))));
  v_codes text[];
  v_actions jsonb;
  v_action_array jsonb;
  v_action jsonb;
  v_objects jsonb;
begin
  for v_metaobjects in
    select json.get_string_array(av.value) codes
    from data.attribute_values av
    left join data.object_objects oo on
      av.value_object_id = oo.parent_object_id and
      oo.object_id = v_user_object_id
    where
      av.object_id = v_source_object_id and
      av.attribute_id = v_source_attribute_id and
      (
        av.value_object_id is null or
        oo.id is not null
      )
  loop
    v_codes := v_codes || v_metaobjects.codes;
  end loop;

  v_actions := data.get_object_actions(v_user_object_id, null);

  if v_actions is not null then
    v_action_array := jsonb '[]';
    for v_action in
      select value
      from jsonb_each(v_actions)
    loop
      v_action_array := v_action_array || v_action;
    end loop;

    v_groups := v_groups || jsonb_build_array(jsonb_build_object('actions', v_action_array));
  end if;

  select jsonb_agg(value)
  into v_objects
  from (
    select jsonb_build_object('code', o.code, 'name', o.name) as value
    from (
      select o.code, json.get_opt_string(data.get_attribute_value(v_user_object_id, o.id, v_attribute_name_id)) as name
      from data.objects o
      where o.code = any(v_codes)
      order by name
    ) o
  ) o;

  if v_objects is not null then
    v_groups := v_groups || jsonb_build_array(jsonb_build_object('objects', v_objects));
  end if;

  perform data.set_attribute_value_if_changed(
    v_user_object_id,
    v_attribute_id,
    v_user_object_id,
    jsonb_build_object('groups', v_groups),
    v_user_object_id);
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

insert into data.attribute_value_fill_functions(attribute_id, function, params, description) values
(
  data.get_attribute_id('meta_entities'),
  'fill_if_user_object',
  '{
    "function": "fill_if_object_attribute",
    "params": {
      "blocks": [
        {
          "conditions": [
            {"attribute_code": "type", "attribute_value": "person"},
            {"attribute_code": "type", "attribute_value": "anonymous"}
          ],
          "function": "merge_metaobjects",
          "params": {
            "object_code": "meta_entities",
            "attribute_code": "meta_entities"
          }
        }
      ]
    }
  }',
  'Заполнение списка метаобъектов игрока');

CREATE OR REPLACE FUNCTION attribute_value_fill_functions.fill_user_content(in_params jsonb)
  RETURNS void AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_attribute_id integer := json.get_integer(in_params, 'attribute_id');
  v_placeholder text := json.get_opt_string(in_params, null, 'placeholder');

  v_sort_attribute_id integer := data.get_attribute_id(json.get_string(in_params, 'sort_attribute_code'));
  v_sort_type text := json.get_string(in_params, 'sort_type');

  v_output jsonb := json.get_object_array(in_params, 'output');

  v_next_object_id integer;
  v_output_entry jsonb;

  v_content_entry text;
  v_type text;
  v_output_attribute_id integer;
  v_content text;
begin
  assert v_sort_type = 'asc' or v_sort_type = 'desc';

  for v_next_object_id in
    execute '
      select object_id
      from data.object_objects
      where
        parent_object_id = $1 and
        intermediate_object_ids is null and
        parent_object_id != object_id
      order by data.get_attribute_value($2, object_id, $3) ' || v_sort_type
    using v_object_id, v_user_object_id, v_sort_attribute_id
  loop
    v_content_entry := '';

    for v_output_entry in
      select value
      from jsonb_array_elements(v_output)
    loop
      v_type := json.get_string(v_output_entry, 'type');
      if v_type = 'attribute' then
        v_output_attribute_id := data.get_attribute_id(json.get_string(v_output_entry, 'data'));

        v_content_entry :=
          v_content_entry ||
          json.get_string(
            data.get_attribute_value(
              v_user_object_id,
              v_next_object_id,
              v_output_attribute_id));
      elsif v_type = 'code' then
        v_content_entry := v_content_entry || data.get_object_code(v_next_object_id);
      else
        assert v_type = 'string';
        v_content_entry := v_content_entry || json.get_string(v_output_entry, 'data');
      end if;
    end loop;

    if v_content is not null then
      v_content := v_content || E'<br>\n';
    end if;
    v_content := coalesce(v_content, '') || v_content_entry;
  end loop;

  if v_content is null and v_placeholder is not null then
    v_content := v_placeholder;
  end if;

  if v_content is null then
    perform data.delete_attribute_value_if_exists(
      v_object_id,
      v_attribute_id,
      v_user_object_id,
      v_user_object_id);
  else
    perform data.set_attribute_value_if_changed(
      v_object_id,
      v_attribute_id,
      v_user_object_id,
      to_jsonb(v_content),
      v_user_object_id);
  end if;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_fill_functions.fill_content(in_params jsonb)
  RETURNS void AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_attribute_id integer := json.get_integer(in_params, 'attribute_id');
  v_placeholder text := json.get_opt_string(in_params, null, 'placeholder');

  v_sort_attribute_id integer := data.get_attribute_id(json.get_string(in_params, 'sort_attribute_code'));
  v_sort_type text := json.get_string(in_params, 'sort_type');

  v_output jsonb := json.get_object_array(in_params, 'output');

  v_next_object_id integer;
  v_output_entry jsonb;

  v_content_entry text;
  v_type text;
  v_content text;
begin
  assert v_sort_type = 'asc' or v_sort_type = 'desc';

  for v_next_object_id in
    execute '
      select oo.object_id
      from data.object_objects oo
      join data.attribute_values av on
        av.object_id = oo.object_id and
        av.attribute_id = $1 and
        av.value_object_id is null
      where
        oo.parent_object_id = $2 and
        oo.intermediate_object_ids is null and
        oo.parent_object_id != oo.object_id
      order by av.value ' || v_sort_type
    using v_sort_attribute_id, v_object_id
  loop
    v_content_entry := '';

    for v_output_entry in
      select value
      from jsonb_array_elements(v_output)
    loop
      v_type := json.get_string(v_output_entry, 'type');
      if v_type = 'attribute' then
        select v_content_entry || json.get_string(value)
        into v_content_entry
        from data.attribute_values
        where
          object_id = v_next_object_id and
          attribute_id = data.get_attribute_id(json.get_string(v_output_entry, 'data')) and
          value_object_id is null;
      elsif v_type = 'code' then
        v_content_entry := v_content_entry || data.get_object_code(v_next_object_id);
      else
        assert v_type = 'string';
        v_content_entry := v_content_entry || json.get_string(v_output_entry, 'data');
      end if;
    end loop;

    if v_content is not null then
      v_content := v_content || E'<br>\n';
    end if;
    v_content := coalesce(v_content, '') || v_content_entry;
  end loop;

  if v_content is null and v_placeholder is not null then
    v_content := v_placeholder;
  end if;

  if v_content is null then
    perform data.delete_attribute_value_if_exists(
      v_object_id,
      v_attribute_id,
      null,
      v_user_object_id);
  else
    perform data.set_attribute_value_if_changed(
      v_object_id,
      v_attribute_id,
      null,
      to_jsonb(v_content),
      v_user_object_id);
  end if;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_fill_functions.fill_user_content_from_attribute(in_params jsonb)
  RETURNS void AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_attribute_id integer := json.get_integer(in_params, 'attribute_id');
  v_placeholder text := json.get_opt_string(in_params, null, 'placeholder');

  v_source_attribute_id integer := data.get_attribute_id(json.get_string(in_params, 'source_attribute_code'));
  v_sort_type text := json.get_string(in_params, 'sort_type');

  v_output jsonb := json.get_object_array(in_params, 'output');

  v_codes jsonb;

  v_next_object_id integer;
  v_output_entry jsonb;

  v_content_entry text;
  v_type text;
  v_output_attribute_id integer;
  v_content text;
begin
  assert v_sort_type = 'asc' or v_sort_type = 'desc';

  v_codes := data.get_attribute_value(v_user_object_id, v_object_id, v_source_attribute_id);
  perform json.get_opt_string_array(v_codes);

  if v_codes is not null then
    for v_next_object_id in
      execute '
        select data.get_object_id(json.get_string(o.value))
        from (
          select value, row_number() over() as num
          from jsonb_array_elements($1)
          order by num ' || v_sort_type || '
        ) o'
      using v_codes
    loop
      v_content_entry := '';

      for v_output_entry in
        select value
        from jsonb_array_elements(v_output)
      loop
        v_type := json.get_string(v_output_entry, 'type');
        if v_type = 'attribute' then
          v_output_attribute_id := data.get_attribute_id(json.get_string(v_output_entry, 'data'));

          v_content_entry :=
            v_content_entry ||
            json.get_string(
              data.get_attribute_value(
                v_user_object_id,
                v_next_object_id,
                v_output_attribute_id));
        elsif v_type = 'code' then
          v_content_entry := v_content_entry || data.get_object_code(v_next_object_id);
        else
          assert v_type = 'string';
          v_content_entry := v_content_entry || json.get_string(v_output_entry, 'data');
        end if;
      end loop;

      if v_content is not null then
        v_content := v_content || E'<br>\n';
      end if;
      v_content := coalesce(v_content, '') || v_content_entry;
    end loop;
  end if;

  if v_content is null and v_placeholder is not null then
    v_content := v_placeholder;
  end if;

  if v_content is null then
    perform data.delete_attribute_value_if_exists(
      v_object_id,
      v_attribute_id,
      v_user_object_id,
      v_user_object_id);
  else
    perform data.set_attribute_value_if_changed(
      v_object_id,
      v_attribute_id,
      v_user_object_id,
      to_jsonb(v_content),
      v_user_object_id);
  end if;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_fill_functions.fill_user_content_from_user_value_attribute(in_params jsonb)
  RETURNS void AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_attribute_id integer := json.get_integer(in_params, 'attribute_id');
  v_placeholder text := json.get_opt_string(in_params, null, 'placeholder');

  v_source_attribute_id integer := data.get_attribute_id(json.get_string(in_params, 'source_attribute_code'));
  v_sort_type text := json.get_string(in_params, 'sort_type');

  v_output jsonb := json.get_object_array(in_params, 'output');

  v_codes jsonb;

  v_next_object_id integer;
  v_output_entry jsonb;

  v_content_entry text;
  v_type text;
  v_output_attribute_id integer;
  v_content text;
begin
  assert v_sort_type = 'asc' or v_sort_type = 'desc';

  v_codes := data.get_attribute_value(v_user_object_id, v_user_object_id, v_source_attribute_id);
  perform json.get_opt_string_array(v_codes);

  if v_codes is not null then
    for v_next_object_id in
      execute '
        select data.get_object_id(json.get_string(o.value))
        from (
          select value, row_number() over() as num
          from jsonb_array_elements($1)
          order by num ' || v_sort_type || '
        ) o'
      using v_codes
    loop
      v_content_entry := '';

      for v_output_entry in
        select value
        from jsonb_array_elements(v_output)
      loop
        v_type := json.get_string(v_output_entry, 'type');
        if v_type = 'attribute' then
          v_output_attribute_id := data.get_attribute_id(json.get_string(v_output_entry, 'data'));

          perform data.fill_attribute_values(v_user_object_id, array[v_next_object_id], array[v_output_attribute_id]);

          v_content_entry :=
            v_content_entry ||
            json.get_string(
              data.get_attribute_value(
                v_user_object_id,
                v_next_object_id,
                v_output_attribute_id));
        elsif v_type = 'code' then
          v_content_entry := v_content_entry || data.get_object_code(v_next_object_id);
        else
          assert v_type = 'string';
          v_content_entry := v_content_entry || json.get_string(v_output_entry, 'data');
        end if;
      end loop;

      if v_content is not null then
        v_content := v_content || E'<br>\n';
      end if;
      v_content := coalesce(v_content, '') || v_content_entry;
    end loop;
  end if;

  if v_content is null and v_placeholder is not null then
    v_content := v_placeholder;
  end if;

  if v_content is null then
    perform data.delete_attribute_value_if_exists(
      v_object_id,
      v_attribute_id,
      v_user_object_id,
      v_user_object_id);
  else
    perform data.set_attribute_value_if_changed(
      v_object_id,
      v_attribute_id,
      v_user_object_id,
      to_jsonb(v_content),
      v_user_object_id);
  end if;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_fill_functions.fill_content_from_attribute(in_params jsonb)
  RETURNS void AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_attribute_id integer := json.get_integer(in_params, 'attribute_id');
  v_placeholder text := json.get_opt_string(in_params, null, 'placeholder');

  v_source_attribute_id integer := data.get_attribute_id(json.get_string(in_params, 'source_attribute_code'));
  v_sort_type text := json.get_string(in_params, 'sort_type');

  v_output jsonb := json.get_object_array(in_params, 'output');

  v_codes jsonb;

  v_next_object_id integer;
  v_output_entry jsonb;

  v_content_entry text;
  v_type text;
  v_content text;
begin
  assert v_sort_type = 'asc' or v_sort_type = 'desc';

  select value
  into v_codes
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_source_attribute_id and
    value_object_id is null;

  perform json.get_opt_string_array(v_codes);

  if v_codes is not null then
    for v_next_object_id in
      execute '
        select data.get_object_id(json.get_string(o.value))
        from (
          select value, row_number() over() as num
          from jsonb_array_elements($1)
          order by num ' || v_sort_type || '
        ) o'
      using v_codes
    loop
      v_content_entry := '';

      for v_output_entry in
        select value
        from jsonb_array_elements(v_output)
      loop
        v_type := json.get_string(v_output_entry, 'type');
        if v_type = 'attribute' then
          select v_content_entry || json.get_string(value)
          into v_content_entry
          from data.attribute_values
          where
            object_id = v_next_object_id and
            attribute_id = data.get_attribute_id(json.get_string(v_output_entry, 'data')) and
            value_object_id is null;
        elsif v_type = 'code' then
          v_content_entry := v_content_entry || data.get_object_code(v_next_object_id);
        else
          assert v_type = 'string';
          v_content_entry := v_content_entry || json.get_string(v_output_entry, 'data');
        end if;
      end loop;

      if v_content is not null then
        v_content := v_content || E'<br>\n';
      end if;
      v_content := coalesce(v_content, '') || v_content_entry;
    end loop;
  end if;

  if v_content is null and v_placeholder is not null then
    v_content := v_placeholder;
  end if;

  if v_content is null then
    perform data.delete_attribute_value_if_exists(
      v_object_id,
      v_attribute_id,
      null,
      v_user_object_id);
  else
    perform data.set_attribute_value_if_changed(
      v_object_id,
      v_attribute_id,
      null,
      to_jsonb(v_content),
      v_user_object_id);
  end if;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_fill_functions.fill_transaction_list(in_params jsonb)
  RETURNS void AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_attribute_id integer := json.get_integer(in_params, 'attribute_id');
  v_system_value_attr_id integer := data.get_attribute_id('system_value');
  v_value text := json.get_string(data.get_raw_attribute_value(v_object_id, v_system_value_attr_id, null));
  v_value_id integer := data.get_object_id(v_value);
  v_transaction_list jsonb := data.get_raw_attribute_value(data.get_object_id('transactions'), v_system_value_attr_id, v_value_id);
  v_name_attr_id integer := data.get_attribute_id('name');
  v_content text;
begin
  perform json.get_opt_string_array(v_transaction_list);

  select
    coalesce(
      string_agg(
        '<a href="babcom:' || value || '">' ||
        json.get_string(data.get_attribute_value(v_value_id, data.get_object_id(value), v_name_attr_id)) ||
        '</a>',
        E'<br>\n'),
      'Транзакций нет')
  into v_content
  from (
    select json.get_string(t.value) as value, row_number() over() as num
    from jsonb_array_elements(v_transaction_list) t
    order by num desc
  ) o;

  perform data.set_attribute_value_if_changed(v_object_id, v_attribute_id, null, to_jsonb(v_content), v_user_object_id);
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_fill_functions.fill_personal_library(in_params jsonb)
  RETURNS void AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_attribute_id integer := json.get_integer(in_params, 'attribute_id');
  v_system_value_attr_id integer := data.get_attribute_id('system_value');
  v_value jsonb := data.get_raw_attribute_value(v_object_id, v_system_value_attr_id, v_user_object_id);
  v_name_attr_id integer := data.get_attribute_id('name');
  v_document_info record;
  v_content text;
begin
  perform json.get_opt_string_array(v_value);

  for v_document_info in
    select o.code, json.get_string(data.get_attribute_value(v_user_object_id, o.id, v_name_attr_id)) as name
    from (
      select json.get_string(value) as code
      from jsonb_array_elements(v_value)
    ) e
    join data.objects o on
      o.code = e.code
    order by name
  loop
    if v_content is not null then
      v_content := v_content || E'<br>\n';
    else
      v_content := '';
    end if;
    v_content := v_content || '<a href="babcom:' || v_document_info.code || '">' || v_document_info.name || '</a>';
  end loop;

  if v_content is null then
    v_content := 'Документов нет';
  end if;

  perform data.set_attribute_value_if_changed(v_object_id, v_attribute_id, v_user_object_id, to_jsonb(v_content), v_user_object_id);
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

insert into data.attribute_value_fill_functions(attribute_id, function, params, description) values
(
  data.get_attribute_id('content'),
  'fill_if_object_attribute', '
  {
    "blocks": [
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "news_hub"}, {"attribute_code": "type", "attribute_value": "media"}],
        "function": "fill_content",
        "params": {"placeholder": "Новостей нет", "sort_attribute_code": "system_news_time", "sort_type": "desc", "output": [{"type": "attribute", "data": "news_time"}, {"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "library_category"}],
        "function": "fill_content",
        "params": {"placeholder": "Документов нет", "sort_attribute_code": "name", "sort_type": "asc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "group"}],
        "function": "fill_if_object_attribute",
        "params": {
          "blocks": [
            {
              "conditions": [{"attribute_code": "system_meta", "attribute_value": true}],
              "function": "fill_content",
              "params": {"sort_attribute_code": "name", "sort_type": "asc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
            }
          ]
        }
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "mailbox"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "name", "sort_type": "asc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "system_mail_folder_type", "attribute_value": "inbox"}],
        "function": "fill_user_content_from_user_value_attribute",
        "params": {"source_attribute_code": "inbox", "placeholder": "Писем нет", "sort_attribute_code": "system_mail_send_time", "sort_type": "desc", "output": [{"type": "attribute", "data": "mail_send_time"}, {"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "system_mail_folder_type", "attribute_value": "outbox"}],
        "function": "fill_user_content_from_user_value_attribute",
        "params": {"source_attribute_code": "outbox", "placeholder": "Писем нет", "sort_attribute_code": "system_mail_send_time", "sort_type": "desc", "output": [{"type": "attribute", "data": "mail_send_time"}, {"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "transactions"}],
        "function": "fill_user_content_from_attribute",
        "params": {"placeholder": "Транзакций нет", "source_attribute_code": "system_value", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "personal_library"}],
        "function": "fill_personal_library"
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "person_draft_percent_deals"}],
        "function": "fill_user_content_from_attribute",
        "params": {"placeholder": "Предложений продажи акций нет", "source_attribute_code": "percent_deals", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "med_library"}],
        "function": "fill_user_content",
        "params": {"placeholder": "Отчётов нет", "sort_attribute_code": "system_document_time", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "research_library"}],
        "function": "fill_user_content",
        "params": {"placeholder": "Отчётов нет", "sort_attribute_code": "system_document_time", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "crew_library"}],
        "function": "fill_user_content",
        "params": {"placeholder": "Отчётов нет", "sort_attribute_code": "system_document_time", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "corporations"}, {"attribute_code": "type", "attribute_value": "market"}, {"attribute_code": "type", "attribute_value": "states"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "name", "sort_type": "asc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "normal_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_deal_time", "sort_type": "desc", "output": [{"type": "attribute", "data": "deal_time"}, {"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "canceled_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_deal_time", "sort_type": "desc", "output": [{"type": "attribute", "data": "deal_cancel_time"}, {"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "draft_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_deal_time", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "percent_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "name", "sort_type": "asc", "output": [{"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "done_percent_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_percent_deal_time", "sort_type": "desc", "output": [{"type": "attribute", "data": "percent_deal_time"}, {"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "canceled_percent_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_percent_deal_time", "sort_type": "desc", "output": [{"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "draft_percent_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_percent_deal_time", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "transaction_list"}],
        "function": "fill_transaction_list"
      }
    ]
  }', 'Получение списков (новости, транзакции, разные документы)');

insert into data.attribute_value_fill_functions(attribute_id, function, params, description) values
(
  data.get_attribute_id('corporation_deals'),
  'fill_if_object_attribute', '
  {
    "blocks": [
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "corporation"}],
        "function": "fill_content_from_attribute",
        "params": {"placeholder": "Подтверждённых сделок нет", "source_attribute_code": "system_corporation_deals", "sort_type": "desc", "output": [{"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      }
    ]
  }', 'Получение списка подтверждённых сделок');

insert into data.attribute_value_fill_functions(attribute_id, function, params, description) values
(
  data.get_attribute_id('corporation_draft_deals'),
  'fill_if_object_attribute', '
  {
    "blocks": [
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "corporation"}],
        "function": "fill_content_from_attribute",
        "params": {"placeholder": "Подготавливаемых сделок нет", "source_attribute_code": "system_corporation_draft_deals", "sort_type": "desc", "output": [{"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      }
    ]
  }', 'Получение списка подготавливаемых сделок');

insert into data.attribute_value_fill_functions(attribute_id, function, params, description) values
(
  data.get_attribute_id('corporation_canceled_deals'),
  'fill_if_object_attribute', '
  {
    "blocks": [
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "corporation"}],
        "function": "fill_content_from_attribute",
        "params": {"placeholder": "Расторгнутых сделок нет", "source_attribute_code": "system_corporation_canceled_deals", "sort_type": "desc", "output": [{"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      }
    ]
  }', 'Получение списка расторгнутых сделок');

CREATE OR REPLACE FUNCTION attribute_value_fill_functions.value_codes_to_value_links_corporation_members(in_params jsonb)
  RETURNS void AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_attribute_id integer := json.get_integer(in_params, 'attribute_id');
  v_source_attribute_id integer := data.get_attribute_id(json.get_string(in_params, 'attribute_code'));
  v_placeholder text := json.get_opt_string(in_params, null, 'placeholder');
  v_name_attribute_id integer := data.get_attribute_id('name');

  v_codes jsonb;
  v_ids integer[];
  v_value jsonb;
begin
  select value
  into v_codes
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_source_attribute_id and
    value_object_id is null
  for share;

  if v_codes is not null then
    select array_agg(id)
    into v_ids
    from data.objects
    where
      code in (
        select member
        from jsonb_to_recordset(v_codes) as c(member text, percent int)
      );
  end if;

  if v_codes is not null then
    perform data.fill_attribute_values(v_user_object_id, v_ids, array[v_name_attribute_id]);

    select to_jsonb(string_agg('<a href="babcom:' || o.code || '">' || json.get_string(data.get_attribute_value(v_user_object_id, o.id, v_name_attribute_id)) || '</a> ' || c.percent || '%', '<br>'))
    into v_value
    from jsonb_to_recordset(v_codes) as c(member text, percent int)
    join data.objects o on
      o.code = c.member;
  else
    if v_placeholder is not null then
      v_value := to_jsonb(v_placeholder);
    end if;
  end if;

  if v_value is null then
    perform data.delete_attribute_value_if_exists(v_object_id, v_attribute_id, v_user_object_id, v_user_object_id);
  else
    perform data.set_attribute_value_if_changed(v_object_id, v_attribute_id, v_user_object_id, v_value, v_user_object_id);
  end if;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

CREATE OR REPLACE FUNCTION attribute_value_fill_functions.value_codes_to_value_links_deal_members(in_params jsonb)
  RETURNS void AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_attribute_id integer := json.get_integer(in_params, 'attribute_id');
  v_source_attribute_id integer := data.get_attribute_id(json.get_string(in_params, 'attribute_code'));
  v_placeholder text := json.get_opt_string(in_params, null, 'placeholder');
  v_name_attribute_id integer := data.get_attribute_id('name');

  v_codes jsonb;
  v_ids integer[];
  v_value jsonb;
begin
  select value
  into v_codes
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_source_attribute_id and
    value_object_id is null
  for share;

  if v_codes is not null then
    select array_agg(id)
    into v_ids
    from data.objects
    where
      code in (
        select member
        from jsonb_to_record(v_codes) as c(member text, percent_asset int, percent_income int, deal_cost int)
      );
  end if;

  if v_codes is not null then
    perform data.fill_attribute_values(v_user_object_id, v_ids, array[v_name_attribute_id]);

    select to_jsonb(string_agg('<a href="babcom:' || o.code || '">' || json.get_string(data.get_attribute_value(v_user_object_id, o.id, v_name_attribute_id)) || '</a>, владение активом: ' || c.percent_asset || '%, доход от сделки: ' || c.percent_income || '%, вложения в сделку: ' || c.deal_cost, '<br>'))
    into v_value
    from jsonb_to_record(v_codes) as c(member text, percent_asset int, percent_income int, deal_cost int)
    join data.objects o on
      o.code = c.member;
  else
    if v_placeholder is not null then
      v_value := to_jsonb(v_placeholder);
    end if;
  end if;

  if v_value is null then
    perform data.delete_attribute_value_if_exists(v_object_id, v_attribute_id, v_user_object_id, v_user_object_id);
  else
    perform data.set_attribute_value_if_changed(v_object_id, v_attribute_id, v_user_object_id, v_value, v_user_object_id);
  end if;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

insert into data.attribute_value_fill_functions(attribute_id, function, params, description) values
  (
  data.get_attribute_id('corporation_members'),
  'fill_if_object_attribute', '
  {
    "blocks": [
    {
        "conditions": [{"attribute_code": "type", "attribute_value": "corporation"}],
        "function": "value_codes_to_value_links_corporation_members",
        "params": {"attribute_code": "system_corporation_members"}
      }]
  }', 'Получение списка владельцев корпорации');

insert into data.attribute_value_fill_functions(attribute_id, function, params, description) values
(
  data.get_attribute_id('deal_participant1'),
  'fill_if_object_attribute', '
  {
    "blocks": [
    {
        "conditions": [{"attribute_code": "type", "attribute_value": "deal"}],
        "function": "value_codes_to_value_links_deal_members",
        "params": {"attribute_code": "system_deal_participant1"}
      }]
  }', 'Получение участника сделки'),
(
  data.get_attribute_id('deal_participant2'),
  'fill_if_object_attribute', '
  {
    "blocks": [
    {
        "conditions": [{"attribute_code": "type", "attribute_value": "deal"}],
        "function": "value_codes_to_value_links_deal_members",
        "params": {"attribute_code": "system_deal_participant2"}
      }]
  }', 'Получение участника сделки'),
(
  data.get_attribute_id('deal_participant3'),
  'fill_if_object_attribute', '
  {
    "blocks": [
    {
        "conditions": [{"attribute_code": "type", "attribute_value": "deal"}],
        "function": "value_codes_to_value_links_deal_members",
        "params": {"attribute_code": "system_deal_participant3"}
      }]
  }', 'Получение участника сделки'),
(
  data.get_attribute_id('deal_participant4'),
  'fill_if_object_attribute', '
  {
    "blocks": [
    {
        "conditions": [{"attribute_code": "type", "attribute_value": "deal"}],
        "function": "value_codes_to_value_links_deal_members",
        "params": {"attribute_code": "system_deal_participant4"}
      }]
  }', 'Получение участника сделки'),
(
  data.get_attribute_id('deal_participant5'),
  'fill_if_object_attribute', '
  {
    "blocks": [
    {
        "conditions": [{"attribute_code": "type", "attribute_value": "deal"}],
        "function": "value_codes_to_value_links_deal_members",
        "params": {"attribute_code": "system_deal_participant5"}
      }]
  }', 'Получение участника сделки'),
(
  data.get_attribute_id('deal_participant6'),
  'fill_if_object_attribute', '
  {
    "blocks": [
    {
        "conditions": [{"attribute_code": "type", "attribute_value": "deal"}],
        "function": "value_codes_to_value_links_deal_members",
        "params": {"attribute_code": "system_deal_participant6"}
      }]
  }', 'Получение участника сделки'),
(
  data.get_attribute_id('deal_participant7'),
  'fill_if_object_attribute', '
  {
    "blocks": [
    {
        "conditions": [{"attribute_code": "type", "attribute_value": "deal"}],
        "function": "value_codes_to_value_links_deal_members",
        "params": {"attribute_code": "system_deal_participant7"}
      }]
  }', 'Получение участника сделки'),
(
  data.get_attribute_id('deal_participant8'),
  'fill_if_object_attribute', '
  {
    "blocks": [
    {
        "conditions": [{"attribute_code": "type", "attribute_value": "deal"}],
        "function": "value_codes_to_value_links_deal_members",
        "params": {"attribute_code": "system_deal_participant8"}
      }]
  }', 'Получение участника сделки'),
(
  data.get_attribute_id('deal_participant9'),
  'fill_if_object_attribute', '
  {
    "blocks": [
    {
        "conditions": [{"attribute_code": "type", "attribute_value": "deal"}],
        "function": "value_codes_to_value_links_deal_members",
        "params": {"attribute_code": "system_deal_participant9"}
      }]
  }', 'Получение участника сделки'),
(
  data.get_attribute_id('deal_participant10'),
  'fill_if_object_attribute', '
  {
    "blocks": [
    {
        "conditions": [{"attribute_code": "type", "attribute_value": "deal"}],
        "function": "value_codes_to_value_links_deal_members",
        "params": {"attribute_code": "system_deal_participant10"}
      }]
  }', 'Получение участника сделки');

insert into data.attribute_value_fill_functions(attribute_id, function, params, description) values
(data.get_attribute_id('transaction_destinations'), 'fill_if_object_attribute', '{"blocks": [{"conditions": [{"attribute_code": "type", "attribute_value": "transaction_destinations"}], "function": "filter_user_object_code"}]}', 'Получение списка возможных получателей переводов');

insert into data.attribute_value_fill_functions(attribute_id, function, params, description) values
(
  data.get_attribute_id('balance'),
  'fill_if_user_object_attribute',
  '{
    "blocks": [
      {
        "conditions": [{"attribute_code": "system_master", "attribute_value": true}],
        "function": "fill_user_object_attribute_from_attribute",
        "params": {"attribute_code": "system_balance"}
      },
      {
        "function": "fill_object_attribute_from_attribute",
        "params": {"attribute_code": "system_balance"}
      }
    ]
  }', 'Получение состояния счёта'),
  (
  data.get_attribute_id('person_salary'),
  'fill_if_user_object_attribute',
  '{
    "blocks": [
      {
        "conditions": [{"attribute_code": "system_master", "attribute_value": true}],
        "function": "fill_user_object_attribute_from_attribute",
        "params": {"attribute_code": "system_person_salary"}
      },
      {
        "function": "fill_object_attribute_from_attribute",
        "params": {"attribute_code": "system_person_salary"}
      }
    ]
  }', 'Получение дохода'),
  (
  data.get_attribute_id('political_influence'),
  'fill_if_user_object_attribute',
  '{
    "blocks": [
      {
        "conditions": [{"attribute_code": "system_master", "attribute_value": true}],
        "function": "fill_user_object_attribute_from_attribute",
        "params": {"attribute_code": "system_political_influence"}
      },
      {
        "function": "fill_object_attribute_from_attribute",
        "params": {"attribute_code": "system_political_influence"}
      }
    ]
  }', 'Получение политического влияния'),
  (
  data.get_attribute_id('vote_history'),
  'fill_if_user_object_attribute',
  '{
    "blocks": [
      {
        "conditions": [{"attribute_code": "system_master", "attribute_value": true}],
        "function": "fill_value_object_attribute_from_attribute",
        "params": {"value_object_code": "masters", "attribute_code": "system_vote_history"}
      },
      {
        "conditions": [{"attribute_code": "system_secretary", "attribute_value": true}],
        "function": "fill_value_object_attribute_from_attribute",
        "params": {"value_object_code": "secretaries", "attribute_code": "system_vote_history"}
      },
      {
        "conditions": [{"attribute_code": "system_politician", "attribute_value": true}],
        "function": "fill_value_object_attribute_from_attribute",
        "params": {"value_object_code": "senators", "attribute_code": "system_vote_history"}
      }
    ]
  }', 'Получение истории голосований');

insert into data.attribute_value_fill_functions(attribute_id, function, params, description) values
(
  data.get_attribute_id('person_psi_scale'),
  'fill_if_user_object_attribute',
  '{
    "blocks": [
      {
        "conditions": [{"attribute_code": "system_master", "attribute_value": true}],
        "function": "fill_user_object_attribute_from_attribute",
        "params": {"attribute_code": "system_psi_scale"}
      },
      {
        "function": "fill_object_attribute_from_attribute",
        "params": {"value_object_code": "masters", "attribute_code": "system_psi_scale"}
      }
    ]
  }', 'Получение рейтинга телепата');

-- Заполнение атрибутов
select data.set_attribute_value(data.get_object_id('mail_contacts'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('mail_contacts'), data.get_attribute_id('type'), null, jsonb '"mail_contacts"');
select data.set_attribute_value(data.get_object_id('mail_contacts'), data.get_attribute_id('name'), null, jsonb '"Доступные контакты"');

select data.set_attribute_value(data.get_object_id('transaction_destinations'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('transaction_destinations'), data.get_attribute_id('type'), null, jsonb '"transaction_destinations"');
select data.set_attribute_value(data.get_object_id('transaction_destinations'), data.get_attribute_id('name'), null, jsonb '"Возможные получатели переводов"');

select data.set_attribute_value(data.get_object_id('persons'), data.get_attribute_id('system_priority'), null, jsonb '10');
select data.set_attribute_value(data.get_object_id('persons'), data.get_attribute_id('system_meta'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('persons'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('persons'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('persons'), data.get_attribute_id('name'), null, jsonb '"Все контакты"');
select data.set_attribute_value(data.get_object_id('persons'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('offline'), data.get_attribute_id('system_priority'), null, jsonb '15');
select data.set_attribute_value(data.get_object_id('offline'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('offline'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('offline'), data.get_attribute_id('name'), null, jsonb '"Присутствующие на станции"');
select data.set_attribute_value(data.get_object_id('offline'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('online'), data.get_attribute_id('system_priority'), null, jsonb '15');
select data.set_attribute_value(data.get_object_id('online'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('online'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('online'), data.get_attribute_id('name'), null, jsonb '"Внешние контакты"');
select data.set_attribute_value(data.get_object_id('online'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('masters'), data.get_attribute_id('system_priority'), null, jsonb '100');
select data.set_attribute_value(data.get_object_id('masters'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('masters'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('masters'), data.get_attribute_id('name'), null, jsonb '"Справочное бюро"');
select data.set_attribute_value(data.get_object_id('masters'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('security'), data.get_attribute_id('system_priority'), null, jsonb '70');
select data.set_attribute_value(data.get_object_id('security'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('security'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('security'), data.get_attribute_id('name'), null, jsonb '"Служба безопасности"');
select data.set_attribute_value(data.get_object_id('security'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('senators'), data.get_attribute_id('system_priority'), null, jsonb '41');
select data.set_attribute_value(data.get_object_id('senators'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('senators'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('senators'), data.get_attribute_id('name'), null, jsonb '"Сенаторы"');
select data.set_attribute_value(data.get_object_id('senators'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('congressmen'), data.get_attribute_id('system_priority'), null, jsonb '40');
select data.set_attribute_value(data.get_object_id('congressmen'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('congressmen'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('congressmen'), data.get_attribute_id('name'), null, jsonb '"Конгрессмены"');
select data.set_attribute_value(data.get_object_id('congressmen'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('ambassadors'), data.get_attribute_id('system_priority'), null, jsonb '40');
select data.set_attribute_value(data.get_object_id('ambassadors'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('ambassadors'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('ambassadors'), data.get_attribute_id('name'), null, jsonb '"Послы"');
select data.set_attribute_value(data.get_object_id('ambassadors'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('politicians'), data.get_attribute_id('system_priority'), null, jsonb '40');
select data.set_attribute_value(data.get_object_id('politicians'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('politicians'), data.get_attribute_id('name'), null, jsonb '"Политики"');

select data.set_attribute_value(data.get_object_id('medics'), data.get_attribute_id('system_priority'), null, jsonb '50');
select data.set_attribute_value(data.get_object_id('medics'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('medics'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('medics'), data.get_attribute_id('name'), null, jsonb '"Медицинский персонал"');

select data.set_attribute_value(data.get_object_id('researchers'), data.get_attribute_id('system_priority'), null, jsonb '50');
select data.set_attribute_value(data.get_object_id('researchers'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('researchers'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('researchers'), data.get_attribute_id('name'), null, jsonb '"Исследователи"');

select data.set_attribute_value(data.get_object_id('crew'), data.get_attribute_id('system_priority'), null, jsonb '50');
select data.set_attribute_value(data.get_object_id('crew'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('crew'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('crew'), data.get_attribute_id('name'), null, jsonb '"Экипаж станции"');
select data.set_attribute_value(data.get_object_id('crew'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('ea_military'), data.get_attribute_id('system_priority'), null, jsonb '50');
select data.set_attribute_value(data.get_object_id('ea_military'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('ea_military'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('ea_military'), data.get_attribute_id('name'), null, jsonb '"Военные Земного Альянса"');
select data.set_attribute_value(data.get_object_id('ea_military'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('secretaries'), data.get_attribute_id('system_priority'), null, jsonb '50');
select data.set_attribute_value(data.get_object_id('secretaries'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('secretaries'), data.get_attribute_id('type'), null, jsonb '"group"');
select data.set_attribute_value(data.get_object_id('secretaries'), data.get_attribute_id('name'), null, jsonb '"Секретарь ассамблеи"');
select data.set_attribute_value(data.get_object_id('secretaries'), data.get_attribute_id('system_mail_contact'), null, jsonb 'false');

select data.set_attribute_value(data.get_object_id('corporations'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporations'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporations'), data.get_attribute_id('type'), null, jsonb '"corporations"');
select data.set_attribute_value(data.get_object_id('corporations'), data.get_attribute_id('name'), null, jsonb '"Корпорации"');

select data.set_attribute_value(data.get_object_id('news_hub'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news_hub'), data.get_attribute_id('system_meta'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news_hub'), data.get_attribute_id('type'), null, jsonb '"news_hub"');
select data.set_attribute_value(data.get_object_id('news_hub'), data.get_attribute_id('name'), null, jsonb '"Новости"');

select data.set_attribute_value(data.get_object_id('media_isn'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('media_isn'), data.get_attribute_id('system_meta'), data.get_object_id('media_isn'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('media_isn'), data.get_attribute_id('type'), null, jsonb '"media"');
select data.set_attribute_value(data.get_object_id('media_isn'), data.get_attribute_id('name'), null, jsonb '"ISN"');
select data.set_attribute_value(data.get_object_id('media_isn'), data.get_attribute_id('description'), null, jsonb '"Новостное агенство ISN"');

select data.set_attribute_value(data.get_object_id('media_ibc'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('media_ibc'), data.get_attribute_id('system_meta'), data.get_object_id('media_ibc'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('media_ibc'), data.get_attribute_id('type'), null, jsonb '"media"');
select data.set_attribute_value(data.get_object_id('media_ibc'), data.get_attribute_id('name'), null, jsonb '"IBC"');
select data.set_attribute_value(data.get_object_id('media_ibc'), data.get_attribute_id('description'), null, jsonb '"Новостное агенство IBC"');

select data.set_attribute_value(data.get_object_id('states'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('states'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('states'), data.get_attribute_id('type'), null, jsonb '"states"');
select data.set_attribute_value(data.get_object_id('states'), data.get_attribute_id('name'), null, jsonb '"Государства"');

select data.set_attribute_value(data.get_object_id('assembly'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('assembly'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('assembly'), data.get_attribute_id('type'), null, jsonb '"assembly"');
select data.set_attribute_value(data.get_object_id('assembly'), data.get_attribute_id('name'), null, jsonb '"Ассамблея"');

select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('system_meta'), data.get_object_id('secretaries'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('system_meta'), data.get_object_id('politicians'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('system_is_visible'), data.get_object_id('secretaries'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('system_is_visible'), data.get_object_id('politicians'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('system_is_visible'), data.get_object_id('anonymous'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('type'), null, jsonb '"vote"');
select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('name'), null, jsonb '"Голосования"');
select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('vote_status'), null, jsonb '"no"');

-- TODO: Добавить кому-нибудь system_secretary
--select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_secretary'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('state_ea'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_ea'), data.get_attribute_id('system_meta'), data.get_object_id('person26'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_ea'), data.get_attribute_id('system_meta'), data.get_object_id('person47'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_ea'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_ea'), data.get_attribute_id('name'), null, jsonb '"Земной Альянс"');
select data.set_attribute_value(data.get_object_id('state_ea'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_ea'), data.get_attribute_id('description'), null, jsonb '"Земной Альянс"');
select data.set_attribute_value(data.get_object_id('state_ea'), data.get_attribute_id('state_tax'), null, to_jsonb(20));

select data.set_attribute_value(data.get_object_id('state_centauri'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_centauri'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_centauri'), data.get_attribute_id('name'), null, jsonb '"Республика Центавр"');
select data.set_attribute_value(data.get_object_id('state_centauri'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_centauri'), data.get_attribute_id('description'), null, jsonb '"Республика Центавр"');
select data.set_attribute_value(data.get_object_id('state_centauri'), data.get_attribute_id('state_tax'), null, to_jsonb(20));

select data.set_attribute_value(data.get_object_id('state_narn'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_narn'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_narn'), data.get_attribute_id('name'), null, jsonb '"Режим Нарна"');
select data.set_attribute_value(data.get_object_id('state_narn'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_narn'), data.get_attribute_id('description'), null, jsonb '"Режим Нарна"');
select data.set_attribute_value(data.get_object_id('state_narn'), data.get_attribute_id('state_tax'), null, to_jsonb(20));

select data.set_attribute_value(data.get_object_id('state_vorlon'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_vorlon'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_vorlon'), data.get_attribute_id('name'), null, jsonb '"Империя Ворлон"');
select data.set_attribute_value(data.get_object_id('state_vorlon'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_vorlon'), data.get_attribute_id('description'), null, jsonb '"Империя Ворлон"');
select data.set_attribute_value(data.get_object_id('state_vorlon'), data.get_attribute_id('state_tax'), null, to_jsonb(20));

select data.set_attribute_value(data.get_object_id('state_drazzi'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_drazzi'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_drazzi'), data.get_attribute_id('name'), null, jsonb '"Драззи"');
select data.set_attribute_value(data.get_object_id('state_drazzi'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_drazzi'), data.get_attribute_id('description'), null, jsonb '"Драззи"');
select data.set_attribute_value(data.get_object_id('state_drazzi'), data.get_attribute_id('state_tax'), null, to_jsonb(20));

select data.set_attribute_value(data.get_object_id('state_brakiri'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_brakiri'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_brakiri'), data.get_attribute_id('name'), null, jsonb '"Бракири"');
select data.set_attribute_value(data.get_object_id('state_brakiri'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_brakiri'), data.get_attribute_id('description'), null, jsonb '"Бракири"');
select data.set_attribute_value(data.get_object_id('state_brakiri'), data.get_attribute_id('state_tax'), null, to_jsonb(20));

select data.set_attribute_value(data.get_object_id('state_markabi'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_markabi'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_markabi'), data.get_attribute_id('name'), null, jsonb '"Идеократия Маркаби"');
select data.set_attribute_value(data.get_object_id('state_markabi'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_markabi'), data.get_attribute_id('description'), null, jsonb '"Идеократия Маркаби"');
select data.set_attribute_value(data.get_object_id('state_markabi'), data.get_attribute_id('state_tax'), null, to_jsonb(20));

select data.set_attribute_value(data.get_object_id('state_minbari'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_minbari'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_minbari'), data.get_attribute_id('name'), null, jsonb '"Федерация Минбари"');
select data.set_attribute_value(data.get_object_id('state_minbari'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_minbari'), data.get_attribute_id('description'), null, jsonb '"Федерация Минбари"');
select data.set_attribute_value(data.get_object_id('state_minbari'), data.get_attribute_id('state_tax'), null, to_jsonb(20));

select data.set_attribute_value(data.get_object_id('state_ikarra'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_ikarra'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_ikarra'), data.get_attribute_id('name'), null, jsonb '"Идилия Икарры"');
select data.set_attribute_value(data.get_object_id('state_ikarra'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_ikarra'), data.get_attribute_id('description'), null, jsonb '"Идилия Икарры"');
select data.set_attribute_value(data.get_object_id('state_ikarra'), data.get_attribute_id('state_tax'), null, to_jsonb(20));

select data.set_attribute_value(data.get_object_id('state_dilgar'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_dilgar'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_dilgar'), data.get_attribute_id('name'), null, jsonb '"Диктатура Дилгар"');
select data.set_attribute_value(data.get_object_id('state_dilgar'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_dilgar'), data.get_attribute_id('description'), null, jsonb '"Диктатура Дилгар"');
select data.set_attribute_value(data.get_object_id('state_dilgar'), data.get_attribute_id('state_tax'), null, to_jsonb(20));

select data.set_attribute_value(data.get_object_id('state_antares'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_antares'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_antares'), data.get_attribute_id('name'), null, jsonb '"Синдикат Антареса"');
select data.set_attribute_value(data.get_object_id('state_antares'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_antares'), data.get_attribute_id('description'), null, jsonb '"Синдикат Антареса"');
select data.set_attribute_value(data.get_object_id('state_antares'), data.get_attribute_id('state_tax'), null, to_jsonb(0));

select data.set_attribute_value(data.get_object_id('state_drakh'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_drakh'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_drakh'), data.get_attribute_id('name'), null, jsonb '"Технократия Дракхов"');
select data.set_attribute_value(data.get_object_id('state_drakh'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_drakh'), data.get_attribute_id('description'), null, jsonb '"Технократия Дракхов"');
select data.set_attribute_value(data.get_object_id('state_drakh'), data.get_attribute_id('state_tax'), null, to_jsonb(20));

select data.set_attribute_value(data.get_object_id('state_anlashok'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('state_anlashok'), data.get_attribute_id('type'), null, jsonb '"state"');
select data.set_attribute_value(data.get_object_id('state_anlashok'), data.get_attribute_id('name'), null, jsonb '"Ан-Лашок"');
select data.set_attribute_value(data.get_object_id('state_anlashok'), data.get_attribute_id('system_balance'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('state_anlashok'), data.get_attribute_id('description'), null, jsonb '"Ан-Лашок"');
select data.set_attribute_value(data.get_object_id('state_anlashok'), data.get_attribute_id('state_tax'), null, to_jsonb(20));

select data.set_attribute_value(data.get_object_id('anonymous'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('anonymous'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('anonymous'), data.get_attribute_id('type'), null, jsonb '"anonymous"');
select data.set_attribute_value(data.get_object_id('anonymous'), data.get_attribute_id('name'), null, jsonb '"Аноним"');
select data.set_attribute_value(data.get_object_id('anonymous'), data.get_attribute_id('description'), null, jsonb '"Вы не вошли в систему и работаете в режиме чтения общедоступной информации."');

select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('name'), null, jsonb '"Джон Шерридан"');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_crew_member'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_crew_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_political_influence'), null, to_jsonb(1));
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_ea_military'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('person_job_position'), null, jsonb '"Капитан станции Вавилон 5"');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_balance'), null, jsonb '400000');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_person_salary'), null, jsonb '600000');
select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('person_biography'), null, jsonb '"Капитан ЗФ ЗА. Недавно назначен командиром станции Вавилон 5. Первый день на новой службе. Также назначен послом в Консультативный Совет и является его председателем.<br>Шерридан герой войны, единственный офицер ЗФ который нанес существенный урон минбарцам, взорвав их флагман \"Черную звезду\" и серьезно повредив еще два крейсера класса \"Шарлин\". Многие рассматривают его назначение на должность как дипломатический афронт от Президента ЗА Кейн минбарцам, которых она мягко говоря недолюбливает.<br>Каким он окажется главой такого важного дипломатического объекта покажет время.<br>Также Шерридан вошел в Консультативный Совет ГА вместо Игоря Семенова, который сейчас возглавляет оппозицию Кейн и готовит проведение четвертого Конгресса."');

select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('name'), null, jsonb '"Анна Корсак"');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('system_crew_member'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('system_crew_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('system_ea_military'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('person_job_position'), null, jsonb '"Старший помошник капитана станции Вавилон 5"');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('system_balance'), null, jsonb '40000');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('system_person_salary'), null, jsonb '20000');
select data.set_attribute_value(data.get_object_id('person2'), data.get_attribute_id('person_biography'), null, jsonb '"30 лет. Русская.<br>Родилась в 2228 г. на Земле, в Варшаве. Мать Виолетта – эколог, отец Борис Корсак – пилот гражданского флота, инженер.<br>В 2230 г. семья переехала в Марсианский Консорциум, Директория Европа. Анна получила дистанционное образование, окончила с высшим баллом, в 17 лет подала документы в Академию ЗФ и уехала на Землю. Родители остались в колонии, где, будучи миноритарными акционерами Марс-Индастриз, на тот момент входили в руководство колонии.<br>Специализация в Академии: пилотирование и навигация. Была лучшей на курсе, предметом гордости преподавателей.<br>В 2246 году началась война. Земля проигрывала. Пошли слухи о брожениях в колониях. В том числе - о восстании на Европе. Правительство ЗА применило военную силу, в числе погибших - 1,5 тыс. колонистов-мятежников. Были убиты и родители Анны.<br>Последовавшая за этим тщательная проверка подтвердила ее непричастность к деятельности родителей и полную лояльность ЗА. Было опубликовано ее официальное заявление с отказом от родственников-сепаратистов.<br>В 2248 г., когда корабли Минбари подошли к Земле, в числе прочих кадетов Академии ЗФ осуществляла прикрытие для кораблей, эвакуировавших население с планеты.<br>2250 г. Окончила Академию с отличием, поступила на службу в ВС ЗФ.<br>По программе обмена военным опытом ЗА три месяца проходила стажировку на истребителе драззи.<br>2253-2257 годы. Служба в четвертом ударном флоте в Директории Проксима. Лейтенант ЗФ ЗА, командир тактической эскадрильи истребителей. Пять месяцев назад, во время \"Центаврского инцидента\", приведшего к разгрому третьего и четвертого ударных флотов, осуществляла прикрытие и отход разрушителя \"Эриния\".<br>2257 год. Получила новое звание - Лейтенант-Коммандер, и представлена к новой должности: старший помощник командира \"Вавилона 5\". Представлена к награде, медаль \"За личную храбрость\". Прибыла на Вавилон, чтобы принять дела от прошлого руководства станции. В течение 4 месяцев исполняла обязанности временного командира станции. Сформировала новую команду.<br>Не замужем. Жених, лейтенант Крис Роджерс, был пилотом ЗФ, погиб во время \"Проксимского Ицидента\".<br>Во время учебы в Академии прошла тестирование Пси-корпуса. Генетической предрасположенности к пси-способностям не выявлено."');

select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('name'), null, jsonb '"Николай Сибирский"');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_researcher'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_crew_member'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_research_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_crew_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_political_influence'), null, to_jsonb(1));
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('person_job_position'), null, jsonb '"Второй помощник капитана станции Вавилон 5"');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_balance'), null, jsonb '40000');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_person_salary'), null, jsonb '20000');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('person_biography'), null, jsonb '"В биографии нет ничего выдающегося"');

select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('name'), null, jsonb '"Джузеппе Гарибальди"');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('system_crew_member'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('system_med_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('system_research_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('system_crew_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('system_security'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('person_job_position'), null, jsonb '"Начальник безопасности станции Вавилон 5"');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('system_balance'), null, jsonb '80000');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('system_person_salary'), null, jsonb '40000');
select data.set_attribute_value(data.get_object_id('person4'), data.get_attribute_id('person_biography'), null, jsonb '"Родился и был воспитан на колонии Марс. Он является сыном Альфредо Гарибальди, пехотинца Военных Сил Земного Альянса. Гарибальди воспитан на традициях католической церкви, позднее он скажет, что был воспитан «хорошим мальчиком-католиком». Впоследствии он стал агностиком, но всегда испытывал определённое уважение к церкви.<br>Гарибальди — подозрительный, как и положено по должности, но честный человек. Именно эта его черта, а также привычка заливать алкоголем приказы, расходящиеся с его жизненной позицией, послужила причиной разногласий и осложнений на службе.<br>В течение долгих лет проблемы со спиртным преследовали Гарибальди, приведя к увольнениям с нескольких мест работы. В конце концов он сумел взять себя в руки. До назначения на Вавилон-5. Холост, не пьет, родственников нет. После развода, поддерживает связь с женой, она осталась на Марсе.<br>Служил на Агамемнон под командованием Шерридана, участник известного сражения в котором пала \"Черная звезда\"."');

select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('name'), null, jsonb '"Сьюзанн Франклин"');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('system_medic'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('system_researcher'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('system_crew_member'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('system_med_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('system_research_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('system_crew_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('person_job_position'), null, jsonb '"Главный врач станции Вавилон 5"');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('system_balance'), null, jsonb '40000');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('system_person_salary'), null, jsonb '20000');
select data.set_attribute_value(data.get_object_id('person5'), data.get_attribute_id('person_biography'), null, jsonb '"Сьюзан Франклин, родилась 05.01.2220, Земля, Земной Альянс, лейтенант КС ЗА<br><br>Отец Ричард Франклин, военный генерал, в данный момент военный губернатор Марсианской колонии. Бывший член ОКНШ ЗА, возглавлял штаб Наземных Сил.<br>Мать Елена Франклин, ученый-биолог, в данный момент находится в состоянии комы.<br>Брат Стивен Франклин, военый-медик.<br>Сын Вильгельм Франклин 5 лет<br><br>Семейство Франклинов старое и известное, среди них были известные сенаторы, генералы и даже один кандидат в президенты. Семья потомственных военных.<br><br>2237-2242 гг - Обучение в военной академии звездного флота земли.<br>2242-2256 гг - Военная служба в качестве пилота.<br>2253-2256 гг - Обучение в академии медслужбы при комитете начальников штабов.<br>2257 г - Врач и начальник медлаборатории на станции Вавилоне-5."');

select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('name'), null, jsonb '"Джейн Доу"');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('system_crew_member'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('system_med_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('system_research_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('system_crew_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('system_security'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('person_job_position'), null, jsonb '"Инженер станции Вавилон 5"');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('system_psi_scale'), null, jsonb '12');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('system_balance'), null, jsonb '40000');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('system_person_salary'), null, jsonb '20000');
select data.set_attribute_value(data.get_object_id('person6'), data.get_attribute_id('person_biography'), null, jsonb '"В биографии нет ничего выдающегося"');

select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('name'), null, jsonb '"Лондо Моллари"');
select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('person_race'), null, jsonb '"centauri"');
select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('person_state'), null, jsonb '"centauri"');
select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('person_job_position'), null, jsonb '"Посол Республики Центавр на станции Вавилон 5"');
select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('person_biography'), null, jsonb '"Дом Моллари некогда был одним из великих домов Республики Центавра и даже достиг пика могущества во времена правления императора Моллари I, много веков назад. Однако, император Моллари \"кончил плохо\" и начался закат дома, за которым последовала долгая ночь. Вот уже два с лишним столетия род входит в великий дом Фирра и не известен ни влиянием, ни богатством, хотя и нищими их не назвать. Чаще всего сыновья дома избирают карьеру военного. Дом Фирра часто использует наиболее талантливых Моллари как своих эмиссаров, присваивая славу в случае успеха и предоставляя вассалам пожинать плоды неудач. Лондо - не исключение из этого правила.<br><br>Лондо родился в 2201 году (по летосчислению ЗА), средним из трёх сыновей лорда Крааза Моллари. Его отношения с отцом всегда были сложными, особенно после того, как юный Лондо тайно женился на низкородной танцовщице и даже, по слухам, прижил с ней сына. Вскоре после этого, Крааз Моллари, его старший сын Андило и другие старшие представители рода были убиты на Антаресе по приказу матриарха антаресского дома Бхара. В одночасье став главой рода, Лондо расторг женитьбу и использовал остатки семейного влияния и состояния чтобы заключить три договорных брака с Тимов, Даггар и Мариель. Браки оказались выгодными, но Лондо предпочитает держать жён как можно дальше от себя и так и не обзавёлся другими детьми, кроме гипотетического бастарда. Кажется, Лондо скорее сосредоточен на том, чтобы упрочить и приумножить положение семьи, чем на мести – известно даже, что фармацевтические предприятия Моллари активно сотрудничают с антаресами из дома Риоваль.<br>В молодости Лондо обучался в престижной военной академии, где, вместе с другом детства Урзой Джаддо, стал членом элитного дуэльного общества Куро Придо, получив прозвище Пасо Лиати. Военная карьера молодого Маллари сложилась удачно, в 2223 году он выпускается из академии, как квалифицированный пилот истребителя класса \"Сентри\" и вскоре получает должность командира гарнизона на одном из аванпостов на границе с Режимом Нарна. В течении нескольких лет Маллари участвует в ряде столкновений с нарнами, громами и хурр, в 2236 году лично возглавляет успешный рейд на Фраллис-12, за что удастаивается аудиенции при дворе и награждается орденом Примы Центавра.<br>В 2240 при содействии лорда Фирра Лондо назначают дипломатическим представителем в посольство на Земле (земное направление в это время считается в центаврианской дипломатии малозначительным и непрестижным, так что можно предположить, что Фирра намеревался осадить чересчур перспективного вассала). Молодому Моллари на Земле нравится, он обзаводится множеством знакомств (в том числе, поговаривают, несколько сомнительного свойства). Благосостояние семьи неуклонно растёт, в том числе за счёт торговли культурными артефактами людей. В 2245 году Женевский купол, желая установить контакты с Минбарской Федерацией, направляет послу Моллари официальный запрос, с просьбой предоставить координаты владений Минбара. Лондо удовлетворил запрос, хотя и с некоторой неохотой, предупредив представителей земного правительства, что минбарцы – опасная и непредсказуемая раса, склонная к изоляционизму. Вскоре между Землёй и Минбаром вспыхнула война...<br>В 2257 году послом республики Центавр на «Вавилон-5» был назначен младший брат Лондо, Аллон Моллари. Вскоре, после известных событий вокруг Первой Ассамблеи, Аллон впал в немилость и был отозван со станции на родину, где скоропостижно скончался при несколько туманных и двусмысленных обстоятельствах. В это же время, Лондо был спешно отозван с Земли. Также известно, что сын Аллона, Карн Моллари, старший научный сотрудник на колонии Рагеш-3, попал в плен к нарнам. Лондо объявился на Центавре Прайм и, кажется, находится в фаворе у императора Турхана и нового прайм-министра. Он добился назначения послом на «Вавилон-5» в том числе, видимо, надеясь урегулировать кризис на Рагеше-3 и спасти племянника."');

select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('name'), null, jsonb '"Дарио Галло"');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('person_race'), null, jsonb '"centauri"');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('person_state'), null, jsonb '"centauri"');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('person_job_position'), null, jsonb '"Торговый атташе на станции Вавилон 5"');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('person_biography'), null, jsonb '"Седьмой сын Чезаро Гало. Младший дом без представтельства в Центаруме.<br>Родился в 2200 году.<br>В 2230 г. поступил в Его Императорского Величества Гвардейскую Офицерскую Академию.<br>В 2233 г. Был исключен с третьего курса за “незаконные действия, повлекшие за собой тюремное заключение, сроком на три полных года”.<br>Выйдя из тюрьмы, в 2236 году, подал прошение о зачислении в Гвардейские Колониальные войска - подразделения Центаврианской Гвардии, укомплектованные представителями иных рас и низших слоёв центаврианского общества. Был направлен на границу с Нарнийскими секторами в чине младшего офицера. В течении пятнадцати лет принимал активное участие в многочисленных пограничных конфликтах с Нарном. Был четырежды ранен.<br>В 2244 году во время очередного конфликта в квадранте 37 при абордаже Нарнийского крейсера Фа-Тагн, первым ворвался в командную рубку, за что был награжден Алым Венком из рук Первого Гвардейца. Тогда же он сочетался браком со своей первой женой Барра Нелика. Говорят женился по пьяни или по любви.<br>В 2245 году получил предложение от командования о восстановлении в ЕИВ Гвардейской Офицерской Академии.<br>В 2250 году по окончанию расширенного учебного курса ЕИВ Гвардейской Офицерской Академии, Дарио Гало назначен командиром четвертого отдельного эскадрона Сил Специальных Операций Колониальных войск Гвардии.<br>Тогда же им заключен второй брак, его женой стала высокопоставленный член гильдии телепатов Лори Галло (взяла фамилию мужа).<br>Силы Специальных Операций состоят из наёмников-инорасцев, возглавляемых опытнейшими центаврианскими офицерами . Основная задача отдельных эскадронов СПН -проведение “негласных” операций против официально нейтральных и союзных государств.<br>По данным разведывательной службы Нарна бойцы четвертого эскадрона участвовали в восстании против власти Нарна на планете Тучанк в период с 2252 по 2255 г.г. в качестве военных советников и диверсантов.<br>В 2258 году в ходе вероломной атаки Нарна на колонию Республики Рагеш-3, был вероломно захвачен один из высших чиновников Республики - Брутус Самин. Четвертому эскадрону было поручено провести операцию по освобождению пленника. В результате дерзкой вылазки подразделения, из временного лагеря военнопленных, вместе с Брутусом, было освобождено четырнадцать центаврианских граждан. Капитан Гало, прикрывавший эвакуацию центавриан, был отрезан от своего отряда и взят в плен. От немедленной казни Дарио Гало спасло желание высокопоставленных чиновников Нарна провести показательный суд над центаврианским офицером.<br>Гало был обвинен в целом ряде военных преступлений, главным из которых, согласно обвинениям нарнийской стороны стал расстрел гражданских медиков Нарна, размещенных неподалеку от лагеря военнопленных на Рагеш -3.<br>Длившейся около двух месяцев суд был прерван в связи с досадным обстоятельством. Силами обороны Дома Саммин был захвачен высокопоставленный Нарн, капитан кресера НаТод, член 2 круга Кхари. Служба безопасности Республики проявила свойственный центаврианам гуманизм, предложив нарнийской стороне помощь в возвращении заблудившегося капитана на родину.<br>Абсолютно неожиданно нарны ответили благодарностью на этот, полный благородства, жест. В качестве ответной любезности, нарны передали Дарио Гало на поруки центаврианской стороне. Этот, столь редкий для жестоких и вероломных нарнов жест, по всей видимости привлек внимание самих Богов, так как всего через три дня после освобождения Гало, чудесным образом капитан Г''Артахс вернулся на родину под свое вонючее красное солнце.<br>Из плена на Родину Дарио вернулся уже знаменитым. Брутус Саммин (бывший на момент его освобождения всего лишь наследником Дома третьей очереди), ставший Лордом Саммин и главой<br>Дома, подал прошение в военное ведомство Центаурума о переводе капитана Гало на дипломатическую службу за заслуги перед Домом и Республикой.<br>Прошение дома Саммин было удовлетворено.<br>В 2258 году Дарио Гало был направлен на Вавилон 5 в качестве торгового атташе. Также, по настоятельной просьбе известного оружейного концерна Марба (производители знаменитых Ворчанов), Дарио стал их представителем на Вавилоне 5. Воротилам концерна показалось удачной идеей сделать продавцом их оружия человека, активно этим оружием пользовавшегося. Поскольку к должности представителя корпорации на Вавилоне 5 прилагалось весьма скромное жалованье доля в доходах от заключенных сделок, Дарио согласился. Так седьмой сын Гало в одночасье превратился из опытного солдата в дипломата и торговца. может быть он выведет семью Гало в ряды Домов и получит место в Центаруме, или сгинет в пучине гражданской смуты, и войны с Нарнами? Время покажет."');

select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('name'), null, jsonb '"К''Этар"');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('person_race'), null, jsonb '"narn"');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('person_state'), null, jsonb '"narn"');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('person_job_position'), null, jsonb '"Посол Режима Нарна на станции Вавилон 5"');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('person_biography'), null, jsonb '"В биографии нет ничего выдающегося"');

select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('name'), null, jsonb '"Г''Артахс"');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('person_race'), null, jsonb '"narn"');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('person_state'), null, jsonb '"narn"');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('person_job_position'), null, jsonb '"Военный атташе Режима Нарна"');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('person_biography'), null, jsonb '"В биографии нет ничего выдающегося"');

select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('name'), null, jsonb '"Инквизитор"');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('person_race'), null, jsonb '"unknown"');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('person_state'), null, jsonb '"vorlon"');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_med_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_research_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_crew_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_security'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('person_job_position'), null, jsonb '"Посол Империи Ворлон"');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_psi_scale'), null, jsonb '12');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_person_salary'), null, jsonb '500000');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('person_biography'), null, jsonb '"Какая-либо доступная информация отсутствует"');

select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('name'), null, jsonb '"Александра Бах"');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('system_med_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('system_research_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('system_crew_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('system_security'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('person_job_position'), null, jsonb '"Секретарь консультативного совета"');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('system_balance'), null, jsonb '40000');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('system_person_salary'), null, jsonb '20000');
select data.set_attribute_value(data.get_object_id('person12'), data.get_attribute_id('person_biography'), null, jsonb '"Александра Бах, корреспондент Интерстеллар Ньюс.<br><br>Место рождения - Земля, Солнечная система <br>Мать - Вера Бах, профессор философии, жива.<br>Отец - Альфред Бах, школьный учитель, жив.<br>Образование - диплом Оксфордского Университета по специальности журналистика.<br>Личная жизнь - состояла в браке с Девидом Зареком, полковником ЗФ ЗА. Разведена.<br>Писала для Sunday Times, Independent on Sunday, The Observer и Daily Mirror, была зам-редактора News Of The World.<br>Провела почти 10 лет, работая для многих изданий, включая The Observer и Daily Mirror и. Она также работала как диктор, продюсер и ведущий программ для телепередач ISN, BBC и CNN, ездила по многим колониям Земного Альянса. Известна как борец за гласность, прежде всего благодаря своим ревортажам о Марсе, Берлине-2 и других “горячих точках”.<br>Александра - член-основатель антивоенной Коалиции Stop the War времен минбаро-земной войны и движения Respect времен дилгарской войны.<br>В свободное время Александра путешествует по колониям Земного Альянса с антивоенными кампаниями. Она также читала лекции по проблемам войны с Террором, положению колоний и психологии инопланетных рас в университетах ЗА.<br>Автор двух книг, названных “Звездная Эра Информации” и “Цена Билета в Рай”, в настоящее время пишет третью под названием “Wag the Dog в космическом масштабе”, однако тема книги пока не раскрывается."');

select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('name'), null, jsonb '"Разз Акри"');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('person_race'), null, jsonb '"drazzi"');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('person_state'), null, jsonb '"drazzi"');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('person_job_position'), null, jsonb '"Посол, военный атташе Лиги"');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('person_biography'), null, jsonb '"Про свое детство Разз не очень любит рассказывать. Известно лишь, что в самом начале своей жизни он кочевал по всевозможным дальним родственникам, пока его, наконец, не пристроили в училище, которое через много лет сделало из него добропорядочного члена общества Драззи.<br>Окончив обучение Разз поступил на военную службу, которой и отдал почти все свои молодые годы. Продвижение по карьерной лестнице шло довольно стремительно к 30 циклам он уже возглавлял небольшой флот, основной задачей которого являлась осуществлять тренировочные вылеты в систему Дилгар и отрабатывать маневры. Во время одной из таких операций их поджидала засада. До сих пор неизвестно, как Дилгары смогли обмануть сканеры флота Драззи, но в итоге последние понесли ужасные потери. Почти все пилоты погибли, а флагман, на борту которого находился Разз был вынужден спасаться бегством. Это было унизительное поражение, оставившее тяжелый шрам на сердце Раза. После такого его репутация могла бы быть серьезно испорчена, однако он смог убедить командование, что сможет дать отпор врагу и больше не попадет врасплох. В итоге, Раззу доверили новые войска для совершения контр-удара. После успешной контр-атаки на Дилгар он прослужил во флоте еще некоторое время, запал молодых лет окончательно прошел и бороздить космос в поисках достойного соперника Раззу наскучило. Он заинтересовался политической деятельностью, вышел в отставку. Так он стал Флаг-лидером планеты Заргос, а после был отправлен на Вавилон в качестве посла."');

select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('name'), null, jsonb '"Диргал Дарал Кэн"');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('person_race'), null, jsonb '"brakiri"');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('person_state'), null, jsonb '"brakiri"');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('person_job_position'), null, jsonb '"Посол, торговый атташе Лиги"');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('person_biography'), null, jsonb '"В биографии нет ничего выдающегося"');

select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('name'), null, jsonb '"Лазаренн"');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('person_race'), null, jsonb '"markab"');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('person_state'), null, jsonb '"markabi"');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('system_medic'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('system_med_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('person_job_position'), null, jsonb '"Посол Лиги в Ассамблее"');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('person_biography'), null, jsonb '"Лазаренн, маркаб. Известный во многих мирах учёный иммунолог-вирусолог-инфекционист, специалист по болезням не только маркабов, но и других рас. Медицинский консультант Вооружённых сил Земли на Вавилоне-5, по контракту. Занят разработками собственной версии вакцины против драфы, страшной болезни его народа."');

select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('name'), null, jsonb '"Нерун"');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('person_race'), null, jsonb '"minbar"');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('person_state'), null, jsonb '"minbari"');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('person_job_position'), null, jsonb '"Посол Федерации Минбари в Ассамблее"');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('person_biography'), null, jsonb '"В биографии нет ничего выдающегося"');

select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('name'), null, jsonb '"Эр''Шаат"');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('person_race'), null, jsonb '"minbar"');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('person_state'), null, jsonb '"minbari"');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('person_job_position'), null, jsonb '"Культурный Атташе посольства Федерации Минбари"');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('person_biography'), null, jsonb '"Мой путь был проще и не так насыщен деяниями и событиями, как путь моей сестры по храму Таринн. Всегда рядом, всегда вместе и всегда в тени. Но там где один оступился, долг другого поддержать его, и встать на его место, продолжить его миссию учиться и учить. Моя жизнь принадлежит Минбару. Мое сердце принадлежит Минбару. Моя душа принадлежит Вселенной."');

select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('name'), null, jsonb '"Эриенна"');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('person_race'), null, jsonb '"ikkarian"');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('person_state'), null, jsonb '"ikarra"');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('person_job_position'), null, jsonb '"Посол Идилии Икарры"');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('person_biography'), null, jsonb '"Практически ничего не известно"');

select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('name'), null, jsonb '"Рад-Ж''Ар"');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('person_race'), null, jsonb '"dilgar"');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('person_state'), null, jsonb '"dilgar"');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('person_job_position'), null, jsonb '"Представитель народа Дилгар"');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('system_balance'), null, jsonb '6000000');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('system_person_salary'), null, jsonb '800000');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('person_biography'), null, jsonb '"В биографии нет ничего выдающегося"');

select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('name'), null, jsonb '"Мать Будхи"');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('person_race'), null, jsonb '"antares"');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('person_state'), null, jsonb '"antares"');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('person_job_position'), null, jsonb '"Посол Синдиката Антареса. Представитель дома Бхара."');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('person_biography'), null, jsonb '"Будхи из дома Бхара родилась, когда вся система Антареса была одной из многочисленных колоний империи Центавр. Маленькая Будхи сразу усвоила, что центавриане полезные, потому что у них много полезных вещей, которые можно выменять на бесполезных членов дома Бхара. Её биологические родители входили в третий круг дома Бхара и были «добровольцами» от дома Бхара в биологических исследованиях центавриан. Маленькая Будхи показала себя умной и способной самочкой, потому её забрали от её биологических родителей и она получила хорошее образование. Уже в 50 лет она принесла первое потомство и заключила свою первую сделку с центаврианами. Первое десятилетие Будхи плотно сотрудничала с центаврианами, всячески помогая им в их биологических и медицинских исследованиях. Отвечая за логистику по снабжению наземных лабораторий, она налаживала личные контакты с сотрудниками и нелегально покупала у них то, что для центавриан считалось малозначимым или уже устаревшим в обмен на поделки, производимые Антаресами, а у центавриан, при должной подаче, сходившие за предметы роскоши. К концу первого десятилетия Будхи ввели в первый круг дома Бхара и, с вступлением в этот круг, она поняла, что однажды центавриане уйдут с Антареса. И этот день уже не за горами. Она утроила свои усилия по скупке всего полезного, до чего могла дотянуться, в основном это были различные программы обучения. Это становилось все сложнее и сложнее – Центавр сокращал финансирование лабораторий, сворачивал исследовательские программы, отзывал специалистов и прочих сотрудников. В целом Будхи не унывала и была полна надежд на светлое будущее антаресов. По слухам, которые подтверждались в частных разговорах с рядовыми центаврианами, с других планет системы Антарес центавриане уходили, оставляя всю инфраструктуру местным жителям. А с теми заначками, которые успела сделать Будхи, дом Бхара поднялся бы до невиданных высот.<br>Тот день, когда последний центаврианин покинул планету Антарес, а дом Бхара готовился праздновать вступление в новую эру, тот день стал судным днем – на планете разверзся ад. Центавриане, уходя, заминировали все свои поселения, а по промышленным районам дали залпы с орбитальных орудий. Пожары бушевали несколько недель. Много Антаресов погибло в огне, еще больше - от последовавших стихийных бедствий. Экосистема планеты была сильно подорвана. Новая эра для дома Бхара началась с борьбы за выживание.<br>Маленькая Будхи была одной из немногих членов первого круга, кто выжил. И, хоть, биологически она не могла претендовать на роль матери дома, в это тяжкое время семья решила довериться её знаниям.<br>По счастливому стечению обстоятельств дом Бхара пострадал меньше остальных домов Антареса-2 – в живых осталось чуть больше половины семейства. От многих других домов остались всего несколько особей, обреченных на смерть без своей общины. Первым делом, Будхи предложила всем остальным уцелевшим Антаресам из других домов объединиться. (Не виданный шаг для Антаресов!) А, что бы хоть как-то сгладить действие феррамонов друг на друга, в обязательном порядке всем носить носовые фильтры. Для общения оставался исключительно центаврианский язык.<br>Далее Будхи подвергла всех оставшихся в живых Антересов церебральному сортингу и, согласно их способностям, распределила программы обучения. В последствии из такого деления появились новые дома Антаресов, специализирующихся на фармакологии, генетике, хирургии, микро-хирургии, биологи и т.д.<br>Долгие годы ушли на восстановление экосистемы планеты Антарес-2. Промышленность и лаборатории восстанавливали из руин. Перезапускали лабораторные исследования, свернутые центаврианами. Налаживали контакты с другими домами системы Антарес.<br>При первом контакте с Антаресами из дома Реоваль мать Будхи узнала, что на других планетах системы Антарес центавриане, уходя, оставили всю инфраструктуру не тронутой. А еще многим из матерей других домов остались «в подарок» старые крейсера центавриан. Это стало тяжелым ударом. И даже не то, что многие из её родных и не родных погибли, а непонимание, зачем центавриане так поступили?! Возможно, они хотели скрыть что-то очень важное, что не могли забрать с собой? Для матери Будхи это стало вопросом жизни и смерти, выяснить, что пытались похоронить центавриане на её родной планете.<br>Узнав о столь плачевном положении своих сородичей, дом Реоваль немедленно предложил всем оставшимся в живых Антаресам поступить к ним в добровольное рабство. И это было бы спасением, но мать Будхи сделала им другое предложение. Дом Реоваль с Антарес-1 и дом Фелли с Антарес-4 и Антарес-5 отчаянно нуждались в рабах для своих ферм и заводов. А дом Бхара, первое, что стал восстанавливать из центаврианских руин – это клонирование для восполнения катастрофической нехватки рабочей силы. И, по сравнению с другими домами Антаресов, уже шагнул далеко вперед. Соглашения были составлены и подписаны. Так зародился синдикат Антареса.<br>Когда, спустя 100 лет, в системе Антареса стали появляться первые инопланетяне не центавры, синим котикам было чем их встретить."');

select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('name'), null, jsonb '"Мать Рийна"');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('person_race'), null, jsonb '"antares"');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('person_state'), null, jsonb '"antares"');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('person_job_position'), null, jsonb '"Представитель дома Риоваль"');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('person_biography'), null, jsonb '"В биографии нет ничего выдающегося"');

select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('name'), null, jsonb '"Драал Ситхар"');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('person_race'), null, jsonb '"drazzi"');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('person_state'), null, jsonb '"drakh"');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('person_job_position'), null, jsonb '"Посол Технократии Дракхов"');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('person_biography'), null, jsonb '"Родилась на космической военной базе Четвертой ударной гвардейской дивизии в семье начальника штаба дивизии.<br>Достаточно быстро отца повысили до командира Двадцать седьмой штурмовой дивизии и он перевез свою семью на планетарную базу \"Полигон\".<br>До учебы в академии жила в малом военном городке в атмосфере аскетизма и дисциплины.<br>Учеба в академии. Закончила с отличием, но часто подвергалась взысканиям за отсутствие дисциплины.<br>После академии переехала в столицу на службу в штаб наземных операций. И тут пошла в разнос. Мужики,бухло, дебоши, шоппинг и т.д. Продолжалось ровно до того как до конца не выбесила начальника, которого подставляла своими действиями. Его нелюбовь ко мне была настолько сильна, что он отправил меня в самую жопу боевых действий. По его задумке я не должна была пережить и пары операций. Не тут то было. В силу того что дивизия, в которой я служила, была крайне часто используемая и боевой состав дивизии менялся на 90% раз в год, у меня случился крайне быстрый карьерный рост. Дослужившись до командира дивизии стала самым молодым генералом-женщиной в истории драззи.<br>Но встретила свою любовь, молодого дипломата, отказалась от военной карьеры и создала ячейку общества. Это были бурные романтические отношения, мы могли часами смотреть на закат и прочие романтические слюни.<br>Шли годы, романтика схлынула, муж стал послом и много времени проводил вдали от дома. В итоге его назначили послом на Вавилон-5. В очередной приезд домой я спалила его на супружеской измене.<br>Произошел не долгий, но очень бурный конфликт, в результате которого у мужа обнаружилась черепно-мозговая травма, несовместимая с жизнью.<br>Но так как семейная драма произошла во время выборов власти, а у меня были собственные связи и принадлежность к семье потомственных военных (высшие чины в 12 поколениях), эту бытовуху признали выборным процессом и я была отправлена послом на Вавилон-5.<br>На Вавилоне расплевалась со своим напарником вторым послом народа Драззи и перешла в другое подданство."');

select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('name'), null, jsonb '"Ирида Шафтброк"');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('person_state'), null, jsonb '"anlashok"');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('person_job_position'), null, jsonb '"Лидер ордена Ан-Лашок"');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('person_biography'), null, jsonb '"Доктор психологических наук. Бывший директор одного из колледжей программы \"Марсианский прогресс\". Бывший ведущий специалист по работе с персоналом Корпорации IPX \"Грядущее\". Бывший профессор института Социологии и Психиатрии кафедры \"Групповое поведение\". Ныне одна из лидеров секты Анлашок."');

select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('name'), null, jsonb '"Игрейн"');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('person_race'), null, jsonb '"minbar"');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('person_state'), null, jsonb '"minbari"');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('person_job_position'), null, jsonb '"Член ордена Ан-Лашок"');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('person_biography'), null, jsonb '"Член касты рабочих, Игрейн родилась на Минбаре, родители из Клана Мастеров. Воспитывалась в Первом Храме Ав Акадо. Наставники поощряли лучшие качества её разума, и скоро Игрейн постигла все речения и инструкции Валена.<br>После неудачной миссии на станции Вавилон-5, куда она была назначена Послом Ассамблеи, Игрейн влилась в Анлашок."');

select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('name'), null, jsonb '"Мэри Кейн"');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('system_political_influence'), null, to_jsonb(0));
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('person_job_position'), null, jsonb '"Президент Земного Альянса"');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('system_person_salary'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person25'), data.get_attribute_id('person_biography'), null, jsonb '"Родилась в 2197 г. Отец был кадровым военным, погиб при исполнении служебных обязанностей, когда Мари было 11 лет, а её братьям – 2 и 3 года. С детства привыкла нести ответственность за других.<br>Имеет два высших образования, обучалась в военной академии звездного флота земли и Йельском университете.<br>Состояла в браке с Игорем Семеновым, разведена.<br>Служила пилотом истребителя, участвовала в дилгарской войне.<br>В 2234 г. закончила военную службу в звании лейтенант-командора и начала успешную политическую карьеру, став сначала помощником Сенатора, а в 2238 г. Сенатором Земного Альянса от Северо-Американского Консорциума.<br>Последние 15 лет была бессменным председателем сенатского Комитета Обороны.<br>Придерживается консервативных позиций, осторожно и взвешенно подходит к вопросам межгалактических взаимодействий, автор большинства законопроектов, регламентирующих деятельность Пси-корпуса.<br>в 2257 Назначена Президентом Сантьяго послом Земного Альянса в Галактическую Ассамблею.<br>Избрана председателем Гуманитарного комитета Генеральной Ассамблеи<br>в 2258 году Избрана президентом Земного Альянса, с минимальным отрывом победив действующего президента Луиса Сантьяго.<br>Большинство голосов выборщиков набрала за счет трех богатейших консорциумов: Северо-Американского, Русского и Европейского. В колониях практически не получила голосов."');

select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('name'), null, jsonb '"Джон Морган"');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('system_person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('system_political_influence'), null, to_jsonb(5));
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('person_job_position'), null, jsonb '"Сенатор ЗА от Австрало-Полинезийского консорциума"');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person26'), data.get_attribute_id('person_biography'), null, jsonb '"Сенатор расскажите немного о себе<br>Я родился в семье Морган в новом Иерусалиме в 2218 году на территории Еврейского консорциума. В силу того, что в свое время произошло слияние Морган Индастриал и IPX в результате чего моей семье достался крупный пакет акций IPX. Моя карьера в политике началась сразу после получения мною степени доктора экономических наук Оксфордовского университета. Совет директоров корпорации в тот момент решил, что им нужен сенатор, который будет лоббировать их интересы. По-первости я, как молодой политик, слабо понимал, что происходит, но честно исполнял свои обязанности члена партии корпоратов. До войны я в общем-то этим и занимался. Однако мое общение с финансами на ты, заметила Мери Кейн. Сказать честно это, пожалуй, самое лучшая встреча моей жизни. Мери научила меня всему, что я знаю о политике. Это человек удивительной энергии. Жизнь бьет в ней фонтаном, все к чему она прикасается, становится лучше. Итак я вошёл в лучшую политическую команду. Параллельно с политической карьерой мне приходилось много работать в банковском секторе и на рынке ценных бумаг. Так я имею отношение к правлению большинства крупных банков и имею пакеты акций большинства крупных корпораций. Безусловно жемчужиной моей коллекции акций является пакет ценных бумаг IPX.<br>Сенатор у вас есть слава человека, недолюбливающего военных и даже более того часть ваших предыдущих высказываний некоторые мои коллеги склонны интерпретировать, ваше отношение к военным как к тупой серой массе. Так ли это?<br>Вы знаете, это довольно сложный вопрос и на него у меня нет однозначного ответа. Если вы не против, то я пожалуй расскажу историю своей службы в армии, а ваши читатели сами сделают из этого свои выводы<br>Началось все вот так во время минбарской войны был мобилизован. Будучи сенатором я получил должность Капитана в штабе полковника Франклина. Там я познакомился с молодым начинающим аналитиком Трампом и молодым лейтенантом командиром поста наблюдения на фрегате «Филактет» Емельяненко. Шла напряжённая подготовка к обороне Проксимы. В какой то момент Трамп предоставил альтернативный вариант защиты Проксимы. Франклин, будучи идиотом, отмахнулся от Трампа со словами «мальчик что ты знаешь про войну». Тогда Трамп отправил свой план Адмиралу Вонгу и попросил меня представить план сенату. Вонг, будучи адмиралом флота, не был готов мириться с тем, что в плане Трампа флоту отводилась второстепенная и вспомогательная роль. Встав на сторону своего тупого подчиненного и проявив тем самым недальновидность, он проигнорировал рекомендации Трампа. Франклин же, будучи дурацким солдафоном, приказал арестовать Трампа и перевел меня на корабль РЭБ «Инженер Попов» старпомом.<br>Как словом так и делом началась битва. Как нам известно из достоверных источников при обороне Проксимы, что-то пошло не так с первой же секунды. «Гениальный» не побоюсь этого слова план ОКНШ летел ко всем чертям со скоростью выстрела ионного излучателя. Не прошло и получаса как остатки гордости нашего ударного флота, коварные Минбари забывшие, что маневр - это наше превосходство, а не их, и воюющие с Франклином нечестно, гоняли его ссаными тряпками по всей системе. В этот прекрасный момент дошла очередь и до моего гибрида консервной банки с тазом. Первый же залп минбарского истребителя – «Ниала» - отправил изучать глубокий космос борт и половину экипажа, чуда земной инженерии с горделивым названием «Инженер Попов». В недобровольные исследователи космоса без скафандра, минбарцами, был записан и командир моего корабля. Мне ничего не оставалось, кроме как стать главным. Не сказать, что это был предел моих мечт о карьерном росте, ну то есть рост-то налицо, но кресло главы сенатского комитета мне грело душу сильно больше. Однако делать нечего.<br>Как говорили мои предки, картина маслом. Начальник соединения Франклин - горделивый осел, да и до него далеко. С начальником обороны Ли Вонгом связи нет, и даже если ее восстановить, то толку от этого мало, он просто тупой, в медицинском смысле этого слова. На Проксиму валится минбарский десант, как говно из рога изобилия. Узловые точки обороны отсутствуют, зато присутствуют окопы предполагаемой линии обороны, жаль только то, что противник кидает десант в обход данной линии. Франклин ведь забыл минбарцам сообщить куда по уставу десант надо выкидывать, а они земной устав не читали. Дикари-с. Присутствие флота на поле боя обозначается группой из шести разрушителей класса Омега, четвертью звена истребителей и гордым тазиком вашего покорного слуги, да и вся эта трихомудь не разваливается только потому, что ее чайки обосрали. минбарцы перестраивают, вне зоны нашей досягаемости, свою малую атакующую группу: разрушитель, 3 авианосные тяжёлые платформы, и 12 ударных крейсеров, прикрытых 24 звеньями истребителей. Компьютер выдает расчетное время боя 1,45 минуты плюс 3 минуты на перестроение и 10 минут на вход в зону контакта при наших активных маневрах. Ну надо сказать, к чести этого идиота Франклина, он хоть приказ о эвакуации с планеты отдал.<br>В этот торжественный момент, который полагалось закончить пафосной, геройской, но абсолютно бесполезной смертью экипажей 6 разрушителей, вписав имена кораблей «Алкамена», «Адонис», «Антей», «Апполон», «Агрей» и «Аластор» в героическую историю ЗА. Так же как в свое время в героическую историю России были вписаны «Варяг» и «Кореец».<br>Я взял командование на себя. Правда стоит уточнить, что командовал я от имени Ли Вонга, обосновывая это тем, что на моей лохани есть оборудование способное связаться с ним, но в связи с тем, что тазик слегонца разваливается, транслировать я его могу только своим голосом. Первым и единственным моим приказом стал приказ об отступлении. Я до сих пор гожусь своим решением - мне удалось спасти тысячи жизней, однако каково же было мое удивление, когда Франклин и Вонг не только не сказали мне спасибо, но один из них отдал меня под трибунал. Франклин, будучи председателем данного трибунала отправил меня в инженерный дисбат. Там я и докручивал гайки на станциях ПКО в своем оранжевом камбезике до конца своей военной карьеры.<br>Сторонникам распространенного мнения, о том, что дисбатом он меня спас от расстрела, хочу напомнить, что на тот момент я был сенатором, и у Франклина просто не было полномочий, иначе этот ура-военный с удовольствием пустил бы мне пулю в лоб.<br>При этом все-таки я не стал бы утверждать, что все военные - идиоты. Во-первых, как мы знаем у нас множество действительно талантливых офицеров, заслуженно называемых героями ЗА так, например, командующий Хейг. Во-вторых, есть множество генералов, которые несмотря на чудовищные потери и роковые ошибки приобрели необходимый опыт и отстояли Альянс в тяжёлой борьбе, например, адмирал Вонг. Ну и в-третьих флот и армия — это отражение общества - там большое количество талантливых и профессиональных людей и у меня достаточное количество друзей служащих в вооруженных силах.<br>Есть еще такой интересный факт, что, не смотря на все потуги Франклина обвинить меня в неудачах обороны Проксимы, я получал много писем в поддержку от офицеров флота разного уровня. Я до сих пор являюсь, членом флотского братства, к которому относятся на равных и с уважением другие члены, несмотря на то что уволен я был в должности младшего матроса.<br><br>Сенатор вы зарекомендовали себя как принципиальный и честный политик. Зачастую это не очень удобная для политика позиция. Как вам удаётся всегда держаться в рамках договоренностей?<br>На самом деле действительно достаточно сложно придерживаться достигнутых договоренностей и не нарушать данных слов. Особенно если обстоятельства внезапно изменились или вскрылись ранее не известные факты. Однако при этом каждый политик должен четко осознавать, что репутация — это его единственный капитал растратить который очень просто, а вот приобретать нужно годами. При этом репутация местами может помочь действительно сильно. Я не могу припомнить, когда я в последний раз нарушал данное мною слово и именно поэтому мои партнеры мне доверяют.<br><br>Господин Морган, раз уж мы говорим о принципиальности, может вы объясните почему вы так стараетесь, чтобы ваш комитет приобрел контрольный пакет акций всех крупных корпораций? Вы даже подготовили законопроект, по которому все корпорации с капитализацией больше 10 млрд кредитов должны добровольно передать 21% акций в распоряжение вашего комитета (КРЭФ, прим. редактора). Зачем вам это?<br><br>Ответ на этот вопрос и сложный, и простой одновременно. Я бы хотел вам рассказать с чего все началось. Как вы знаете в нашей истории случаются трагические моменты. Мой рассказ начнется именно с такого момента известного всем как восстание на ИО и его дальнейшее кровавое подавление. Дело в том, что по результату данного восстания было назначено расследование. Расследование было поручено сенатской комиссии под руководством сенатора Луиса Сантъяго. В комиссию вошёл и ваш покорный слуга, как представитель финансового комитета сената. Все собранные факты вели к тому, что корпорация Марс Индастрис неоднократно нарушала права человека и трудовое законодательство. Семенов настаивал на том факте, что необходимо дать возможность оправдаться. В качестве возможности оправдаться Семенов предложил провести ПСИ сканирование господину и госпоже Мюллер. Комиссия проголосовала не равномерно, но большинство приняло предложение Семенова. На процедуру был назначен опытный телепат, ныне герой ЗА посмертно, Дельгусто. К сожалению, со сканированием, что-то пошло не так и это привело к серьёзной семейной драме Мюллеров. Слава богу, хоть почти все живы остались. Господин Мюллер-младший занял должность главы корпорации. И для предотвращения подобных нарушений корпорации передал 21% акций в управление сенатскому финансовому комитету.<br>Надо сказать, что комитет не злоупотреблял своими возможностями, но имея блокирующий пакет, отменил более 50 решений корпорации, направленных на извлечение прибыли, за счет ухудшения уровня жизни сотрудников. Отсюда можно сделать простой вывод если корпорации передадут свои 21% акций сенату или еще лучше в администрацию президента -все выиграют. Граждане получат контролируемые государством условия жизни, государство снимет радикальную напряжённость у населения, а члены советов директоров корпораций уверенность в том, что с их семьями не произойдет того же несчастья, что и с Мюлерами.<br><br>Сенатор вы упомянули, что знакомы с господином Емельяненко, так же как известно, что ваш друг и коллега господин Трамп, как известно, вел избирательную компанию того же Емельяненко. Изначально никто не верил в успех этой компании. Скажите поддерживали ли вы эту компанию, верили ли вы в ее успех?<br>С Емельяненко я познакомился еще в студенческие годы и у нас сразу завязалась дружба. Он так же, как и я воевал при обороне Проксимы. И как я уже говорил, я спас его, как и тысячи других членов экипажей кораблей. И думаю, он помнит об этом. Мы с ним поддерживаем довольно плотные дружеские отношения, но к моему сожалению, с тех пор как Мери стала президентом, работы только прибавилось. Как следствие, мне банально не хватает времени на общение с друзьями. Я как могу, стараюсь поддерживать нашу дружбу, но, к моему сожалению, не всегда это получается. А что касается избирательной компании, то я всегда верил в гений Арчибальда, да и Володя оказался весьма активным кандидатом. Такой союз не мог проиграть. Отвечая на ваш вопрос, непосредственно в компании я участия, не принимал, но как я и подозревал, в этом и не было надобности, хотя если бы они меня попросили, то я бы точно помог.<br>За последний год на вас было совершено несколько покушений, кому вы так могли насолить и не страшно ли вам?<br>Ну по порядку, это, пожалуй, самые легкие вопросы вашего интервью.<br>Первое - кому это выгодно - конечно корпорациям, я пытаюсь увеличить их издержки на работников и привести их к социальной ответственности, а это для них многомиллиардные потери. Эти люди не считают своих работников за граждан, они относятся к ним как к рабсиле и чем она дешевле, тем у них больше денег.<br>Второе - не страшно только дуракам, но мириться с таким положением дел больше нельзя. Люди в колониях ведут нищенский образ существования и практически не имеют прав, многие из них идут на преступления, то там, то тут возникают восстания, бунты и забастовки, жители Земли и крупнейших колоний голосуют за закрытие границ, Альянс трещит по швам. А этим все нипочем -они только набивают свою мошну, ухудшают положение людей, приглашают на работу более дешёвую инопланетную рабсилу, вводят поправки в конституцию о том, чтобы приравнять алиенов в правах к людям через своих сенаторов наподобие Семенова.<br>Знаете, на ютубе есть канал топ пять покушений на Моргана. Но, пожалуй, я лучше умру, чем позволю развалить ЗА и продать человечество в руки нелюдей."');

select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('name'), null, jsonb '"Лианна Кеммер"');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_med_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_research_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_crew_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_security'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_political_influence'), null, to_jsonb(1));
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('person_job_position'), null, jsonb '"Начальник охраны президента"');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_balance'), null, jsonb '40000');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_person_salary'), null, jsonb '20000');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('person_biography'), null, jsonb '"Начальник охраны президента. Майор НС ЗА. Лианна была телохранителем Кейн еще в бытность ее сенатором в течении 8 лет. Свое воинское звание она заработала в 10 лет назад наземных операциях против минбарцев, как боевой офицер."');

select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('name'), null, jsonb '"Арчибальд Трамп"');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('system_political_influence'), null, to_jsonb(5));
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('person_job_position'), null, jsonb '"Глава администрации президента ЗА"');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('system_balance'), null, jsonb '1000000');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('system_person_salary'), null, jsonb '80000');
select data.set_attribute_value(data.get_object_id('person28'), data.get_attribute_id('person_biography'), null, jsonb '"Арчибальд Трамп родился в 2223 году в Берне (Европейский Консорциум, Земля, Солнечная система) в семье Эбенезера Трампа, старшего юриста корпорации «IPX». Семейство Трампов представляло и представляет собой обширный клан, члены которого столетиями становятся юристами, социологами и политологами для государственных служб и корпораций Европейского Консорциума.<br>Основатель фамилии, Ричард Трамп, по преданию был видным американским военным Пятидневной Конфедерации Юга, осевшим после завершения мировой войны и образования Земного Альянса в Европе.<br><br>Арчибальд получил хорошее образование, закончив частную школу «Колледж Эльпин» в Вилье-сюр-Оллон и получив степень магистра социологии в Университете Земли в Цюрихе. Во время университетской учебы вступил в «Лигу молодых христиан-демократов», был членом шахматного и драматического обществ, выступал на любительской сцене.<br>По завершении учебы некоторое время не обременяет себя карьерой, объясняя это родителям написанием книги.<br><br>В 2246, с началом Минбарской войны, поступает добровольцем в вооруженные силы Земли, благодаря связям семьи оказывается главой отдела общей аналитики главного штаба обороны системы Проксима.<br>Во время его службы в этом штабе происходит инцидент, известный как «Дело о рапорте Трампа». Проанализировав известные на тот момент эпизоды атак минбарцами планет Земного Альянса, отдел, возглавляемый Трампом, пришел к ряду выводов. Ключевым было положение о бесперспективности попыток обороны в космосе.<br>Трамп подал соответствующий рапорт командованию, где предлагал даже разоружить корабли флота и усилить теми из их орудий, что подходят для этой цели, наземную оборону.<br>Минбарцы до сей поры не применяли оружие массового поражения, что позволяло надеяться пережить бомбардировку объектов военного назначения и инфраструктуры и дать бой в случае высадки десанта.<br><br>Рапорт вызвал неудовольствие командования, в особенности командующего обороной Проксимы Капитана Вонга и руководителя обороны сектора Проксима-3, полковника Ричарда Франклина, и был бы оставлен без внимания, если бы не проступок Трампа – он разослал копии рапорта в канцелярии нескольких сенаторов Земного Альянса, включая Кейн, Семёнова и Хитоши. Сенаторы инициировали запрос, в то время как Трамп, будучи осужден за нарушение воинской дисциплины, отправился с Проксимы на Землю для суда и заключения. Как потом оказалось, именно это его и спасло. Пока Трамп путешествовал за счет Альянса на тюремном транспорте, минбарцы разгромили земные силы на Проксиме в полном соответствии с положениями его рапорта. Сенатская комиссия потребовала от военных прямого ответа, и это сыграло роль в судьбе Трампа. Автора рапорта не решились посадить, просто уволив из рядов вооруженных сил. История, причем в самых секретных подробностях, стала известной прессе, в сливе подозревали самого Трампа, но не нашли доказательств.<br><br>Вскоре после этого в жизни Трампа начинается новый этап.<br>В течение десяти лет он возглавляет предвыборные и аналитические службы сперва Владимира Емельяненко, потом Мэри Кейн.<br>Емельяненко помощь Трампа приносит победу на выборах в Сенат, при этом в прессе Земли и Луны устраивается настоящая битва компроматов соперников Емельяненко, считающегося кандидатом-аутсайдером.<br>Впоследствие некоторые редакторы участвовавших в битве изданий выясняют, что получали материалы на обоих кандидатов из одного источника, но попытки связать источник с Емельяненко или Трампом проваливаются.<br>По завершении выборов Емельяненко теряет интерес в работе со специалистом уровня Трампа, но знакомит его при этом с Мэри Кейн. Трамп возглавляет основной «штаб» Кейн на внеочередных сенатских выборах по ряду округов после марсианского кризиса 2250 года.<br><br>Кандидат Кейн вновь становится сенатором Кейном, но сотрудничество не заканчивается.<br>После выборов Трамп формирует полноценную аналитическую структуру, заточенную под нужды Кейн, попутно продолжая свое юношеское увлечение любительской сценой и став автором двух книг – «Правототалитарный дискурс» и «Закат классической колониальной системы ЗА».<br>Последняя книга вызывает небольшой скандал, поскольку, по мнению органов власти ЗА, подрывает основы конституции и призывает к свержению политического строя Альянса.<br>Впрочем, Трамп выигрывает процесс с помощью нескольких родственников-адвокатов.<br><br>На выборах президента ЗА штаб Кейн (а это значит – Морган и Трамп) предлагает кандидату опереться на изоляционистские круги Земли и колоний, что приводит к победе.<br>После победы Трамп на время уходит из администрации Кейн и, получив поддержку президента, баллотируется на выборах в Сенат от Южно-Африканского консорциума.<br>Трамп проигрывает выборы, но очень достойному оппоненту, самому Луису Сантьяго.<br>Злые языки земной прессы утверждают, что поражение Трампа стало результатом договоренности президента Кейн и её бывшего соперника по выборам Сантьяго. И что после выборов Трамп некоторое время подыскивал себе другую работу, подальше от Кейн, и вел переговоры с несколькими её оппонентами, но подтверждений этому нет.<br>В любом случае, сейчас Арчибальд Трамп является главой администрации президента Земного Альянса, что для человека в его возрасте можно считать исключительным достижением.<br>Да, теперь ему некогда выступать на любительской сцене, но похоже на то, что своими подмостками этот амбициозный политик считает весь Земной Альянс."');

select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('name'), null, jsonb '"Ежи Пилсудски"');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('system_political_influence'), null, to_jsonb(3));
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('person_job_position'), null, jsonb '"Исполнительный директор корпорации Рокетдайн. Член делегации колонии Проксима-3"');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('person_biography'), null, jsonb '"Ежи Пилсудский, 40 лет. Родился в русском консорциуме в богатой и влиятельной семье.<br><br>Образование: высшее, экономическое.<br><br>Участник войны с Минбаром, награждён медалью «За усердное выполнение воинского долга» III степени.<br>Служил артеллериским офицером на тяжелом крейсере \"Олимпия\".<br>Ушёл в отставку в чине энсина ЗФ ВС ЗА после битвы за систему Проксимы по медицинским показаниям.<br>После реабилитации, до окончания войны вернулся на действительную службу, ушёл в отставку в звании второго лейтенанта ЗФ ВС ЗА по медицинским показаниям.<br>Прошел нелегкий и долгий путь служащего корпорации, и теперь - Исполнительный директор корпорации «Рокетдайн».<br>Член Консервативной партии.<br>Делегат 4-го Конгресса колоний от колонии Проксима 3."');

select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('name'), null, jsonb '"Ли Вонг"');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('system_political_influence'), null, to_jsonb(1));
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('system_ea_military'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('person_job_position'), null, jsonb '"Военный губернатор Проксимы"');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('person_biography'), null, jsonb '"Ли Вонг родился на Марсе. Его родители - известные ученые, но Ли Вонг решил не идти по их стопам, выбрав карьеру военного.<br>В результате взрыва бомбы возле фонда \"Марсианский прогресс\" недавно погибла семья вице-адмирала Вонга, посетившая фонд в рамках организации совместной для Проксимы и Марса гуманитарной программы, по развитию образовательных учреждений.<br>За жизнь Су Вонга, сына вице-адмирала, сейчас борются сотрудники медицинской службы главного медицинского центра Capital One.<br><br>Служба на флоте ЗА:<br>До войны с минбарцами.<br>Служил на \"Агамемноне\" под командованием Генриха Мюллера<br>Во время войны с мимбарцми.<br>Ли Вонг был капитаном корабля класса Омега - \"Арес\". Получил заданние выбить минбарцев из системы, чтобы десант смог высадиться на станцию \"Гагарин\".<br>Вонг понимал, что в прямом боевом столкновении шансов у него нет и решил использовать единственную возможность - повел свой корабль на таран шарлина. Шарлин был уничтожен. Выжило из экипажа всего 6 человек из более 1200 человек, десант тем не менее высадился на станцию.<br>Возглавлял оборону станции \"Гагарин\"<br>После сражения Вонг долго реабилитировался - был обожжен.<br>За эту битву Вонг был удостоен звания контр-адмирала.<br>После войны с мимбацами.<br>Назначен военным губернатором Проксимы"');

select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('name'), null, jsonb '"Милош Йович"');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_researcher'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_medic'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_med_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_research_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_political_influence'), null, to_jsonb(4));
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('person_job_position'), null, jsonb '"Генеральный директор корпорации \"Umbrella\""');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('person_biography'), null, jsonb '"Милош Йович 67 лет. Доктор медицинских наук, профессор. Специалист в области вирусологии, генетики (генетические заболевания) и инфекционных болезней. Генеральный директор корпорации \"Umbrella\". Член управляющего совета колонии Берлин II. Член делегации от Союза Проксимы.<br>Родился на колонии берлин-2 в семье ученых. После окончания медицинского университета вступил младшим научным сотрудником в корпорацию \"Umbrella\". <br>К моменту Минбарской войны защитил докторскую диссертацию по теме «Влияние вируса Карбола на биохимию плода, связь с развитием генетических заболеваний позднего периода беременность» и работал в должности заведующего лабораторией.  После начала оккупации собрал вокруг себя группу выживших, где применяя свои знания в медицине, смог заработать высокий авторитет и занять лидирующую позицию. Именно на фоне этих проблем Милош смог реализовать весь свой организаторский потенциал, обеспечив выживание доверившихся ему людей. В организованных подпольных фермах выращивались злаки и овощи, а знания в медицине помогли оптимизировать скудный минбарский рацион, что дало многим людям избежать голодной смерти.<br>Когда блокада была временно прорвана, Милош, к удивлению своих соратников, отказался эвакуироваться, и хоть его уговаривали почти все, остался с теми, кто не мог спастись. После эвакуации он привлек на свою сторону еще несколько группировок, расширяя зону подконтрольную ему, чем в глазах выживших приобрел еще больший авторитет.<br><br>Через несколько лет после окончания войны вошел в правление компании, а в последующем стал генеральным директором.  С его приходом на пост главы Амбрела начала вести себя несколько более жестко. Отметая все контракты, которые не имели научного интереса, и несмотря на кажется проигрышную политику – данный строгий отбор проектов привел к весьма сильному росту экономической и интелектуальной значимости корпорации.<br>Под руководством Йовича \"Umbrella\" начал так же проводить ежегодные конференции, сначала по медицинским специальностям, а в последующем и по более широкому профилю биологии, выделяя гранты и производственные мощности молодым ученым. Правда, почти все они оказывались в последующем сотрудниками корпорации, двигающими свои проекты.<br>Сам Милош через какое то время после вступления в должность правления почти перестал появляться на публике и делать заявления. Созданный им пресс центр почти всегда ссылается на сложный график и высокую занятость в проектах, но многие связали его уход от публичной жизни и выступлений со смертью его дочери, прошедшей вместе с ним весь его жизненный путь и выросшей у него на руках.  Так это или нет неизвестно. Пресс-центр отказался от комментариев, но с тех пор Милоша видят только на открытии ежегодной конференции «Молодой \"Umbrella\"» ,где он традиционно напутствует участников и председательствует в рамках секции Вирусология и Инфекционные болезни. Добиться от него интервью пока не получается."');

select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('name'), null, jsonb '"Игорь Семенофф"');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('system_political_influence'), null, to_jsonb(7));
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('person_job_position'), null, jsonb '"Сенатор ЗА от Марсианского консорциума"');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('person_biography'), null, jsonb '"Инициатор первого транс-колониального конгресса \"Псионика - это норма\", Марс, Земной Альянс.<br>2234 Разработчик 34 поправки, к конституции Земного Альянса - \"О гарантии прав граждан с аномальными пси-способностями\". Внесена сенатором Сантьяго. Поправка отклонена.<br>2234 Основывает благотворительный фонд \"Марсианский прогресс\". Главные цели фонда - развитие инновационных образовательных технологий в начальном и среднем образовании и помощь в получении образования детям из необеспеченных семей Марса. Тысячи детей из небогатых семей начали получать образование уровня частных школ.<br>2235 Инициатор Первого транс-колониального конгресса \"Путь к федерации\".<br>Участник демонстраций \"Лиги Перемен\" и \"Свободного Марса\" в Capital One.<br>Выступает как общественный защитник гражданских активистов на процессе \"Марсианский Союз против Лиги Перемен\".<br>Автор доклада \"Преступления против колоний\".<br>2236 Поступает в Бюро Контакта, в Центаврианский департамент на должность секретаря. Активно работает над расширением культурных связей с Республикой.<br>Открыта первая совместная билингвическая библиотека Земного Альянса и Республики Центавр.<br>2238-2244. Проходят Второй и Третий Транс-Колониальный конгресс. На третьем конгрессе принят так называемый \"Меморандум Семенова\" - дорожная карта реформирования Земного Альянса в сторону большего самоуправления колоний.<br>Участвует в первом земном посольстве на Центавр-Прайм.<br>Вместе с послом Центавра Риффарином организует первую встречу Императора Центавра и президента Земли. Встреча была отменена в последний момент.<br>Обвинен службой национальной безопасности Земного Альянса по подозрению в заговоре с целью изменения конституционно строя - главный материал дела \"Меморандум Семенова\". Полностью оправдан.<br>Избран в Сенат Земного Альянса, от Марсианского Союза . Возглавил комитет по Контактам с инорасцами.<br>Представил Сенату справку своего комитета рекомендующую запретить все полеты Военного Флота ЗА, вблизи границ с Минбари. Справка была проигнорирована Сенатом.<br>2247-52 Во время войны ЗА и Минбари предпринимал множественные попытки установить связь с правительством Минбари, через центаврианских посредников, с целью репатриации земных военно-пленных. Успеха не добился.<br>Повторно избран в Сенат Земного Альянса, от Марсианского Союза<br>Возглавил предвыборный Штаб Президента Сантьяго. Один из разработчиков программы Вавилон-5.<br>2255.Организатор первой галактической конференции с участием Империи Ворлон, Федерации Минбари и Земного Альянса. В качестве посла Земного Альянса поставил свою подпись под \"Декларацией о единстве галактических разумных рас\". Организатор второй Галактической Конференции - с участием Варлона, Минбара, Земного Альянса, Республики Центавр и Режима Нарна, закончившейся подписанием Кодекса Ассамблеи.<br>Назначен Президентом Сантьяго послом Земного Альянса в Галактическую Ассамблею. Введен в Координационный Совет.<br>Участвовал в выборах президента Альянса в качестве кандидата в вице президенты президента Сантьяго."');

select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('name'), null, jsonb '"Генрих Мюллер"');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('system_political_influence'), null, to_jsonb(6));
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('system_ea_military'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('person_job_position'), null, jsonb '"Исполнительный директор корпорации Марс Индастриз. Член делегации марсианского союза."');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('system_balance'), null, jsonb '3000000');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('system_person_salary'), null, jsonb '300000');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('person_biography'), null, jsonb '"Исполнительный директор «Марс Индастриз». 58 лет.<br>Место рождения – Северо-Американский консорциум.<br>Во время дилгарской войны снарядил на собственные деньги корвет для флота, с условием, что сам будет проходить на нем службу. Прошел служебную лестницу от юнги до коммандера. Командовал крейсером «Агамемнон», затем ушел в отставку, в семейный бизнес.<br>После трагического инцидента с отцом принял дела корпорации «Марс Индастриз», по сей день остается на посту исполнительного директора корпорации.<br>Финансировал первые избирательные кампании начинающего политика, а ныне сенатора Семенова. Совместно с Семеновым основал и поддерживает деятельность фонда «Марсианский прогресс»,направленного на развитие образования среди жителей Марса. Также принимает участие в деятельности других благотворительных организаций.<br>Среди других направлений деятельности Г.Мюллера следует отметить, что известная медиасеть InterStellar News» находится в собственности «Марс Индастриз»"');

select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('name'), null, jsonb '"Хенгист Кербер"');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_political_influence'), null, to_jsonb(2));
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_ea_military'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_ambassador'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('person_job_position'), null, jsonb '"Член Палаты Представителей Анклава Телепатов Юкаса"');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_psi_scale'), null, jsonb '12');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_balance'), null, jsonb '800000');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_person_salary'), null, jsonb '60000');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('person_biography'), null, jsonb '"Хенгист Кербер, 16.01.2224 г.р., человек, Марс, Земной Альянс.<br>Родители:<br>отец - Беренгар Кербер, инженер-конструктор Центра инфраструктурных проектов \"Марс Индастрис\" (упразднен 11.06.2231 г.);<br>мать - Кэрлиэнн О''Бэннон, старший специалист цеха обработки металлов сверхвысоким давлением завода \"Олимпус Каппа\" (Свидетельство о банкротстве No 43456-1111100789010072231).<br>2234-2237: стипендиат фонда \"Марсианский Прогресс\", прохождение обучения в лицее-интернате \"Монблан\".<br>    2234 - замечание с внесением в личное дело (несоблюдению режима учебного заведения);<br>    2235 - лауреат литературного конкурса \"Олимпийский мусейон\" (диплом 2-ой степени);<br>    с 2234 - член команды лицея по классической борьбе, победитель соревнований \"Марсианской спартакиады\" в легком (2235) и среднем (2236) весе среди юниоров;<br>2238-2243: выявление метасенсорных способностей, проживание и обучение в поселении Типтаун, Земля.<br>2243-2246: отбор для службы в Пси-Надзоре, обучение и стажировка (куратор - Алиша Росс).<br>2246-2257: несение службы в Пси-Надзоре:<br>    2251 - присвоение звания старшего оперативника (представление к повышению - Альфред Бестер);<br>    2253 - назначение на должность штатного сотрудника Пси-Надзора при Медико-исследовательском Отделе<br>Через 2 месяца после обнародования \"декларации дель Густо\" в составе организованной группы из сослуживцев и стажеров самовольно покинул женевский офис Корпуса и скрылся в неизвестном направлении - каждый член этой группы составил письменный отказ от членства в Корпусе, пересланный в распоряжение Совета Корпуса спустя неделю после бегства. В июне 2257 группа Кербера прибывает на Юкас. До конца 2257 года Кербер живет и работает на территории Анклава, в кластере Земного Альянса. В начале 2258 года в качестве Полномочного представителя Совета Анклава Телепатов Юкаса прибывает на станцию \"Вавилон-5\" в составе делегации ВЕГОС для участия в 4-ом Конгрессе Колоний."');

select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('name'), null, jsonb '"Анна Смит"');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_researcher'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_med_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_research_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_crew_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_security'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_political_influence'), null, to_jsonb(2));
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('person_job_position'), null, jsonb '"Служащая корпорации IPX.Делегат от Союза ВЕГОС."');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_balance'), null, jsonb '50000000');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_person_salary'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('person_biography'), null, jsonb '"Эта молодая женщина один из сотрудников корпорации IPX.<br>На своей должности не так долго, но уже проявила себя умелым дельцом и жестким конкурентом.<br>Она приветлива с партнерами и мила с конкурентами. Ходят слухи о ее сотрудничестве с торговыми представителями других цивилизаций, которые, впрочем, она не опровергает.<br>Сведения о личной жизни или семье Анна не афиширует, известно только что она в разводе, а ее семье давно погибла в волнениях на Марсе."');

select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('name'), null, jsonb '"Тойво Ларсен"');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('system_researcher'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('system_research_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('system_political_influence'), null, to_jsonb(4));
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('person_job_position'), null, jsonb '"Представитель кампании WEILAND-UTANY. Научный руководитель Института Внеземных Технологий."');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('person_biography'), null, jsonb '"Представитель кампании Вейланд Ютани. Научный руководитель Института Внеземных Технологий. крупный ученый. Специалист по ксеноартефактам. Входит ТОП 500 богатейших людей Альянса. Тойво - типичный ученый-мечтатель. Удивительно близорук во всем что не касется его любимых ксеноигрушек. Известен крайне либеральными взглядами."');

select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('name'), null, jsonb '"Мигель Гонсалес"');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('system_political_influence'), null, to_jsonb(1));
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('system_ea_military'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('person_job_position'), null, jsonb '"Военный губернатор Вегоса"');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('system_balance'), null, jsonb '1000000');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('system_person_salary'), null, jsonb '80000');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('person_biography'), null, jsonb '"Капитан НС ЗА. Военный губернатор Вегоса. Молодой человек, измученный нарзаном. Шурин Тойво Ларсена, что многие считают основой его быстрой \"карьеры\"."');

select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('name'), null, jsonb '"Владимир Владимирович Емельяненко"');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('system_political_influence'), null, to_jsonb(8));
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('person_job_position'), null, jsonb '"Сенатор от Лунного консорциума. Исполнительный директор корпорации \"Рокетдайн\"."');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person38'), data.get_attribute_id('person_biography'), null, jsonb '"Владимир Владимирович Емельяненко, лейтенант-коммандер ЗФ ВС ЗА в отставке, исполнительный директор корпорации \"Рокет-Дайн\".<br>Родился в 2218г. на Луне, в семье старших инженеров одной из верфей.<br>Учился на Марсе.<br>В 2244 г. получил повестку по всеобщей мобилизации. Был мобилизован в звании Энсина на фрегат \"Филоктет\" (корабль сопровождения тяжелого крейсера \"Олимпус\").<br>В 2245 получил повышение в звании. Пожалован Лейтенантом.<br>В бою за систему Проксима фрегат \"Филоктет\" был практически уничтожен залпом тяжелого крейсера \"Олимпус\" (так как оказался на линии огня с минбарским крейсером, выжило меньше трети экипажа). Обзавелся в результате следующим повышением в звании. пожалован Лейтенант-Коммандером.<br>В 2247 году после демобилизации получил приглашение на работу в корпорацию \"КармаТек\".<br>После слияния Карма-тек и Рокет-Дайн стал работать в корпорации Рокет-Дайн.<br>В 2249 году получил должность исполнительного директора корпорации \"Рокет-Дайн\".<br>Тогда же в 2249-м был выдвинут в Сенат и выиграл выборы став сенатором от Лунного консорциума. Переизбирался в 2256-м."');

select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('name'), null, jsonb '"Адриан Зорг"');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('system_researcher'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('system_research_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('system_political_influence'), null, to_jsonb(4));
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('person_job_position'), null, jsonb '"Делегат конгресса от земных консорциумов. Член совета директоров корпорации IPX."');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('person_biography'), null, jsonb '"Место рождения Лунный консорциум.<br>Принимал участие в Дилгарской войне, служил в в ЗФ ЗА в качестве инженера вспомогательных служб.<br>После войны работал в корпорации Вейланд Ютани, руководил секретным правительственным проектом. В 2247 году разразился скандал, Кейн внесла в Сенат Акт о Человечности, в котором потребовала запретить искусственный интеллект и все попытки разработок на эту тему.<br>Зорг выступил в сенате против этого доклада, после чего был разорван на куски прессой и коллегами а также сенаторами из клики Кейн. Пострадала его научная репутация, на него завели дело о растрате.<br>Перешел работать в IPX.<br>Участник \"Ледяного Похода\". Ходил на \"Копернике\" - капитана Сибирского. На время похода присвоено звание ЗФ ЗА лейтенант. Оказался в числе выживших. Списан из ВС ЗА по состоянию здоровья.<br>Реабилитация.<br>Во время ЗМВ был призван в планетарные силы обороны, летал на Дельте, входил в состав 3-го Округа ПВО планеты Проксима III.<br>При обороне планеты истребитель был сбит, обломки вместе с герметичной кабиной пилота подобраны медицинским кораблем Акслепий, и Зорг доставлен в госпиталь на Проксиме. Эвакуирован с Проксимы на Марс перед Битвой за Проксиму.<br>Реабилитация.<br>Служил до конца войны во вспомогательных частях в звании Энсин.<br>Участник Битвы при Рубеже.<br>После войны:<br>Аспирантура по квоте IPX. Научные работы \"Смягчение помех при использовании аппаратуры тахионной связи на кораблях класса Омега\", \"Навигационные пары - особенности усиления сигнала в навигационных приборах \"Дервиш\" последнего поколения\" и другие.<br>Получение наследства - крупный пакет акций корпорации IPX.<br>Защита докторской диссертации - тема \"Тонкая настройка стационарных Вортекс-Генераторов, с учетом особенностей масс системы и вторичного искажения гиперпространства в точках перехода\".<br>Заведующий кафедрой проблем навигации в гиперпространстве. Преподает.<br>Научный руководитель проекта корпорации IPX по радикальной переработке вортекс-генераторов Джорджа-Вильямса, \"До\".<br>Получено второе образование по специальности \"Биохимик\". Защищена магистерская диссертация.<br>Занялся бизнесом - игра на бирже, покупка и продажа крупных пакетов акций. По прежнему преподает, читает спецкурсы.<br>Избран в совет директоров корпорации IPX.<br>Присвоена академическая степень в академии наук ЗА - Женева.<br>Избран в совет директоров корпорации UMBRELLA."');

select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('name'), null, jsonb '"Акио Хитоши"');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('system_political_influence'), null, to_jsonb(14));
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('person_job_position'), null, jsonb '"Сенатор от Японского консорциума"');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('system_balance'), null, jsonb '6000000');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('system_person_salary'), null, jsonb '600000');
select data.set_attribute_value(data.get_object_id('person40'), data.get_attribute_id('person_biography'), null, jsonb '"Сенатор, японка, \"мать-основательница\" \"Вавилона\". Центрист."');

select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('name'), null, jsonb '"Джордан Квин"');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('system_political_influence'), null, to_jsonb(2));
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('system_ea_military'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('person_job_position'), null, jsonb '"Член совета директоров корпорации \"WEILAND-UTANY\", делегат 4го Конгресса Колоний от Земных Союзов ЗА"');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('system_balance'), null, jsonb '1000000');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('system_person_salary'), null, jsonb '80000');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('person_biography'), null, jsonb '"Джордан Квин - выходец из Индо-Китайского союза. Потомственный военный. По окончании Военной Академии участвовал в Минбарской войне. Служил в Звездном флоте, участник знаменитого тарана совершенного кораблем Ли Вонга \"Арес\", против минбарского крейсера \"Ден Ша\", и героической обороны станции \"Гагарин\".<br>До недавнего времени начальник объединенной разведки комитета Начальников Штабов. В настоящее время член совета директоров корпорации \"Вейланд-Ютани\", делегат 4го Конгресса Колоний от Земных Союзов ЗА. Одиозная и неоднозначная фигура. Вышел из КПЗ где находился под следствием две недели назад."');

select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('name'), null, jsonb '"Луис Сантьяго"');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('system_political_influence'), null, to_jsonb(7));
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('person_job_position'), null, jsonb '"Сенатор от Южно-Американского союза"');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('system_balance'), null, jsonb '4000000');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('system_person_salary'), null, jsonb '300000');
select data.set_attribute_value(data.get_object_id('person42'), data.get_attribute_id('person_biography'), null, jsonb '"В биографии нет ничего выдающегося"');

select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('name'), null, jsonb '"Оливия Раквери"');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('system_researcher'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('system_research_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('system_political_influence'), null, to_jsonb(2));
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('person_job_position'), null, jsonb '"Акционер компании Umbrella, заведует одной из крупных лабораторий"');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('system_balance'), null, jsonb '1000000');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('system_person_salary'), null, jsonb '80000');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('person_biography'), null, jsonb '"В биографии нет ничего выдающегося"');

select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('name'), null, jsonb '"Теодор Бетте"');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('system_political_influence'), null, to_jsonb(4));
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('person_job_position'), null, jsonb '" Глава ПСИ Надзора, ИО директора Корпуса"');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('system_psi_scale'), null, jsonb '12');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('person_biography'), null, jsonb '"Отчет частной разведывательной компании НАЗВАНИЕКОМПАНИИ подготовленный для сенатора ЗА [вычеркнуто] о Теодоре Бетте. [для служебного пользования]<br>В этом отчете кратко изложены данные из различных источников о жизни и карьере и.о. директора Пси Корпуса Теодора Бетте.<br>Детство, отрочество.<br>Родился на Земле в 2219 г. н.э. в семье [вычеркнуто] и [вычеркнуто]. В возрасте семи лет были выявлены метасенсорные способности с присвоение рейтинга П7, в результате чего Теодор Бетте был переведен в закрытый пансион Пси корпуса находящийся в [вычеркнуто]. По окончании базового курса обучения попал по распределению в Военный Отдел пси корпуса, призваный осуществлять поддержку спецслужбам ЗА, полицейским управлениям, службе безопасности и Вооруженным Силам ЗА. Отдел малочисленный, но очень ценимый Флотом, Сухопутными Силами и Разведкой ЗА. Его сотрудники проходят полный курс подготовки военных ЗА, включающий в себя рукопашный бой, владение оружием (включая ксенообразцы), управление истребителем, а так же контроль и управление систем средних и крупных кораблей ЗА.<br>Минбарская война.<br>Принял непосредственное участие в «мясорубке при Проксиме» (отражение попытки прорыва обороны Проксимы 3) в должности заместителя начальника отдела внутренней безопасности линкора «Олимпия». Ниже приводятся свидетельские показания капитана-лейтенанта [зачеркнуто], ветерана Минбарской войны, участника битвы при Проксиме 3 в должности [зачеркнуто] на тяжелом крейсере [зачеркнуто].<br>«Я встречал Бетте во время кампании против Минбара и вот что я вам скажу: он был плоть от плоти экипажа «Олимпии», хоть и телепатом. «Олимпия» базировалась на Проксиму, ее активно задействовали в рейдах на коммуникациях Минбарцев. Перед «мясорубкой» т.кр. «Олимпия» как раз привели на докование в систему Проксимы, и у нас была возможность пообщаться с экипажем капитана первого ранга Винсента Редера по кличке «Бешенный», да в принципе это прозвище точно характеризовало и остальной экипаж крейсера. Эти ребята не любили отступать, что и доказали во время битвы при Проксиме – битва проиграна, отдан приказ на отход, а они атакуют Минбарский крейсер, вопреки уставам, несмотря ни на что. Допускаю что кто-то из офицеров с «обостренном чувством чести и совести» не пожал бы им руку после этого, ведь по слухам на линии огня оказался фрегат ЗА, но черт возьми! Когда все отступили они продолжали драться! Такие ребята показали ксеносам что нас можно уничтожить, но не запугать!»<br>Служба после Минбарской войны.<br>По имеющимся сведениям, после Войны, Бетте продолжил свою деятельность в отделе внутренних расследований контрразведки ЗА, по этому этапу его деятельности достоверных данных нет, только обрывки слухов и домыслов. Есть сведения, что в этот период он работал по делам о пресечении незаконного оборота наркотиков, расследовании деятельности организованных преступных группировок, экономических преступлениях в корпоративных секторах. Подробности о содержании этого этапа его карьеры нет, но понятны результаты – отстранение от службы и внутреннее расследование Пси Надзора.<br>На пути к власти.<br>Первое документальное свидетельство о службе Теодора Бетте в Пси Надзоре относятся к 2254 году н.э., с этого времени его официальный рейтинг значится на уровне П12. Известно, что он был верным сподвижником и даже другом (если это вообще может быть у телепатов) Рикардо Дель Густо, до его бегства на Юкос. Тем не менее, судя по сообщениям из верхушки Пси Корпуса, он не рвался на первые роли, не устраивал подковерных интриг, но если требовала ситуация, брал на себя ответственность и принимал решения. После бегства на Юкос основных идеологов «нового направления» Пси Корпуса (Рикардо Дель Густо, Хенгист Кребер), руководство Пси Корпуса ведет себя как «кролик перед удавом». «Старая гвардия» Пси корпуса находится в ступоре, не понимая как себя вести, когда «земля уходит из-под ног». В этой ситуации Бетте, сохраняющий спокойствие и лояльность Пси корпусу, занимает должность руководителя Пси надзора, беря на себя сложную задачу выявления и устранения последствий «внутреннего бунта» в Пси корпусе. В этой борьбе Бетте не заработал наград и регалий, только врагов и обвинений, твердо ведя линию на единство Пси корпуса. После этого Бетте получает назначение на должность исполняющего обязаности директора Пси корпуса, видимо неожиданное для него самого, по крайне мере как говорят источники, после официального заявления президента Мари Кейн, Теодор на четыре дня уехал в уединенную резиденцию в итальянских Альпах.<br>Итог.<br>Какие выводы мы можем сделать о личности Теодора Бетте? Воспитан в традициях и идеологии Пси корпуса, ни разу не дал повода усомниться в своей лояльности Пси корпусу и Земному Альянсу. Сочетает в себе решительность и желание идти к цели, несмотря на потери и препятствия, с редкой неамбициозностью в карьерных вопросах и отсутствие желания добиться власти. Был лично предан Рикардо Дель Густо, действия котрого были класифицироанны Бетте как предательство интересов не только Пси корпуса, но и Человечества в целом.<br>Возможно, я не хочу брать на себя ответственность за столько громкие слова, но после Рикардо Дель Густо, фанатика индивидуальности и эксклюзивности телепатов, мы имеем на посту директора Пси корпуса человека, для которого интересы Земного Альянса и Человечества не являются пустым звуком."');

select data.set_attribute_value(data.get_object_id('person45'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person45'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person45'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person45'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person45'), data.get_attribute_id('name'), null, jsonb '"Саул У-Хань"');
select data.set_attribute_value(data.get_object_id('person45'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person45'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person45'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person45'), data.get_attribute_id('person_job_position'), null, jsonb '"Хозяин \"Зокало\""');
select data.set_attribute_value(data.get_object_id('person45'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person45'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person45'), data.get_attribute_id('person_biography'), null, jsonb '"В медицинских базах данных Саул У-Хань не зарегистрирован, но может быть с некоторой вероятностью идентифицирован, как родственник Саула \"Дядюшки\" Ханя.<br>Анализ источников позволяет предположить, что личность известная на «Вавилоне-5», как Саул «Дядюшка» Хань родился около восьмидесяти лет назад в семье тесно связанной с ассоциацией Тонгов, известной как «Синайская Хризантема». Отец – младший внук патриарха клана, Старого Моше Ханя, Майк Хань. Мать – Пэт Тарвиц. Судя по всему, назвали его именно в честь дальнего родственника Саула У-Ханя, точно предсказавшего пол, а также день и даже час рождения младенца.<br>Родственник этот, тихий скромный старичок в чине лейтенанта, переехал в дом Ханей вскоре после первых волнений на Марсе, жил во флигеле и предавался учёным занятиям. Был он чудаковат, как и полагается учёным людям, со многими странностями, однако привязался к своему пасынку всей душой и не отходил от него ни на шаг, настойчиво внедряя в него познания из математики, истории и других наук. Можно сказать, что в жизни младшего Ханя не было ни одного дня без Ханя-старшего, и, верно, потому он не замечал того, чему дивились другие: старик не только не дряхлел с годами, но, напротив, становился как будто бы даже сильнее, бодрее и моложе. Некоторые источники говорят о портретном сходстве У-Ханя в молодости со своим подопечным.<br>Майк Хань покинул клан незадолго до женитьбы и поступил на военную службу. в 2211 покинул службу в чине капитана НС ВС ЗА (ДЭК) и восстановил отношения с семьёй, быстро поднявшись в иерархии клана. Приблизительно в это же время младший Саул вербуется во флот Земного Альянса и получает квалификацию пилота истребителя «Тигр Mk2», затем поступает на офицерские курсы, получает звание Энсин ЗФ ВС ЗА и назначение на корвет «Пегас». В 2229 Саулу присвоено звание лейтенанта с переводом старшим помощником на крейсер «Харон», приписанный к эскадре Дальнего патруля. Характерно, что с этого момента во всех документах военного ведомства фигурируют сразу два человека с такой фамилией и инициалами.<br>С 2231 по 2232 в рядах ВС ЗА двое человек по фамилии Хань участвуют в Дилгарской войне. Согласно обрывочным сведениям один из получает тяжёлые ранения командуя высадкой Легионеров на Акдор-4 и направлен на реабилитацию в госпиталь Земных Сил «Бетесда-М» на Марсе. Записей о втором больше нет. Видимо с этого момента в базы данных Альянса начинают вноситься многочисленные изменения, затрудняющие идентификацию объекта и отслеживание его биографии.<br>Некое лицо, совпадающее по описанию с лейтенантом Ханем принимало участие в экспериментах по программе Г(автоматическая цензура ОР ВС ЗА) вызвался добровольцем (см. Приложение 2). В 2238 некто С. Хань был уволен из вооружённых сил по состоянию здоровья. Награжден почетными знаками, правительственными наградами и статусом \"Ветеран ВС ЗА\".<br>Можно также с уверенностью сказать, что некое лицо, совпадающее по описанию с лейтенантом Саулом Ханем, быстро поднимается в иерархии Тонгов. В то же время отмечается активная одновременная деятельность сходных (и, возможно, фантомных) личностей во многих колониях Альянса, как правило эта деятельность связана с контрабандой, незаконной миграцией и другими нарушениями закона. Около 2244 года некто Хань вероятно становится лидером клана, сменив на этом посту Майка Ханя.<br>Во время Минбарской войны С. Хань снова появляется в файлах Земных Сил в 2246 году, но уже через несколько месяцев его следы вновь теряются. С 2247 года и вплоть до Битвы на Рубеже некто, частично совпадающий по описанию с Ханем, руководит действиями специального флота Тонгов, которые помогают осуществлять эвакуацию гражданских колоний и обеспечивают транспортам вооружённое сопровождение. Во время строительства «Вавилона-5» Тонги вкладывают значительные средства в оборудование Зокало - торгово-развлекательного комплекса в секторе «Красный-5».<br>В 2256 для руководства частью предприятий Зокало на «Вавилон-5» прибывает некто Саул Хань, так же известный, как «Дядюшка». Злые языки утверждают, что в списке пассажиров был только один С. Хань, зато с пометкой \"2 экз.\"<br>После двух лет успешной работы он внезапно исчезает при невыясненных обстоятельствах, а место за стойкой занимает некто Саул У-Хань, по прозвищу \"Дедушка\". Судя по документам, он прибыл на станцию вместе со своим тёзкой два года назад. К сожалению, базы данных прибытия того времени были утрачены во время технических работ и проверить эту информацию не представляется возможным."');

select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('name'), null, jsonb '"Чарли Батт"');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('system_political_influence'), null, to_jsonb(4));
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('person_job_position'), null, jsonb '"Администратор \"Зокало\""');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('system_person_salary'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('person_biography'), null, jsonb '"Одна из немногих гражданских, кто стал героем минбарской войны в Директории... Впрочем, кто из участников этой войны не герой?<br>Как и многие ветераны долго не могла найти занятие в мирной жизни. Наконец, нашла подходящее место, где оказался полезен большой опыт ведения дел и общения со всеми возможными расами, и осела на станции. Вавилон - это лучшее место для человека с таким количеством друзей в галактике, а может и за её пределами."');

select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('name'), null, jsonb '"Синклер Нейман"');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('system_person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('system_online'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('system_political_influence'), null, to_jsonb(11));
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('system_ea_military'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('person_job_position'), null, jsonb '"Вице-президент"');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('system_balance'), null, jsonb '4000000');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('system_person_salary'), null, jsonb '600000');
select data.set_attribute_value(data.get_object_id('person47'), data.get_attribute_id('person_biography'), null, jsonb '"Известен тем, что лично расстрелял подчиненного, отказавшегося выполнить приказ во время Битвы на Рубеже.<br>Выжил в Битве на рубеже.<br>Бал тем самым командующим артеллеристским отрядом, который, по приказу Шерридана, установил мину, уничтожившие флагман минбари.<br>Служил пилотом истребителя в Диларской войне.<br>Старший помощник на \"Борее\"<br>При восстании на Марсе из-за болезни капитана на \"Борее\" стал стал руководителем операции.<br>При блокировании Марса был категорически против применения войск против населения. Однако получил прямой приказ и вынужден был подчиниться.<br>Семья (Отец, Мать и брат) на Земле фермеры.<br>Брат учился на Марсе судьба его после событий неизвестна.<br>Отказался давать показания в процессе над бунтовщиками с Марса<br>После марсианских событий повыше в звании, с опозданием в три года по выслуге.<br>Назначен военным губернатором на Вавилон 5.<br>Полгода назад стал вице-президентом ЗА."');

select data.set_attribute_value(data.get_object_id('person48'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person48'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person48'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person48'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person48'), data.get_attribute_id('name'), null, jsonb '"Шай Алит Гилранн"');
select data.set_attribute_value(data.get_object_id('person48'), data.get_attribute_id('person_race'), null, jsonb '"minbar"');
select data.set_attribute_value(data.get_object_id('person48'), data.get_attribute_id('person_state'), null, jsonb '"minbari"');
select data.set_attribute_value(data.get_object_id('person48'), data.get_attribute_id('system_online'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person48'), data.get_attribute_id('person_job_position'), null, jsonb '"Глава клана"');
select data.set_attribute_value(data.get_object_id('person48'), data.get_attribute_id('system_balance'), null, jsonb '3000000');
select data.set_attribute_value(data.get_object_id('person48'), data.get_attribute_id('system_person_salary'), null, jsonb '500000');
select data.set_attribute_value(data.get_object_id('person48'), data.get_attribute_id('person_biography'), null, jsonb '"Могущественный лидер касты воинов. Минбари старой закалки. Герой войны."');

select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('name'), null, jsonb '"Мишель Ван Дорф"');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('system_crew_member'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('system_crew_documents'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('system_congressman'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('system_political_influence'), null, to_jsonb(1));
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('person_job_position'), null, jsonb '"Главный инженер станции Вавилон-5"');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('system_balance'), null, jsonb '200000');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('system_person_salary'), null, jsonb '120000');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('person_biography'), null, jsonb '"Родилась и выросла в Лунном консорциуме. Там же получила техническое образование и в дальнейшем работала в компании IPX. Умную и талантливую девушку не могли не заметить, что, собственно, открыло ей дорогу к продвижению по карьерной лестнице и участие в новых проектах.<br>Во время Минбарской войны служила инженером на корабле \"Филактет\", затем продолжила службу на одной из станций.<br>После войны, заключив контракт с армией и получив звание лейтенанта, принимала участие в постройке всех станций серии Вавилон. Начиная от простого инженера и на данный момент заканчивая главным инженером станции.<br>Придерживается демократических взглядов, лояльно к представителям других рас и политических взглядов. Рассудительна, сдержана, знает свое дело. Не покидали станцию с момента начала строительства и по сей день."');

select data.set_attribute_value(data.get_object_id('person50'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person50'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person50'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person50'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person50'), data.get_attribute_id('name'), null, jsonb '"Джон Шеппард"');
select data.set_attribute_value(data.get_object_id('person50'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person50'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person50'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person50'), data.get_attribute_id('person_media'), null, jsonb '"media_ibc"');
select data.set_attribute_value(data.get_object_id('person50'), data.get_attribute_id('system_master'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person50'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person50'), data.get_attribute_id('system_person_salary'), null, jsonb '0');

select data.set_attribute_value(data.get_object_id('person51'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person51'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person51'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person51'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person51'), data.get_attribute_id('name'), null, jsonb '"Джош Дж. Купер"');
select data.set_attribute_value(data.get_object_id('person51'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person51'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person51'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person51'), data.get_attribute_id('person_media'), null, jsonb '"media_ibc"');
select data.set_attribute_value(data.get_object_id('person51'), data.get_attribute_id('system_master'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person51'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person51'), data.get_attribute_id('system_person_salary'), null, jsonb '0');

select data.set_attribute_value(data.get_object_id('person52'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person52'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person52'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person52'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person52'), data.get_attribute_id('name'), null, jsonb '"Двуцветок"');
select data.set_attribute_value(data.get_object_id('person52'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person52'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person52'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person52'), data.get_attribute_id('person_media'), null, jsonb '"media_ibc"');
select data.set_attribute_value(data.get_object_id('person52'), data.get_attribute_id('system_master'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person52'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person52'), data.get_attribute_id('system_person_salary'), null, jsonb '0');

select data.set_attribute_value(data.get_object_id('person53'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person53'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person53'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person53'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person53'), data.get_attribute_id('name'), null, jsonb '"Саймон Тэм"');
select data.set_attribute_value(data.get_object_id('person53'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person53'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person53'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person53'), data.get_attribute_id('person_media'), null, jsonb '"media_ibc"');
select data.set_attribute_value(data.get_object_id('person53'), data.get_attribute_id('system_master'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person53'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person53'), data.get_attribute_id('system_person_salary'), null, jsonb '0');

select data.set_attribute_value(data.get_object_id('person54'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person54'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person54'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person54'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person54'), data.get_attribute_id('name'), null, jsonb '"Джулия Кидман"');
select data.set_attribute_value(data.get_object_id('person54'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person54'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person54'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person54'), data.get_attribute_id('person_media'), null, jsonb '"media_ibc"');
select data.set_attribute_value(data.get_object_id('person54'), data.get_attribute_id('system_master'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person54'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person54'), data.get_attribute_id('system_person_salary'), null, jsonb '0');

select data.set_attribute_value(data.get_object_id('person55'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person55'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person55'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person55'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person55'), data.get_attribute_id('name'), null, jsonb '"Саша Коэн"');
select data.set_attribute_value(data.get_object_id('person55'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person55'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person55'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person55'), data.get_attribute_id('person_media'), null, jsonb '"media_ibc"');
select data.set_attribute_value(data.get_object_id('person55'), data.get_attribute_id('system_master'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person55'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person55'), data.get_attribute_id('system_person_salary'), null, jsonb '0');

select data.set_attribute_value(data.get_object_id('person56'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person56'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person56'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person56'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person56'), data.get_attribute_id('name'), null, jsonb '"Даниел Крейг"');
select data.set_attribute_value(data.get_object_id('person56'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person56'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person56'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person56'), data.get_attribute_id('person_media'), null, jsonb '"media_ibc"');
select data.set_attribute_value(data.get_object_id('person56'), data.get_attribute_id('system_master'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person56'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person56'), data.get_attribute_id('system_person_salary'), null, jsonb '0');

select data.set_attribute_value(data.get_object_id('person57'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person57'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person57'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person57'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person57'), data.get_attribute_id('name'), null, jsonb '"Анжела Дэвис"');
select data.set_attribute_value(data.get_object_id('person57'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person57'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person57'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person57'), data.get_attribute_id('person_media'), null, jsonb '"media_ibc"');
select data.set_attribute_value(data.get_object_id('person57'), data.get_attribute_id('system_master'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person57'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person57'), data.get_attribute_id('system_person_salary'), null, jsonb '0');

select data.set_attribute_value(data.get_object_id('person58'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person58'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person58'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person58'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person58'), data.get_attribute_id('name'), null, jsonb '"Джон Рокфеллер"');
select data.set_attribute_value(data.get_object_id('person58'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person58'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person58'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person58'), data.get_attribute_id('system_master'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person58'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person58'), data.get_attribute_id('system_person_salary'), null, jsonb '0');

select data.set_attribute_value(data.get_object_id('person59'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person59'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person59'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person59'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person59'), data.get_attribute_id('name'), null, jsonb '"Джон Сноу"');
select data.set_attribute_value(data.get_object_id('person59'), data.get_attribute_id('person_media'), null, jsonb '"media_ibc"');
select data.set_attribute_value(data.get_object_id('person59'), data.get_attribute_id('system_online'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person59'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person59'), data.get_attribute_id('system_person_salary'), null, jsonb '0');

select data.set_attribute_value(data.get_object_id('person60'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person60'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person60'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person60'), data.get_attribute_id('person_race'), null, jsonb '"human"');
select data.set_attribute_value(data.get_object_id('person60'), data.get_attribute_id('person_state'), null, jsonb '"ea"');
select data.set_attribute_value(data.get_object_id('person60'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person60'), data.get_attribute_id('name'), null, jsonb '"Мерил Стрип"');
select data.set_attribute_value(data.get_object_id('person60'), data.get_attribute_id('system_offline'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person60'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person60'), data.get_attribute_id('system_person_salary'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('person60'), data.get_attribute_id('person_biography'), null, jsonb '"35 лет. Из бедных слоёв. Стала актрисой в пику строгим родителям-католикам."');

select data.set_attribute_value(data.get_object_id('person61'), data.get_attribute_id('system_priority'), null, jsonb '200');
select data.set_attribute_value(data.get_object_id('person61'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person61'), data.get_attribute_id('system_mail_contact'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person61'), data.get_attribute_id('person_race'), null, jsonb '"centauri"');
select data.set_attribute_value(data.get_object_id('person61'), data.get_attribute_id('person_state'), null, jsonb '"centauri"');
select data.set_attribute_value(data.get_object_id('person61'), data.get_attribute_id('type'), null, jsonb '"person"');
select data.set_attribute_value(data.get_object_id('person61'), data.get_attribute_id('name'), null, jsonb '"Лорд Новус Фирра"');
select data.set_attribute_value(data.get_object_id('person61'), data.get_attribute_id('system_online'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person61'), data.get_attribute_id('system_balance'), null, jsonb '100000');
select data.set_attribute_value(data.get_object_id('person61'), data.get_attribute_id('system_person_salary'), null, jsonb '100000');
select data.set_attribute_value(data.get_object_id('person61'), data.get_attribute_id('person_biography'), null, jsonb '"Глава дома Фирра"');

select data.set_attribute_value(data.get_object_id('market'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('market'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('market'), data.get_attribute_id('type'), null, jsonb '"market"');
select data.set_attribute_value(data.get_object_id('market'), data.get_attribute_id('name'), null, jsonb '"Рынок"');

select data.set_attribute_value(data.get_object_id('sector_resources'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('sector_resources'), data.get_attribute_id('type'), null, jsonb '"sector"');
select data.set_attribute_value(data.get_object_id('sector_resources'), data.get_attribute_id('name'), null, jsonb '"Ресурсы"');
select data.set_attribute_value(data.get_object_id('sector_resources'), data.get_attribute_id('description'), null, jsonb '"Ресурсы"');
select data.set_attribute_value(data.get_object_id('sector_resources'), data.get_attribute_id('sector_volume'), null, jsonb '500000000');
select data.set_attribute_value(data.get_object_id('sector_resources'), data.get_attribute_id('sector_volume_changes'), null, jsonb '""');

select data.set_attribute_value(data.get_object_id('sector_vpk'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('sector_vpk'), data.get_attribute_id('type'), null, jsonb '"sector"');
select data.set_attribute_value(data.get_object_id('sector_vpk'), data.get_attribute_id('name'), null, jsonb '"ВПК"');
select data.set_attribute_value(data.get_object_id('sector_vpk'), data.get_attribute_id('description'), null, jsonb '"ВПК"');
select data.set_attribute_value(data.get_object_id('sector_vpk'), data.get_attribute_id('sector_volume'), null, jsonb '500000000');
select data.set_attribute_value(data.get_object_id('sector_vpk'), data.get_attribute_id('sector_volume_changes'), null, jsonb '""');

select data.set_attribute_value(data.get_object_id('sector_connections'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('sector_connections'), data.get_attribute_id('type'), null, jsonb '"sector"');
select data.set_attribute_value(data.get_object_id('sector_connections'), data.get_attribute_id('name'), null, jsonb '"Дальняя связь"');
select data.set_attribute_value(data.get_object_id('sector_connections'), data.get_attribute_id('description'), null, jsonb '"Дальняя связь"');
select data.set_attribute_value(data.get_object_id('sector_connections'), data.get_attribute_id('sector_volume'), null, jsonb '100000000');
select data.set_attribute_value(data.get_object_id('sector_connections'), data.get_attribute_id('sector_volume_changes'), null, jsonb '""');

select data.set_attribute_value(data.get_object_id('sector_medicine'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('sector_medicine'), data.get_attribute_id('type'), null, jsonb '"sector"');
select data.set_attribute_value(data.get_object_id('sector_medicine'), data.get_attribute_id('name'), null, jsonb '"Медицина"');
select data.set_attribute_value(data.get_object_id('sector_medicine'), data.get_attribute_id('description'), null, jsonb '"Медицина"');
select data.set_attribute_value(data.get_object_id('sector_medicine'), data.get_attribute_id('sector_volume'), null, jsonb '50000000');
select data.set_attribute_value(data.get_object_id('sector_medicine'), data.get_attribute_id('sector_volume_changes'), null, jsonb '""');

select data.set_attribute_value(data.get_object_id('sector_black_market'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('sector_black_market'), data.get_attribute_id('type'), null, jsonb '"sector"');
select data.set_attribute_value(data.get_object_id('sector_black_market'), data.get_attribute_id('name'), null, jsonb '"Чёрный рынок"');
select data.set_attribute_value(data.get_object_id('sector_black_market'), data.get_attribute_id('description'), null, jsonb '"Чёрный рынок"');
select data.set_attribute_value(data.get_object_id('sector_black_market'), data.get_attribute_id('sector_volume'), null, jsonb '500000000');
select data.set_attribute_value(data.get_object_id('sector_black_market'), data.get_attribute_id('sector_volume_changes'), null, jsonb '""');

select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_ipx'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('name'), null, jsonb '"IPX"');
select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('description'), null, jsonb '"Корпорация, занимающаяся поиском и разработкой полезных ископаемых и постройкой гражданских кораблей. Ведущий производитель вортекс-генераторов и систем дальней связи (тахионных передатчиков), гражданских космических объектов (производственных и лабораторных комплексов). Недавно выкупила корп. “Митчел-Хьюдайн” и вышла на рынок вооружений. Штаб квартира - Земля."');
select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ea"');
select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('corporation_sectors'), null, jsonb '["sector_vpk", "sector_resources", "sector_connections"]');
select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person3", "percent": 12},{"member": "person26", "percent": 16}, {"member": "person35", "percent": 6}, {"member": "person39", "percent": 29}, {"member": "person49", "percent": 4}, {"member": "person58", "percent": 24}]');
select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_ipx1", "deal_ipx2", "deal_ipx3", "deal_ipx4", "deal_ipx5", "deal_ipx6", "deal_ipx7", "deal_ipx8", "deal_ipx9", "deal_ipx10"]');
/*select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');*/
select data.set_attribute_value(data.get_object_id('corporation_ipx'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_rocketdain'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('name'), null, jsonb '"РОКЕТДАЙН"');
select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('description'), null, jsonb '"Корпорация, производящая сугубо военное оборудование. Также является производителем вортекс-генераторов собственной конструкции.<br>Штаб Квартира - Проксима 3."');
select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ea"');
select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('corporation_sectors'), null, jsonb '["sector_vpk", "sector_connections"]');
select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person29", "percent": 26}, {"member": "person38", "percent": 29}, {"member": "person58", "percent": 45}]');
select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_rocketdain1", "deal_rocketdain2", "deal_rocketdain3", "deal_rocketdain4", "deal_rocketdain5", "deal_rocketdain6", "deal_rocketdain7", "deal_rocketdain8", "deal_rocketdain9", "deal_rocketdain10"]');
--select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_rocketdain'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_umbrella'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('name'), null, jsonb '"UMBRELLA"');
select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('description'), null, jsonb '"Корпорация, занимающаяся производством медпрепаратов, исследованиями в области биоинженерии, проблемами реабилитации, протезированием. Штаб квартира - Берлин II."');
select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ea"');
select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('corporation_sectors'), null, '["sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person31", "percent": 32}, {"member": "person39", "percent": 32}, {"member": "person43", "percent": 6}, {"member": "person58", "percent": 30}]');
select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_umbrella1", "deal_umbrella2", "deal_umbrella3", "deal_umbrella4", "deal_umbrella5", "deal_umbrella6", "deal_umbrella7", "deal_umbrella8", "deal_umbrella9", "deal_umbrella10"]');
--select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_umbrella'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_weiland'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('name'), null, jsonb '"WEILAND-UTANY"');
select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('description'), null, jsonb '"Корпорация, занимающаяся исследованием космоса, археологическими изысканиями, производством медпрепаратов, исследованиями в области биоинженерии, имплантатами, производством роботизированных и автоматизированных систем. Также второй крупнейший поставщик систем связи после IPX.  Штаб квартира - Женева, Земля."');
select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ea"');
select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('corporation_sectors'), null, '["sector_medicine", "sector_connections"]');
select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person28", "percent": 2}, {"member": "person36", "percent": 25}, {"member": "person37", "percent": 4}, {"member": "person41", "percent": 21}, {"member": "person58", "percent": 48}]');
select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_weiland1", "deal_weiland2", "deal_weiland3", "deal_weiland4", "deal_weiland5", "deal_weiland6", "deal_weiland7", "deal_weiland8", "deal_weiland9", "deal_weiland10"]');
--select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_weiland'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_mars'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('name'), null, jsonb '"MARS INDUSTRIES"');
select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('description'), null, jsonb '"Корпорация, занимающаяся разработкой полезных ископаемых, постройкой гражданских кораблей, производством оружия для наземных сил, постройкой гражданских космических объектов (производственных и лабораторных комплексов). Самая старая корпорация ЗА из не подвергшихся поглощению и слиянию."');
select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ea"');
select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('corporation_sectors'), null, '["sector_vpk", "sector_resources"]');
select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person28", "percent": 3}, {"member": "person32", "percent": 23}, {"member": "person33", "percent": 49}, {"member": "person42", "percent": 4}, {"member": "person58", "percent": 21}]');
select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_mars1", "deal_mars2", "deal_mars3", "deal_mars4", "deal_mars5", "deal_mars6", "deal_mars7", "deal_mars8", "deal_mars9", "deal_mars10"]');
--select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_mars'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_tong'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('name'), null, jsonb '"Ассоциация тонгов “Белая Хризантема”"');
select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('description'), null, jsonb '"Торговая и посредническая организация, также берёт подряды на охранную деятельность. Имеет лицензию от КРЭФ на занятие кредитной деятельностью и страхованием рисков. Ходят слухи про контрабанду, наемные убийства и торговлю людьми, но это все клевета."');
select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ea"');
select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('corporation_sectors'), null, '["sector_black_market"]');
select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person40", "percent": 20}, {"member": "person45", "percent": 22}, {"member": "person46", "percent": 26}, {"member": "person58", "percent": 32}]');
select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_tong1", "deal_tong2", "deal_tong3", "deal_tong4", "deal_tong5", "deal_tong6", "deal_tong7", "deal_tong8", "deal_tong9", "deal_tong10"]');
--select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_tong'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_kref'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('name'), null, jsonb '"КРЭФ"');
select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('description'), null, jsonb '"КРЭФ (Сенатский комитет по регулированию в сфере экономики и финансов) - организация, олицетворяющая банковскую и финансовую сферу. Только государство может выдавать кредиты, или лицензию на кредитно-экономическую деятельность. К тому же государство владеет блокирующими пакетами акций некоторых корпораций, и минорными пакетами акций всех корпораций, чтобы следить за их деятельностью. Нынешний председатель КРЭФ Джон Морган."');
select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ea"');
select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
--select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('corporation_sectors'), null, '[]');
select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person58", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_kref1", "deal_kref2", "deal_kref3", "deal_kref4", "deal_kref5", "deal_kref6", "deal_kref7", "deal_kref8", "deal_kref9", "deal_kref10"]');
--select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_kref'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_ea'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('name'), null, jsonb '"Земной альянс"');
select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('description'), null, jsonb '"Земной альянс"');
select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ea"');
select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('corporation_sectors'), null, '["sector_vpk", "sector_resources", "sector_connections", "sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person47", "percent": 21}, {"member": "person58", "percent": 21}]');
select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_ea1", "deal_ea2", "deal_ea3", "deal_ea4", "deal_ea5", "deal_ea6", "deal_ea7", "deal_ea8", "deal_ea9", "deal_ea10"]');
--select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_ea'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_brakos_diamond'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('name'), null, jsonb '"Бракос Даймонд"');
select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('description'), null, jsonb '"Корпорация, занимающаяся добычей ресурсов и дальней связью"');
select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('corporation_state'), null, jsonb '"state_brakiri"');
select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('corporation_sectors'), null, '["sector_vpk", "sector_resources"]');
select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person14", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_brakos_diamond1", "deal_brakos_diamond2", "deal_brakos_diamond3", "deal_brakos_diamond4", "deal_brakos_diamond5", "deal_brakos_diamond6", "deal_brakos_diamond7", "deal_brakos_diamond8", "deal_brakos_diamond9", "deal_brakos_diamond10"]');
--select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_brakos_diamond'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_droshalla_power'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('name'), null, jsonb '"Сила Дрошаллы"');
select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('description'), null, jsonb '"Корпорация, работающая в сфере ВПК и дальней связи"');
select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('corporation_state'), null, jsonb '"state_drazzi"');
select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('corporation_sectors'), null, '["sector_vpk", "sector_connections"]');
select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person13", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_droshalla_power1", "deal_droshalla_power2", "deal_droshalla_power3", "deal_droshalla_power4", "deal_droshalla_power5", "deal_droshalla_power6", "deal_droshalla_power7", "deal_droshalla_power8", "deal_droshalla_power9", "deal_droshalla_power10"]');
--select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_droshalla_power'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_unnaming_blassing'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('name'), null, jsonb '"Благословение Безымянного"');
select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('description'), null, jsonb '"Медицинская корпорация"');
select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('corporation_state'), null, jsonb '"state_markabi"');
select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('corporation_sectors'), null, '["sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person15", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_unnaming_blassing1", "deal_unnaming_blassing2", "deal_unnaming_blassing3", "deal_unnaming_blassing4", "deal_unnaming_blassing5", "deal_unnaming_blassing6", "deal_unnaming_blassing7", "deal_unnaming_blassing8", "deal_unnaming_blassing9", "deal_unnaming_blassing10"]');
--select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_unnaming_blassing'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_bhara'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('name'), null, jsonb '"Дом Бхара"');
select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('description'), null, jsonb '"Один из синдикатов Антареса"');
select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('corporation_state'), null, jsonb '"state_antares"');
select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('corporation_sectors'), null, '["sector_medicine", "sector_resources", "sector_vpk"]');
select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person20", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_bhara1", "deal_bhara2", "deal_bhara3", "deal_bhara4", "deal_bhara5", "deal_bhara6", "deal_bhara7", "deal_bhara8", "deal_bhara9", "deal_bhara10"]');
--select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_bhara'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_antares_finance'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('name'), null, jsonb '"Антарес-Финанс"');
select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('description'), null, jsonb '"Корпорация синдикатов Антареса"');
select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('corporation_state'), null, jsonb '"state_antares"');
select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('corporation_sectors'), null, '["sector_resources", "sector_connections", "sector_black_market"]');
select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person21", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_antares_finance1", "deal_antares_finance2", "deal_antares_finance3", "deal_antares_finance4", "deal_antares_finance5", "deal_antares_finance6", "deal_antares_finance7", "deal_antares_finance8", "deal_antares_finance9", "deal_antares_finance10"]');
--select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_antares_finance'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_marba'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('name'), null, jsonb '"Марба"');
select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('description'), null, jsonb '"Корпорация с Центавра"');
select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('corporation_state'), null, jsonb '"state_centauri"');
select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('corporation_sectors'), null, '["sector_vpk", "sector_connections"]');
select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person8", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_marba1", "deal_marba2", "deal_marba3", "deal_marba4", "deal_marba5", "deal_marba6", "deal_marba7", "deal_marba8", "deal_marba9", "deal_marba10"]');
--select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_marba'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_mollari'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('name'), null, jsonb '"Моллари Консолидейтед"');
select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('description'), null, jsonb '"Корпорация дома Моллари"');
select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('corporation_state'), null, jsonb '"state_centauri"');
select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('corporation_sectors'), null, '["sector_resources", "sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person7", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_mollari1", "deal_mollari2", "deal_mollari3", "deal_mollari4", "deal_mollari5", "deal_mollari6", "deal_mollari7", "deal_mollari8", "deal_mollari9", "deal_mollari10"]');
--select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_mollari'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_makan'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('name'), null, jsonb '"Ma''Kan Industries"');
select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('description'), null, jsonb '"Корпорация с Нарна"');
select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('corporation_state'), null, jsonb '"state_narn"');
select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('corporation_sectors'), null, '["sector_vpk", "sector_connections", "sector_resources", "sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person10", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_makan1", "deal_makan2", "deal_makan3", "deal_makan4", "deal_makan5", "deal_makan6", "deal_makan7", "deal_makan8", "deal_makan9", "deal_makan10"]');
--select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_makan'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('name'), null, jsonb '"Каста мастеров"');
select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('description'), null, jsonb '"Каста мастеров минбари"');
select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('corporation_state'), null, jsonb '"state_minbari"');
select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('corporation_sectors'), null, '["sector_vpk", "sector_connections", "sector_resources", "sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person17", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_masters1", "deal_masters2", "deal_masters3", "deal_masters4", "deal_masters5", "deal_masters6", "deal_masters7", "deal_masters8", "deal_masters9", "deal_masters10"]');
--select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_masters'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_artalan'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('name'), null, jsonb '"Арталан"');
select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('description'), null, jsonb '"Корпорация драззи"');
select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('corporation_state'), null, jsonb '"state_drazzi"');
select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('corporation_sectors'), null, '["sector_connections", "sector_black_market"]');
select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person22", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_artalan1", "deal_artalan2", "deal_artalan3", "deal_artalan4", "deal_artalan5", "deal_artalan6", "deal_artalan7", "deal_artalan8", "deal_artalan9", "deal_artalan10"]');
--select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_artalan'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_psi_corps'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('name'), null, jsonb '"PSI corps"');
select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('description'), null, jsonb '"Корпорация телепатов"');
select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ea"');
select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('corporation_sectors'), null, '["sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person44", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_psi_corps1", "deal_psi_corps2", "deal_psi_corps3", "deal_psi_corps4", "deal_psi_corps5", "deal_psi_corps6", "deal_psi_corps7", "deal_psi_corps8", "deal_psi_corps9", "deal_psi_corps10"]');
--select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_psi_corps'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_anklav_telepaths'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('name'), null, jsonb '"Анклав телепатов"');
select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('description'), null, jsonb '"Корпорация телепатов"');
select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ea"');
select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('corporation_sectors'), null, '["sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person34", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_anklav_telepaths1", "deal_anklav_telepaths2", "deal_anklav_telepaths3", "deal_anklav_telepaths4", "deal_anklav_telepaths5", "deal_anklav_telepaths6", "deal_anklav_telepaths7", "deal_anklav_telepaths8", "deal_anklav_telepaths9", "deal_anklav_telepaths10"]');
--select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_anklav_telepaths'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_guild_telepaths'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('name'), null, jsonb '"Гильдия телепатов"');
select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('description'), null, jsonb '"Корпорация телепатов с Центавра"');
select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('corporation_state'), null, jsonb '"state_centauri"');
select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('corporation_sectors'), null, '["sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person8", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_guild_telepaths1", "deal_guild_telepaths2", "deal_guild_telepaths3", "deal_guild_telepaths4", "deal_guild_telepaths5", "deal_guild_telepaths6", "deal_guild_telepaths7", "deal_guild_telepaths8", "deal_guild_telepaths9", "deal_guild_telepaths10"]');
--select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('system_corporation_draft_deals'), null, jsonb '[]');
--select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('system_corporation_canceled_deals'), null, jsonb '[]');
select data.set_attribute_value(data.get_object_id('corporation_guild_telepaths'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('corporation_an_lashok'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_an_lashok'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_an_lashok'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_an_lashok'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_an_lashok'), data.get_attribute_id('name'), null, jsonb '"Ан-Лашок"');
select data.set_attribute_value(data.get_object_id('corporation_an_lashok'), data.get_attribute_id('description'), null, jsonb '"Ан-Лашок"');
select data.set_attribute_value(data.get_object_id('corporation_an_lashok'), data.get_attribute_id('corporation_state'), null, jsonb '"state_anlashok"');
select data.set_attribute_value(data.get_object_id('corporation_an_lashok'), data.get_attribute_id('system_balance'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_an_lashok'), data.get_attribute_id('corporation_sectors'), null, jsonb '["sector_vpk", "sector_connections"]');
select data.set_attribute_value(data.get_object_id('corporation_an_lashok'), data.get_attribute_id('corporation_capitalization'), null, jsonb '10000000');
select data.set_attribute_value(data.get_object_id('corporation_an_lashok'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person23", "percent": 70},{"member": "person24", "percent": 30}]');
select data.set_attribute_value(data.get_object_id('corporation_an_lashok'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_an_lashok1", "deal_an_lashok2", "deal_an_lashok3", "deal_an_lashok4", "deal_an_lashok5", "deal_an_lashok6", "deal_an_lashok7", "deal_an_lashok8", "deal_an_lashok9", "deal_an_lashok10"]');
select data.set_attribute_value(data.get_object_id('corporation_an_lashok'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

select data.set_attribute_value(data.get_object_id('normal_deals'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('normal_deals'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('normal_deals'), data.get_attribute_id('type'), null, jsonb '"normal_deals"');
select data.set_attribute_value(data.get_object_id('normal_deals'), data.get_attribute_id('name'), null, jsonb '"Активные сделки"');

select data.set_attribute_value(data.get_object_id('draft_deals'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('draft_deals'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('draft_deals'), data.get_attribute_id('type'), null, jsonb '"draft_deals"');
select data.set_attribute_value(data.get_object_id('draft_deals'), data.get_attribute_id('name'), null, jsonb '"Cделки в работе"');

select data.set_attribute_value(data.get_object_id('canceled_deals'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('canceled_deals'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('canceled_deals'), data.get_attribute_id('type'), null, jsonb '"canceled_deals"');
select data.set_attribute_value(data.get_object_id('canceled_deals'), data.get_attribute_id('name'), null, jsonb '"Расторгнутые сделки"');

select data.set_attribute_value(data.get_object_id('percent_deals'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('percent_deals'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('percent_deals'), data.get_attribute_id('type'), null, jsonb '"percent_deals"');
select data.set_attribute_value(data.get_object_id('percent_deals'), data.get_attribute_id('name'), null, jsonb '"Сделки по продаже акций"');

select data.set_attribute_value(data.get_object_id('person_draft_percent_deals'), data.get_attribute_id('system_meta'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('person_draft_percent_deals'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person_draft_percent_deals'), data.get_attribute_id('type'), null, jsonb '"person_draft_percent_deals"');
select data.set_attribute_value(data.get_object_id('person_draft_percent_deals'), data.get_attribute_id('name'), null, jsonb '"Предложения продажи акций"');

select data.set_attribute_value(data.get_object_id('draft_percent_deals'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('draft_percent_deals'), data.get_attribute_id('type'), null, jsonb '"draft_percent_deals"');
select data.set_attribute_value(data.get_object_id('draft_percent_deals'), data.get_attribute_id('name'), null, jsonb '"Предложения продажи акций"');

select data.set_attribute_value(data.get_object_id('canceled_percent_deals'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('canceled_percent_deals'), data.get_attribute_id('type'), null, jsonb '"canceled_percent_deals"');
select data.set_attribute_value(data.get_object_id('canceled_percent_deals'), data.get_attribute_id('name'), null, jsonb '"Отклонённые продажи акций"');

select data.set_attribute_value(data.get_object_id('done_percent_deals'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('done_percent_deals'), data.get_attribute_id('type'), null, jsonb '"done_percent_deals"');
select data.set_attribute_value(data.get_object_id('done_percent_deals'), data.get_attribute_id('name'), null, jsonb '"Подтверждённые продажи акций"');

-- TODO сделки

-- IPX
insert into data.objects(code)
select 'deal_ipx' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_ipx' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_ipx' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_ipx' || o.value), data.get_attribute_id('deal_sector'), null, jsonb '"sector_vpk"'),
  data.set_attribute_value(data.get_object_id('deal_ipx' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_ipx' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_ipx' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_ipx' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_ipx", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_ipx' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_ipx' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_ipx' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_ipx1'), data.get_attribute_id('name'), null, to_jsonb('Митчелл–Хьюндайн'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx1'), data.get_attribute_id('description'), null, to_jsonb('"Митчелл–Хьюндайн" (была поглощена IPX)'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx1'), data.get_attribute_id('asset_name'), null, to_jsonb('Митчелл–Хьюндайн'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_ipx2'), data.get_attribute_id('name'), null, to_jsonb('Лаборатория "Радаманта"'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx2'), data.get_attribute_id('description'), null, to_jsonb('Лаборатория “Радаманта” Лонг Бич, Северная Америка, Земля. производит технологии для москитного флота'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx2'), data.get_attribute_id('asset_name'), null, to_jsonb('Лаборатория "Радаманта"'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_ipx3'), data.get_attribute_id('name'), null, to_jsonb('Орбитальные верфи "Нью–Кобе"'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx3'), data.get_attribute_id('description'), null, to_jsonb('Орбитальные верфи "Нью–Кобе", Лунный консорциум Производит “валькирии”, “фурии” и корверты типа Олимпус'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx3'), data.get_attribute_id('asset_name'), null, to_jsonb('Орбитальные верфи "Нью–Кобе"'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_ipx4'), data.get_attribute_id('name'), null, to_jsonb('Орбитальный производственно-лабораторный комплекс и верфи “Пасем”'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx4'), data.get_attribute_id('description'), null, to_jsonb('Орбитальный производственно-лабораторный комплекс и верфи “Пасем”. Производит транспортные корабли типа “Тескан” и исследовательские корабли типа “Икар”, на Пасеме были построены все корабли серии “Кортес”. источник технологий'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx4'), data.get_attribute_id('asset_name'), null, to_jsonb('Орбитальный производственно-лабораторный комплекс и верфи “Пасем”'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_ipx5'), data.get_attribute_id('name'), null, to_jsonb('Корабль “Кортес”'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx5'), data.get_attribute_id('description'), null, to_jsonb('Корабль “Кортес” - первый корабль серии переоборудован в учебный сняты вортекс-генераторы'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx5'), data.get_attribute_id('asset_name'), null, to_jsonb('Корабль “Кортес”'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_ipx6'), data.get_attribute_id('name'), null, to_jsonb('Корабль “Тихо Брааге”'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx6'), data.get_attribute_id('description'), null, to_jsonb('Корабль “Тихо Брааге” систершип “Кортеса”. Порт приписки - верфи “Нью-Кобе”'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx6'), data.get_attribute_id('asset_name'), null, to_jsonb('Корабль “Тихо Брааге”'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_ipx7'), data.get_attribute_id('name'), null, to_jsonb('Корабль “Иоган Кеплер”'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx7'), data.get_attribute_id('description'), null, to_jsonb('Корабль “Иоган Кеплер” - порт приписки верфи “Кум-Рияд” (имеется соглашение об обслуживании с Рокетдайн)'::text));
  select data.set_attribute_value(data.get_object_id('deal_ipx7'), data.get_attribute_id('asset_name'), null, to_jsonb('Корабль “Иоган Кеплер”'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_ipx8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ipx8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ipx8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_ipx9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ipx9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ipx9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_ipx10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ipx10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ipx10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  -- rocketdain
insert into data.objects(code)
select 'deal_rocketdain' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_rocketdain' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_rocketdain' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_rocketdain' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_connections'::text)),
  data.set_attribute_value(data.get_object_id('deal_rocketdain' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_rocketdain' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_rocketdain' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_rocketdain' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_rocketdain", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_rocketdain' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_rocketdain' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_rocketdain' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_rocketdain1'), data.get_attribute_id('name'), null, to_jsonb('Лабораторный комплекс и орбитальные верфи “Хеврон”'::text));
  select data.set_attribute_value(data.get_object_id('deal_rocketdain1'), data.get_attribute_id('description'), null, to_jsonb('Лабораторный комплекс и орбитальные верфи “Хеврон” - производят корветы типа “Олимпус”, защитное вооружение (автоматические ракетные установки, мины, системы наведения и управления и пр.) источник технологий'::text));
  select data.set_attribute_value(data.get_object_id('deal_rocketdain1'), data.get_attribute_id('asset_name'), null, to_jsonb('Лабораторный комплекс и орбитальные верфи “Хеврон”'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_rocketdain2'), data.get_attribute_id('name'), null, to_jsonb('"КармаТек"'::text));
  select data.set_attribute_value(data.get_object_id('deal_rocketdain2'), data.get_attribute_id('description'), null, to_jsonb('"КармаТек" (была поглощена Рокетдайн), орбитальные космоверфи "Кум-Рияд", Проксима 3. Производит Гиперионы (тяжелые крейсера) и дредноуты типа “Нова”'::text));
  select data.set_attribute_value(data.get_object_id('deal_rocketdain2'), data.get_attribute_id('asset_name'), null, to_jsonb('"КармаТек"'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_rocketdain3'), data.get_attribute_id('name'), null, to_jsonb('"M''Gede Technologies"'::text));
  select data.set_attribute_value(data.get_object_id('deal_rocketdain3'), data.get_attribute_id('description'), null, to_jsonb('"M''Gede Technologies"  (была поглощена Рокетдайн), Лунный консорциум, производит оборудование для стационарных военных баз.'::text));
  select data.set_attribute_value(data.get_object_id('deal_rocketdain3'), data.get_attribute_id('asset_name'), null, to_jsonb('"M''Gede Technologies"'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_rocketdain4'), data.get_attribute_id('name'), null, to_jsonb('Производственный комплекс “Мауи”'::text));
  select data.set_attribute_value(data.get_object_id('deal_rocketdain4'), data.get_attribute_id('description'), null, to_jsonb('Производственный комплекс “Мауи”, Станция "Гагарин" система Проксима - производит вооружение и оборудование для наземных сил'::text));
  select data.set_attribute_value(data.get_object_id('deal_rocketdain4'), data.get_attribute_id('asset_name'), null, to_jsonb('Производственный комплекс “Мауи”'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_rocketdain5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_rocketdain5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_rocketdain5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_rocketdain6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_rocketdain6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_rocketdain6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_rocketdain7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_rocketdain7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_rocketdain7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_rocketdain8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_rocketdain8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_rocketdain8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_rocketdain9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_rocketdain9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_rocketdain9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_rocketdain10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_rocketdain10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_rocketdain10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  -- umbrella
insert into data.objects(code)
select 'deal_umbrella' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_umbrella' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_umbrella' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_umbrella' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_connections'::text)),
  data.set_attribute_value(data.get_object_id('deal_umbrella' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_umbrella' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_umbrella' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_umbrella' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_umbrella", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_umbrella' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_umbrella' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_umbrella' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_umbrella1'), data.get_attribute_id('name'), null, to_jsonb('"Luigi Mendoza et Cie"'::text));
  select data.set_attribute_value(data.get_object_id('deal_umbrella1'), data.get_attribute_id('description'), null, to_jsonb('"Luigi Mendoza et Cie" (поглощена корпорацией umbrella). Имеется орбитальный лабораторно исследовательский комплекс в системе Берлин - “Седьмая Дракона”. Производит технологии.'::text));
  select data.set_attribute_value(data.get_object_id('deal_umbrella1'), data.get_attribute_id('asset_name'), null, to_jsonb('"Luigi Mendoza et Cie"'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_umbrella2'), data.get_attribute_id('name'), null, to_jsonb('“Небесные врата”'::text));
  select data.set_attribute_value(data.get_object_id('deal_umbrella2'), data.get_attribute_id('description'), null, to_jsonb('“Небесные врата” - лабораторно-производственный комплекс технологии и медпрепараты. Самая известная ВИП лечебница в ЗА. Находится на Берлин II.'::text));
  select data.set_attribute_value(data.get_object_id('deal_umbrella2'), data.get_attribute_id('asset_name'), null, to_jsonb('“Небесные врата”'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_umbrella3'), data.get_attribute_id('name'), null, to_jsonb('“Роща богов”'::text));
  select data.set_attribute_value(data.get_object_id('deal_umbrella3'), data.get_attribute_id('description'), null, to_jsonb('“Роща богов” - лабораторно производственный комплекс. Самый крупный и старый медицинский комплекс в ЗА. Южная америка НьюМехико. Здесь был синтезирован нейропротектор, и проводились первые исследования феномена метасенсорных способностей.'::text));
  select data.set_attribute_value(data.get_object_id('deal_umbrella3'), data.get_attribute_id('asset_name'), null, to_jsonb('“Роща богов”'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_umbrella4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_umbrella5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_umbrella6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_umbrella7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_umbrella8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_umbrella9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_umbrella10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_umbrella10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
    -- weiland
insert into data.objects(code)
select 'deal_weiland' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_weiland' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_weiland' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_weiland' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_connections'::text)),
  data.set_attribute_value(data.get_object_id('deal_weiland' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_weiland' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_weiland' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_weiland' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_weiland", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_weiland' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_weiland' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_weiland' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_weiland1'), data.get_attribute_id('name'), null, to_jsonb('Лабораторно-исследовательский комплекс - Станция "Занзибар", Сириус IV'::text));
  select data.set_attribute_value(data.get_object_id('deal_weiland1'), data.get_attribute_id('description'), null, to_jsonb('Лабораторно-исследовательский комплекс - Станция "Занзибар", Сириус IV. производит технологии при наличии открытых раскопок.'::text));
  select data.set_attribute_value(data.get_object_id('deal_weiland1'), data.get_attribute_id('asset_name'), null, to_jsonb('Лабораторно-исследовательский комплекс - Станция "Занзибар", Сириус IV'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_weiland2'), data.get_attribute_id('name'), null, to_jsonb('Лабораторно-исследовательский комплекс - “Шрайк”, Орион III'::text));
  select data.set_attribute_value(data.get_object_id('deal_weiland2'), data.get_attribute_id('description'), null, to_jsonb('Лабораторно-исследовательский комплекс - “Шрайк”, Орион III. производит технологии при наличии открытых раскопок.'::text));
  select data.set_attribute_value(data.get_object_id('deal_weiland2'), data.get_attribute_id('asset_name'), null, to_jsonb('Лабораторно-исследовательский комплекс - “Шрайк”, Орион III'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_weiland3'), data.get_attribute_id('name'), null, to_jsonb('Производственный комплекс - “Прометей”, Вега IX'::text));
  select data.set_attribute_value(data.get_object_id('deal_weiland3'), data.get_attribute_id('description'), null, to_jsonb('Производственный комплекс - “Прометей”, Вега IX производит станции и системы связи, оборудование для вещательных корпораций, вортекс-генераторы.'::text));
  select data.set_attribute_value(data.get_object_id('deal_weiland3'), data.get_attribute_id('asset_name'), null, to_jsonb('Производственный комплекс - “Прометей”, Вега IX'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_weiland4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_weiland5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_weiland6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_weiland7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_weiland8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_weiland9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_weiland10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_weiland10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  -- mars
insert into data.objects(code)
select 'deal_mars' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_mars' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_mars' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_mars' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_resources'::text)),
  data.set_attribute_value(data.get_object_id('deal_mars' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_mars' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_mars' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_mars' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_mars", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_mars' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_mars' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_mars' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_mars1'), data.get_attribute_id('name'), null, to_jsonb('Производственный комплекс “Лузус”'::text));
  select data.set_attribute_value(data.get_object_id('deal_mars1'), data.get_attribute_id('description'), null, to_jsonb('Производственный комплекс “Лузус”, Лунный консорциум, производит оборудование для стационарных военных баз.'::text));
  select data.set_attribute_value(data.get_object_id('deal_mars1'), data.get_attribute_id('asset_name'), null, to_jsonb('Производственный комплекс “Лузус”'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_mars2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mars3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mars4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mars5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mars6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mars7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mars8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mars9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mars10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mars10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');

    -- tong
insert into data.objects(code)
select 'deal_tong' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_tong' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_tong' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_tong' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_vpk'::text)),
  data.set_attribute_value(data.get_object_id('deal_tong' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_tong' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_tong' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_tong' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_tong", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_tong' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_tong' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_tong' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_tong1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_tong2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_tong3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_tong4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_tong5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_tong6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_tong7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_tong8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_tong9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_tong10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_tong10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  --kref
  
 insert into data.objects(code)
select 'deal_kref' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_kref' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_kref' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_kref' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_resources'::text)),
  data.set_attribute_value(data.get_object_id('deal_kref' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_kref' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_kref' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_kref' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_kref", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_kref' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_kref' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_kref' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_kref1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_kref2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_kref3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_kref4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_kref5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_kref6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_kref7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_kref8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_kref9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_kref10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_kref10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  insert into data.objects(code)
select 'deal_ea' || o1.* from generate_series(1, 10) o1(value);

-- ea
select
  data.set_attribute_value(data.get_object_id('deal_ea' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_ea' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_ea' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_resources'::text)),
  data.set_attribute_value(data.get_object_id('deal_ea' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_ea' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_ea' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_ea' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_ea", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_ea' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_ea' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_ea' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_ea1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_ea2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_ea3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_ea4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_ea5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_ea6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_ea7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_ea8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_ea9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_ea10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_ea10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
    --brakos_diamond
insert into data.objects(code)
select 'deal_brakos_diamond' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_brakos_diamond' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_brakos_diamond' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_brakos_diamond' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_resources'::text)),
  data.set_attribute_value(data.get_object_id('deal_brakos_diamond' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_brakos_diamond' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_brakos_diamond' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_brakos_diamond' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_brakos_diamond", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_brakos_diamond' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_brakos_diamond' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_brakos_diamond' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_brakos_diamond10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
 --droshalla_power
insert into data.objects(code)
select 'deal_droshalla_power' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_droshalla_power' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_droshalla_power' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_droshalla_power' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_connections'::text)),
  data.set_attribute_value(data.get_object_id('deal_droshalla_power' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_droshalla_power' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_droshalla_power' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_droshalla_power' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_droshalla_power", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_droshalla_power' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_droshalla_power' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_droshalla_power' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_droshalla_power1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_droshalla_power10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  
  --unnaming_blassing
insert into data.objects(code)
select 'deal_unnaming_blassing' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_unnaming_blassing' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_unnaming_blassing' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_unnaming_blassing' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_medicine'::text)),
  data.set_attribute_value(data.get_object_id('deal_unnaming_blassing' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_unnaming_blassing' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_unnaming_blassing' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_unnaming_blassing' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_unnaming_blassing", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_unnaming_blassing' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_unnaming_blassing' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_unnaming_blassing' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_unnaming_blassing10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  --bhara
insert into data.objects(code)
select 'deal_bhara' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_bhara' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_bhara' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_bhara' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_resources'::text)),
  data.set_attribute_value(data.get_object_id('deal_bhara' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_bhara' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_bhara' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_bhara' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_bhara", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_bhara' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_bhara' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_bhara' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_bhara1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_bhara2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_bhara3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_bhara4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_bhara5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_bhara6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_bhara7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_bhara8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_bhara9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_bhara10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_bhara10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
    -- antares_finance
insert into data.objects(code)
select 'deal_antares_finance' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_antares_finance' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_antares_finance' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_antares_finance' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_resources'::text)),
  data.set_attribute_value(data.get_object_id('deal_antares_finance' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_antares_finance' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_antares_finance' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_antares_finance' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_antares_finance", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_antares_finance' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_antares_finance' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_antares_finance' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_antares_finance1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_antares_finance2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_antares_finance3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_antares_finance4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_antares_finance5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_antares_finance6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_antares_finance7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_antares_finance8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_antares_finance9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_antares_finance10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_antares_finance10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
    -- marba
insert into data.objects(code)
select 'deal_marba' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_marba' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_marba' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_marba' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_connections'::text)),
  data.set_attribute_value(data.get_object_id('deal_marba' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_marba' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_marba' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_marba' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_marba", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_marba' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_marba' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_marba' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_marba1'), data.get_attribute_id('name'), null, to_jsonb('"Оружейные Рода Тавари"'::text));
  select data.set_attribute_value(data.get_object_id('deal_marba1'), data.get_attribute_id('description'), null, to_jsonb('"Оружейные Рода Тавари", орбитальные космоверфи "Hevaria", Толониус VII.'::text));
  select data.set_attribute_value(data.get_object_id('deal_marba1'), data.get_attribute_id('asset_name'), null, to_jsonb('"Оружейные Рода Тавари"'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_marba2'), data.get_attribute_id('name'), null, to_jsonb('"Оружейные верфи рода Рокко"'::text));
  select data.set_attribute_value(data.get_object_id('deal_marba2'), data.get_attribute_id('description'), null, to_jsonb('"Оружейные Рода Тавари", орбитальные космоверфи "Hevaria", Толониус VII.'::text));
  select data.set_attribute_value(data.get_object_id('deal_marba2'), data.get_attribute_id('asset_name'), null, to_jsonb('"Оружейные верфи рода Рокко"'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_marba3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_marba4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_marba5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_marba6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_marba7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_marba8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_marba9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_marba10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_marba10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
     -- mollari
insert into data.objects(code)
select 'deal_mollari' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_mollari' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_mollari' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_mollari' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_resources'::text)),
  data.set_attribute_value(data.get_object_id('deal_mollari' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_mollari' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_mollari' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_mollari' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_mollari", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_mollari' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_mollari' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_mollari' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_mollari1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mollari2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mollari3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mollari4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mollari5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mollari6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mollari7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mollari8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mollari9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_mollari10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_mollari10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
 -- makan
insert into data.objects(code)
select 'deal_makan' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_makan' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_makan' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_makan' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_connections'::text)),
  data.set_attribute_value(data.get_object_id('deal_makan' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_makan' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_makan' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_makan' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_makan", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_makan' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_makan' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_makan' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_makan1'), data.get_attribute_id('name'), null, to_jsonb('космоверфь "Крылья Г''Лана"'::text));
  select data.set_attribute_value(data.get_object_id('deal_makan1'), data.get_attribute_id('description'), null, to_jsonb('космоверфь "Крылья Г''Лана"'::text));
  select data.set_attribute_value(data.get_object_id('deal_makan1'), data.get_attribute_id('asset_name'), null, to_jsonb('космоверфь "Крылья Г''Лана"'::text));
  
  select data.set_attribute_value(data.get_object_id('deal_makan2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_makan3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_makan4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_makan5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_makan6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_makan7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_makan8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_makan9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_makan10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_makan10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  --masters
  insert into data.objects(code)
select 'deal_masters' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_masters' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_masters' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_masters' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_vpk'::text)),
  data.set_attribute_value(data.get_object_id('deal_masters' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_masters' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_masters' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_masters' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_masters", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_masters' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_masters' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_masters' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_masters1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_masters2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_masters3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_masters4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_masters5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_masters6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_masters7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_masters8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_masters9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_masters10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_masters10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
    --artalan
  insert into data.objects(code)
select 'deal_artalan' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_artalan' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_artalan' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_artalan' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_vpk'::text)),
  data.set_attribute_value(data.get_object_id('deal_artalan' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_artalan' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_artalan' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_artalan' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_artalan", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_artalan' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_artalan' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_artalan' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_artalan1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_artalan2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_artalan3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_artalan4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_artalan5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_artalan6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_artalan7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_artalan8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_artalan9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_artalan10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_artalan10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
      --psi_corps
  insert into data.objects(code)
select 'deal_psi_corps' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_psi_corps' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_psi_corps' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_psi_corps' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_medicine'::text)),
  data.set_attribute_value(data.get_object_id('deal_psi_corps' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_psi_corps' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_psi_corps' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_psi_corps' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_psi_corps", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_psi_corps' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_psi_corps' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_psi_corps' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_psi_corps1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_psi_corps2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_psi_corps3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_psi_corps4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_psi_corps5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_psi_corps6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_psi_corps7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_psi_corps8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_psi_corps9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_psi_corps10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_psi_corps10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
       --anklav_telepaths
  insert into data.objects(code)
select 'deal_anklav_telepaths' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_anklav_telepaths' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_anklav_telepaths' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_anklav_telepaths' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_medicine'::text)),
  data.set_attribute_value(data.get_object_id('deal_anklav_telepaths' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_anklav_telepaths' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_anklav_telepaths' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_anklav_telepaths' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_anklav_telepaths", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_anklav_telepaths' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_anklav_telepaths' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_anklav_telepaths' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_anklav_telepaths10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
   --guild_telepaths
  insert into data.objects(code)
select 'deal_guild_telepaths' || o1.* from generate_series(1, 10) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_guild_telepaths' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_guild_telepaths' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_guild_telepaths' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_medicine'::text)),
  data.set_attribute_value(data.get_object_id('deal_guild_telepaths' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_guild_telepaths' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_guild_telepaths' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_guild_telepaths' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_guild_telepaths", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_guild_telepaths' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_guild_telepaths' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_guild_telepaths' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_guild_telepaths10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');

-- an_lashok
    insert into data.objects(code)
select 'deal_an_lashok' || o1.* from generate_series(1, 10) o1(value);

  select
  data.set_attribute_value(data.get_object_id('deal_an_lashok' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_an_lashok' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_an_lashok' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector_vpk'::text)),
  data.set_attribute_value(data.get_object_id('deal_an_lashok' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_an_lashok' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_an_lashok' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_an_lashok' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_an_lashok", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_an_lashok' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_an_lashok' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"20.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_an_lashok' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

  select data.set_attribute_value(data.get_object_id('deal_an_lashok1'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok1'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok1'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_an_lashok2'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok2'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok2'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_an_lashok3'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok3'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok3'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_an_lashok4'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok4'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok4'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_an_lashok5'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok5'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok5'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_an_lashok6'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok6'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok6'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_an_lashok7'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok7'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok7'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_an_lashok8'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok8'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok8'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_an_lashok9'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok9'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok9'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');
  
  select data.set_attribute_value(data.get_object_id('deal_an_lashok10'), data.get_attribute_id('name'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok10'), data.get_attribute_id('description'), null, jsonb '"Разное имущество"');
  select data.set_attribute_value(data.get_object_id('deal_an_lashok10'), data.get_attribute_id('asset_name'), null, jsonb '"Разное имущество"');

/*select
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('name'), null, to_jsonb('Deal ' || o.value)),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('description'), null, to_jsonb('Описание сделки deal ' || o.value)),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('deal_sector'), null, to_jsonb('sector' || (o.value % 4 + 1))),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('asset_name'), null, to_jsonb('Актив сделки deal' || o.value)),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(o.value * 1000)),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(o.value * 100)),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(o.value * 10)),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation' || (o.value % 9) + 1 || '", "percent_asset": 80, "percent_income": 30, "deal_cost": 10000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('system_deal_participant2'), null, ('{"member" : "corporation' || ((o.value + 1) % 9 + 1) || '", "percent_asset": 20, "percent_income": 70, "deal_cost": 50000}')::jsonb)
from generate_series(1, 30) o(value);*/

/*select
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('system_deal_time'), null, to_jsonb('2259.02.23 15:' || (o.value + 10))),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('deal_time'), null, to_jsonb('2259.02.23 15:' || (o.value + 10))),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 10) o(value);

select
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('system_deal_time'), null, to_jsonb('2259.02.23 12:' || (o.value + 10))),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"draft"'),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('deal_author'), null, to_jsonb(data.get_object_id('person1')))
from generate_series(11, 20) o(value);

select
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('system_deal_time'), null, to_jsonb('2259.02.23 18:' || (o.value + 10))),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('deal_time'), null, to_jsonb('2259.02.23 15:' || (o.value + 10))),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('deal_cancel_time'), null, to_jsonb('2259.02.23 18:' || (o.value + 10))),
  data.set_attribute_value(data.get_object_id('deal' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"canceled"')
from generate_series(21, 30) o(value);*/


-- Пересчитывает капитализацию всех корпораций по текущим активным сделкам
CREATE OR REPLACE FUNCTION actions.calc_capitalizations()
  RETURNS void AS
$BODY$
declare
 v_corp_cap jsonb := jsonb '{}';
  v_corp text;
  v_deals jsonb;
  v_deal record;
  v_value jsonb;
  v_i integer;
  v_asset_cost integer;
  v_percent_asset integer;
  v_this_cap integer;
  v_corporation record;
  v_corporation_capitalization_attribute_id integer := data.get_attribute_id('corporation_capitalization');
begin
  for v_deal in (select oo.object_id 
                 from data.object_objects oo
                 where oo.parent_object_id = data.get_object_id('normal_deals')
                 and oo.object_id <> oo.parent_object_id) loop
    v_asset_cost := json.get_integer(data.get_attribute_value(v_deal.object_id, v_deal.object_id, data.get_attribute_id('asset_cost')));
    for v_i in 1..10 loop
      v_value := data.get_attribute_value(v_deal.object_id, v_deal.object_id, data.get_attribute_id('system_deal_participant' || v_i));
      if v_value is not null then
        v_corp := json.get_opt_string(v_value, null, 'member');
        v_percent_asset := json.get_opt_integer(v_value, 0, 'percent_asset');
        v_this_cap := json.get_opt_integer(v_corp_cap, 0, v_corp);
        v_corp_cap :=  jsonb_set(v_corp_cap, array_agg(v_corp), to_jsonb(v_this_cap + round(v_asset_cost * v_percent_asset / 100)));
      end if;
    end loop;       
  end loop;

  for v_corporation in (select key, value from jsonb_each(v_corp_cap)) loop
      perform data.set_attribute_value_if_changed(data.get_object_id(v_corporation.key), v_corporation_capitalization_attribute_id, null, v_corporation.value);
  end loop;

end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

select actions.calc_capitalizations();

select data.set_attribute_value(data.get_object_id('news1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news1'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news1'), data.get_attribute_id('news_title'), null, jsonb '"Эксклюзивный репортаж “Страх и террор на Вавилоне”"');
select data.set_attribute_value(data.get_object_id('news1'), data.get_attribute_id('name'), null, jsonb '"ISN: Эксклюзивный репортаж “Страх и террор на Вавилоне”"');
select data.set_attribute_value(data.get_object_id('news1'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news1'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.01.10 11:18"');
select data.set_attribute_value(data.get_object_id('news1'), data.get_attribute_id('news_time'), null, jsonb '"10.01.2258 11:18"');
select data.set_attribute_value(data.get_object_id('news1'), data.get_attribute_id('content'), null, jsonb '"Нам удалось получить комментарий от начальника медлаборатории №1 доктора Сьюзен Франклин по поводу покушения на посла Антареса. \"Нападавший явно знал что делал, сожжена часть позвоночного столба, изуродованы репродуктивные органы. Правда третий выстрел ему сбили, мозг не был задет, но имеющиеся повреждения несовместимы с жизнью. Я приказала подвергнуть тело посла криозаморозке, пока не умер мозг. Помочь ей могут разве что Ворлоны. Тело мы отправим на Антарес. Мы все любили посла Эллайну она была очень жизнерадостной...\" В этом месте доктор начала сморкаться и отключила связь. Наверное аллергия на журналистов.<br>Напоминаем, что нападение было совершено в Желтом секторе станции, сразу после того как посол Элайна сошла со своего корабля.<br>Сразу возникает несколько вопросов:<br>Как террорист попал в желтый сектор? У него должен быть пропуск, значит кто-то ему этот пропуск передал.<br>Версия о сообщниках подтверждается и тем, что он ждал посла возле ее корабля. Не имея доступа к информации из диспетчерской он не мог рассчитывать на успех, а значит в покушении задействован кто-то из персонала станции.<br>Нам удалось получить изображение оружия, которым пользовался террорист. Это не какая-то там стандартная полицейская или военная модель бластера. Наш эксперт с уверенностью заявляет, что это оружие эксклюзивной серии или даже сделанное на заказ. Определить по имеющемуся изображению производителя не представляется возможным.<br>И наконец - стало известно что арестованный откусил себе язык и захлебнулся собственной кровью. Как охрана камеры могла такое просмотреть?<br>Пропуск, информация из диспетчерской рубки, странное оруижие специально привезенное на Вавилон, таинственная смерть исполнителя... мы советуем Гарибальди повнимательней присмотреться к собственным служащим."');

select data.set_attribute_value(data.get_object_id('news2'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news2'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news2'), data.get_attribute_id('news_title'), null, jsonb '"Лига больше не хочет быть мальчиками для битья?"');
select data.set_attribute_value(data.get_object_id('news2'), data.get_attribute_id('name'), null, jsonb '"ISN: Лига больше не хочет быть мальчиками для битья?"');
select data.set_attribute_value(data.get_object_id('news2'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news2'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.02.20 21:32"');
select data.set_attribute_value(data.get_object_id('news2'), data.get_attribute_id('news_time'), null, jsonb '"20.02.2258 21:32"');
select data.set_attribute_value(data.get_object_id('news2'), data.get_attribute_id('content'), null, jsonb '"Что о себе воображают эти ксеносы? Их роль служить обновленному человечеству!<br>(Вставка « Драззийские ученые выяснили, что обычные серые мыши размножались бы гораздо быстрее, если бы им не мешали Драззийские ученые»)<br>Обещанная расшифровка речи главной зеленой ящерицы, и чувака, похожего на зомби из ретрофильмов.<br>Специально для передачи \"Наши маленькие Галактические друзья\". Только для удаленных колоний. Запрещено к показу в Солнечной системе.<br>Эта речь, которую Рааз Акри и Диргал Дарал Кэн произнесли вдвоем, на церемонии по поводу годовщины подписания Устава Лиги Неприсоединившихся Миров:<br>РА - Многие братья в Дрошалле, члены других сообществ Лиги спрашивают Совет Лиги, Зачем мы? Они спрашивают: что дальше? Они спрашивают: кто мы теперь? Что нам нужно? Мы с Диргалом ответим вам!<br>ДДК - Действительно, нас часто спрашивают, каковы перспективы нашего содружества? Что такое эта наша Лига Неприсоединившихся Миров сегодня? Что ж, у нас есть ответ.<br>РА - Лига это сильный равноправный союз Цивилизаций. Сильный потому, что каждый из нас предоставляет союзу свои сильные стороны, и готов прикрыть спину другу.<br>ДДК - Лига это новый член галактического сообщества, связанный тысячей нитей взаимных обязательств и услуг. Мы сильны единством.<br>РА - Но поняли ли все в галактике, что Лига изменилась? Что теперь Лига не потерпит отношения к себе, как к бедному родственнику, как к чему-то, с чем можно не считаться , не учитывать в раскладах пяти \"великих держав\"?<br>ДДК - Судя по последним событиям новое положение дел в галактике дошло еще не до всех. Что ж, если понадобится, мы можем привести в чувство слишком чванливых и укротить ретивых соседей.<br>РА - Еще недавно Земной Альянс считал себя вправе разговаривать с нами снисходительно, с позиции силы. Вспомните их \"Дипломатию канонерок\". Режим Нарна - захвативший планету члена Лиги Тучанк - надменно не учитывает наши интересы и считает что его корабли могут пересекать наши границы, не ставя в известность Совет Лиги, как будто мы псы, роющиеся на их помойках!<br>ДДК - Нас не пригласили в Консультативный Совет Ассамблеи, ясно дав понять, что галактический пирог уже поделен и место у стола заняли настоящие господа. Прикрываясь льстивыми словами о мире и согласии Земляне, Центавры, Нарн, Минбари и Ворлон видят в Лиге и других малых цивилизациях всего лишь клевретов-прислужников, ну, или восхищенных зрителей, которые молча должны внимать их мудрости!<br>РА - Что ж. Бюджет Лиги на сегодняшний день превосходит бюджет Нарна и Земного Альянса. Мы владеем большим количеством звездных систем, чем кто-либо, за исключением дряхлой Республики Центавр. Суммарная сила наших флотов не уступает остальным. Тем, кто привык видеть в нас мальчиков для битья, придется изменить свое поведения или мы заставим их сделать это!<br>ДДК - Мы дадим им возможность исправить несправедливость устройства ассамблеи. Дадим им шанс на извинения. А если нет, что ж, малые расы продолжают вливаться в Лигу.<br>Мы подождем."');

select data.set_attribute_value(data.get_object_id('news3'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news3'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news3'), data.get_attribute_id('news_title'), null, jsonb '"Выпуск новостей после инцидента на Каре"');
select data.set_attribute_value(data.get_object_id('news3'), data.get_attribute_id('name'), null, jsonb '"ISN: Выпуск новостей после инцидента на Каре"');
select data.set_attribute_value(data.get_object_id('news3'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news3'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.01.07 11:23"');
select data.set_attribute_value(data.get_object_id('news3'), data.get_attribute_id('news_time'), null, jsonb '"07.01.2258 11:23"');
select data.set_attribute_value(data.get_object_id('news3'), data.get_attribute_id('content'), null, jsonb '"Заседание Консультативного совета ассамблеи, посвященное кризису на Каре оказалось неожиданно бурным. Галактическое сообщество весьма серьезно встряхнуло.<br>Воспользовавшись тем, что Режим Нарна отправил свои флоты на помощь системе Кары, силы дома Фирра Республики Центавр захватили и удерживают систему Раггеш 3, ту самую систему Нарнов, которую они полгода назад отбили у захватчиков. Агрессивность Республики становится невыносимой, вспомним инцидент с уничтожением Центаврами 4-го и 5-го флотов Альянса четыре месяца назад, якобы в отместку за неспровоцированное нападение землян на планеты Центавров. Консультативный совет по предложению сенатора Семенова осудил агрессию центавра, но посол Центавра Лондо Маллари наложил вето на эту резолюцию Совета.<br>Ударный флот Бракири напал на Антарес 5 - колонию в системе Анатрес, на которой содержались опекаемые Антаресами Дилгары. Целью атаки были именно поселения дилгар на поверхности планеты. Антарес объявил об отражении атаки. Ведется подсчет жертв и убытков. Антаресы не предъявляли официальных претензий или обвинений цивилизации Бракири.<br>К новостям Альянса:<br>Во время ежегодного традиционного обращения президента Кейн к Сенату случился досадный технический сбой, прервавший передачу и задержавший обращение на два часа. Заканчивал обращение вице-президент Синклер Нейман, герой войны, герой недавних событий на Вавилоне 5.<br>Взрыв и пожар на верфях корпорации Рокетдайн унес жизни 32 человек, среди которых был гениальный инженер создатель \"Умной мины\", отец земного плазменного оружия, Рудольф Сикорски. На Проксиме 3 ему будет установлен памятник за счет колонии.<br>Сегодня пришло известие, что останки корпуса корабля-разведчика Персей, принадлежавшего корпорации IPX, обнаружены дрейфующими в гиперпространстве недалеко от звездных врат системы Сириус. Обнаружены мертвые тела, ведется идентификация останков. Есть подозрение, что корабль стал жертвой атаки флота Идиллии Икарры.<br>Пресслужба корпорации IPX разослала пресс релиз, о том что корпорация обратилась к правительству ЗА с официальной претензией и требованием выплаты убытков, понесенных корпорацией в связи с гибелью корабля Коперник. По словам члена совета директоров А. Зорг \"Этот чертов корабль стоил больше чем стоят все члены правительства, если даже продать их на органы с конфискацией имущества\". Корпорация не давала согласия на участие корабля в боевых действиях."');

select data.set_attribute_value(data.get_object_id('news4'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news4'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news4'), data.get_attribute_id('news_title'), null, jsonb '"Кризис в системе Кара успешно разрешен"');
select data.set_attribute_value(data.get_object_id('news4'), data.get_attribute_id('name'), null, jsonb '"ISN: Кризис в системе Кара успешно разрешен"');
select data.set_attribute_value(data.get_object_id('news4'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news4'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.01.06 11:28"');
select data.set_attribute_value(data.get_object_id('news4'), data.get_attribute_id('news_time'), null, jsonb '"06.01.2258 11:28"');
select data.set_attribute_value(data.get_object_id('news4'), data.get_attribute_id('content'), null, jsonb '"Кризис в системе Кара успешно разрешен. Тахионная связь восстановлена, приводной маяк, выключавшийся на несколько часов снова работает. Система доступна для посещения кораблей.<br>По непроверенным данным на систему напали Дилгары, умудрившиеся каким-то образом заблокировать маяк, что до сего времени считалось практически невозможным. Официальные лица Лиги и пресс служба Ассамблеи пока воздерживаются от комментариев. Систему конролирует миротворческий флот.<br><br>Нам стало известно, что в ходе спасательной миссии погиб уникальный корабль - монтажер зон перехода \"Коперник\" из серии \"Кортес\". Экипаж корабля составлял 328 человек. Ведутся спасательно-поисковые работы, однако надежды на спасение членов экипажа почти нет. Корабль был буквально разорван дилгарскими крейсерами, осуществля наводку миротворческого флота на систему Кара в условиях не работающего приводного маяка.<br>Теперь корпорация IPX обладает только двумя действующими кораблями этой серии. Акции корпорации упали на 10 пунктов.<br><br>К новостям Альянса:<br>На заводах корпорации Рокетдайн, на Проксиме 3 прогремел взрыв, нанесший масштабные разрушения и ставший причиной возникновения сильного пожара. Ведутся работы по ликвидации последствий аварии. Корпорация будет вынуждена перенести сроки сдачи в госприемку нового ударного соединения разрушителей типа Омега, из-за этой катастрофы.<br><br>На выставку промышленных товаров в Рэд-Сити ожидалось прибытие президента Кейн. Однако в последний момент визит был отменен и вместо Кейн хозяева выставки - высший менеджмент Марс Индастриз, и сенатор Семенов были вынуждены принимать сенатора Моргана. Наши политические аналитики воспринимают этот жест президента Кейн как намек на то, что экономическая политика Земного Альянса по отношению к Марсианской колонии в ближайшее время не изменится."');

select data.set_attribute_value(data.get_object_id('news5'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news5'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news5'), data.get_attribute_id('news_title'), null, jsonb '"Минбарцы не убивают друг друга?"');
select data.set_attribute_value(data.get_object_id('news5'), data.get_attribute_id('name'), null, jsonb '"ISN: Минбарцы не убивают друг друга?"');
select data.set_attribute_value(data.get_object_id('news5'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news5'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.02.03 16:12"');
select data.set_attribute_value(data.get_object_id('news5'), data.get_attribute_id('news_time'), null, jsonb '"03.02.2258 16:12"');
select data.set_attribute_value(data.get_object_id('news5'), data.get_attribute_id('content'), null, jsonb '"Наши гребнистые лысые друзья вновь продемонстрировали галактике что они являются нестерпимыми лицемерами, и, кроме того лжецами.<br><br>Почему лицемерами?<br>Вчера на станции Вавилон 5, минбарец из касты воинов, напал на бывшего посла Федерации Минбара Игрейн. Только благодаря оперативной (к нашему удивлению) работе сотрудников СБ станции, возглавляемой мистером Гарибальди, удалось предотвратить убийство. \"Воин\", напавший на беззащитную женщину, был вооружен бластером, что не оставляет сомнений в серьезности его намерений. Свидетели слышали как он выносил своей будущей жертве \"приговор\". Он говорил на интерлингве, что у минбарцев является высшей степенью неуважения к соплеменнику.<br><br>Почему лживыми?<br>Минбарцы гордятся ем что не лгут и тем что не убивают минбарцев. Поскольку второе утверждение оказалось ложным, первое тоже не может быть правдой. Логика - изобретение еврея Гераклита, но его открытие до сих пор помогает нам разбираться в каком мире мы живем.<br><br>Преступник находится в следственном изоляторе. Нам пока не известно его имя, но он член того же самого клана, во главе которого стоит посол Нерун, новый член Консультативного Совета ассамблеи."');

select data.set_attribute_value(data.get_object_id('news6'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news6'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news6'), data.get_attribute_id('news_title'), null, jsonb '"Несостоявшееся интервью с Хейгом"');
select data.set_attribute_value(data.get_object_id('news6'), data.get_attribute_id('name'), null, jsonb '"ISN: Несостоявшееся интервью с Хейгом"');
select data.set_attribute_value(data.get_object_id('news6'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news6'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.02.14 13:16"');
select data.set_attribute_value(data.get_object_id('news6'), data.get_attribute_id('news_time'), null, jsonb '"14.02.2258 13:16"');
select data.set_attribute_value(data.get_object_id('news6'), data.get_attribute_id('content'), null, jsonb '"Наш корреспондент взял интервью у Командующего Звездным Флотом Вооруженных Сил Земного Альянса, члена Обьединенного комитета начальников штабов, адмирала Звездного Флота Вильяма Хейга. Адмирал Хейг подтвердил нам, что слухи об его уходе в отставку не соответствуют действительности. На него действительно оказывают давление определенные политические круги, однако он не видит причин для подобных действий. Хейг заявил: \"Звездный Флот является не только гарантом безопасности Альянса в Галактике, но и гарантом внутренней стабильности Альянса. Путь те, кто сейчас разыгрывают карту сепаратизма, или думают что могут под прикрытием патриотического дискурса незаконно прорваться к власти, отстранив Президента Кейн, хорошенько подумают, прежде чем начать действовать.\"<br>Напоминаем нашим читателям, что, за последние четыре месяца уже три из пяти командующих видами вооруженных сил ушли в отставку по тем или иным причинам.<br>Генерал Франклин был назначен военным губернатором Марса, Вице-Адмирал Александер, бывший командующий инженерным обеспечением, назначен командующим штаба Обороны Земли, Генерал Власов - бывший командующий научно-исследовательского штаба - ушел в отставку по состоянию здоровья.<br>Генерал Эрнст Кальтенбруннер - командующий штаба объединенной разведки -креатура кейн, заменил Джордана Квина всего полгода назад.<br>Все новые начальники штабов проходили службу в Звездном Флоте или Службе Безопасности Альянса, и так или иначе являются бывшими сослуживцами или близкими знакомыми Вице-Президента Синклера Неймана.<br>Вспоминая прошлогодние события на станции Вавилон-5, наш корреспондент наткнулся на описание \"Пророчества Мары\" - посла Республики Центавр. Посол в состоянии транса выкрикнула, что Нейман будет казнен за измену. Также она предсказала смерть Рикардо Дель Густо. Это пророчество уже исполнилось.<br><br>СРОЧНАЯ НОВОСТЬ!<br>В ходе подготовки этого выпуска нам стало известно, что адмирал Хейг временно остранен от командования и дает показания следственной комиссии Сената по Проксимскому Инциденту. Ему предъявлено обвинение в халатности, пренебрежении воинским долгом, потере управления войсками. Такие же обвинения комиссия собирается предъявить контр-адмиралу Ли Вонгу, сразу после окончания Конгресса. Мы будем следить за развитием событий"');

select data.set_attribute_value(data.get_object_id('news7'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news7'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news7'), data.get_attribute_id('news_title'), null, jsonb '"Взрыв возле фонда \"Марсианский прогресс\""');
select data.set_attribute_value(data.get_object_id('news7'), data.get_attribute_id('name'), null, jsonb '"ISN: Взрыв возле фонда \"Марсианский прогресс\""');
select data.set_attribute_value(data.get_object_id('news7'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news7'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.01.11 15:55"');
select data.set_attribute_value(data.get_object_id('news7'), data.get_attribute_id('news_time'), null, jsonb '"11.01.2258 15:55"');
select data.set_attribute_value(data.get_object_id('news7'), data.get_attribute_id('content'), null, jsonb '"В результате взрыва бомбы возле фонда \"марсианский прогресс\" несколько часов назад, погибла семья вице-адмирала Вонга, посетившая фонд в рамках организации совместной для Проксимы и Марса гуманитарной программы, по развитию образовательных учреждений.<br>Приносим Ли Вонгу свои искренние соболезнования, в связи с гибелью жены и дочери. За жизнь Су Вонга, сына адмирала сейчас борются сотрудники медицинской службы главного медицинского центра Capital One.<br>Новый советник по общим вопросам Вице-Президента Земного Альянса, Неймана, Мордехай Коэн приступил к работе. Напомним что до недавнего времени эту должность занимал Виктор Франклин, который ушел в отставку по состоянию здоровья.<br>Экспертный доклад о гибели корабля Персей, который, как мы помним пропал в 2256 году, будет опубликован в нашем сетевом издании. Комиссия уже заканчивает свою работу, по предварительным выводам экспертов корабль погиб в результате несчастного случая, вызванного отказом двигательных систем во время вортекс-прыжка. Экипаж корабля из категории \"пропавших без вести\" переходит в категорию \"погибшие\". Некрологи будут опубликованы в нашем сетевом издании. Для корпорации IPX наступают тяжелые времена, в последнее время слишком много катастроф случилось с их кораблями.<br>Президент Кейн пообещала что первая эскадрилья новейших истребителей \"Тандерболт\" выпущенная заводами \"Митчел-Хьюдайн\" будет передана станции Вавилон 5, для замены устаревших Фурий, во время визита президента на станцию, который состоится уже через 42 дня. Одновременно эскадрилья будет выполнять функции эскорта кортежа Президента.<br>В следующем выпуске. Эксклюзивный перевод совместного заявлению Кроны Бракоса и Флаг-Лидера Галотты Акри, прошедшего только по внутренним каналам Лиги."');

select data.set_attribute_value(data.get_object_id('news8'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news8'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news8'), data.get_attribute_id('news_title'), null, jsonb '"ИЗ БЛОГА В ЭФИР. Семенофф."');
select data.set_attribute_value(data.get_object_id('news8'), data.get_attribute_id('name'), null, jsonb '"ISN: ИЗ БЛОГА В ЭФИР. Семенофф."');
select data.set_attribute_value(data.get_object_id('news8'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news8'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.02.19 03:44"');
select data.set_attribute_value(data.get_object_id('news8'), data.get_attribute_id('news_time'), null, jsonb '"19.02.2258 03:44"');
select data.set_attribute_value(data.get_object_id('news8'), data.get_attribute_id('content'), null, jsonb '"О терроре<br><br>У каждого из нас, из числа тех, кто борется за права и свободы жителей Марса, случается его первая «бомба». Она случается множеством способов и форм. Иногда ты смотришь новости, следишь за тем, как спасатели разбирают завалы, и понимаешь, что это то кафе, в котором этим утром ты пил кофе. Порой кто-то из твоих друзей, начитавшись Бакунина и Лебовского, мастерит что-то на своей кухне, и за ним приезжает группа захвата… Или всё те же спасатели, чтобы вытащить людей из руин жилого блока, где твой знакомый/друг/подруга допустили неосторожность. «Бомба» многолика, молодость каждого марсианина проходит под мелодию взрывов. Самое обидное, что никто никогда не задает вопроса «Зачем это?». И в этот момент каждый из нас должен сделать выбор – кто он? Человек или мразь? Мразь не способная к сочувствию, не ценящая жизнь своих друзей, соседей, соотечественников, не способная думать и искать другие приемлемые пути решения.<br>Я помню первые взрывы моего поколения. Жестянка, набитая болтами и взрывчаткой, рванула в холле Театра Сидонии, где давала представление несравненная Мари Дюваль. На представление собрались офицеры вооруженных сил и флота, чиновники колониальной администрации, бизнесмены, связанные с земным бизнесом и сотни обычных посетителей. «Бомба» рванула чуть раньше, чем предполагали люди, её установившие, погибло два десятка человек, и я помнил кадры, на которых молодой офицер ЗА, весь в крови своего товарища, которому повезло меньше, не стесняясь плакал на камеру. Спасателей было мало, никто толком не знал, что делать, полицейские давали противоречивые команды… Да, это был ад. Вчера, глядя на взрыв, лишивший семьи адмирала Вонга, я поразился прогрессу. Теперь никто не суетится, спасатели работают, как по нотам, им помогают какие-то специальные машины… Это по-прежнему ад, но ад организованный, ад, в котором царит разум. И, самое главное. В этом аду больше никто не плачет.<br>Но что-то в этом аду (и не важно, организованный он, или нет) остается неизменным. Никто так и не задает вопроса «Зачем это?». Люди, которые не хотят, или не могут думать, развиваться, сосуществовать в обществе, решают, что имеют право разрушать и лишать жизни других, просто за то, что многие не согласны с их позицией. Да диалог это сложно, но террор это тупик. Террор порождает только насилие, страх и гнев.<br>К чему эти длинные вступления? Десятилетиями я боролся против террора. Я рассказывал о его безнравственности, я приводил примеры из истории, я как мог подавлял и противостоял тем кто не умеет иначе, кроме как «бомбой». Они называли меня шакалом и земной подстилкой. И я наконец понял – да я просто обращался не с теми аргументами! Многим из них безразлична мораль, у них нет сантиментов. Значит, я сейчас попробую достучаться хотя бы до остатков их разума.<br>За десятилетия вялотекущего террора они просто обозлили население, и закалили нашего врага. Сейчас борьба с терроризмом – это крупная индустрия на Земле, с миллиардными оборотами. Это огромный комплекс с тысячами прекрасно подготовленных людей, с прикормленными и приученными к нужным фразам СМИ, с поддержкой в Сенате и среди населения Земли. Поймите простую истину. Наш путь освобождения не лежит в военной плоскости, что Земля демонстрировала нам в Войне Каналов или Минбарском кризисе. Имея на планете довольно небольшой процент коренного населения, нельзя всерьез рассчитывать на противостояние закаленной армии ЗА. Мы можем победить только в одном случае: если земное общественное мнение примет нашу сторону. Сейчас, благодаря «террору» мы просто огромный полигон и место, где «наши парни сражаются с сепаратизмом». Земля ведет грамотную кадровую политику, и плачущий офицер превращается через много лет в генерала Франклина. Надеюсь, никому не надо напоминать, о ком идет речь?<br>Наша задача – сделать так, чтобы земляне сочувствовали нам, а не карателям. Когда мы завоюем их сердца, вопрос увеличения наших свобод будет техническим, Сенаторы регионов Земли будут голосовать за нас, вопреки воле Администрации и военных просто потому, что хотят быть переизбраны. Простой метод, правда? Нет, конечно же не простой, и он потребует массы усилий. Одно из этих усилий, и основное – завязать с террором. Не надо поставлять подходящую картинку для земной пропаганды. Не надо бессмысленной крови, не надо бессмысленных «бомб», не надо создавать «ад». Иначе и через сотню лет наши предки будут продолжать эту дискуссию о методах борьбы, бессмысленную, как попытка найти закономерности в рисунках несуществующих марсианских каналов и это самый оптимистичный вариант, в худшем случае не будет уже ничего.<br>Я искренне сочувствую адмиралу Вонгу, я сочувствую всем тем, кто пострадал от бессмысленного и глупого террора. Я просто хочу напомнить всем, что на Марсе, до сих пор большинство населения – это люди, а мразей вставших на путь террора – единицы.<br>Игорь Семенов, Сенатор от Марсианского Консорциума, заметка в блоге от 19 декабря 2058 года."');

select data.set_attribute_value(data.get_object_id('news9'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news9'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news9'), data.get_attribute_id('news_title'), null, jsonb '"Интервью с Адрианом Зоргом"');
select data.set_attribute_value(data.get_object_id('news9'), data.get_attribute_id('name'), null, jsonb '"ISN: Интервью с Адрианом Зоргом"');
select data.set_attribute_value(data.get_object_id('news9'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news9'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.02.18 02:13"');
select data.set_attribute_value(data.get_object_id('news9'), data.get_attribute_id('news_time'), null, jsonb '"18.02.2258 02:13"');
select data.set_attribute_value(data.get_object_id('news9'), data.get_attribute_id('content'), null, jsonb '"Интервью с Адрианом Зоргом, взятое нашим корреспондентом, после гибели космического корабля «Коперник».<br><br>Ж: Адриан, расскажите подробней о сложившейся ситуации.<br>А: Как один из ведущих специалистов по проблемам гиперкосмоса и тахионной передачи данных, я уверенно заявляю, что научная миссия, возложенная на исследовательские корабли «Коперник», «Тихо Брааге» и «Кеплер» чрезвычайно важна для современного общества. Задачи решаемые учеными, находящимися на борту этих кораблей, помогут, в ближайшем будущем, сделать решительный шаг вперед всему человечеству.<br>Ж: Но теперь «Коперник» погиб.<br>А: Да, это очень печальный факт.<br>Ж: И у корпорации IPX возникли финансовые проблемы?<br>А: Я бы не называл это проблемами. Шумиха по этому поводу, раздутая нерадивыми журналистами, выгодна конкурентам корпорации вот они и нашли повод. На самом деле это всего лишь сезонные колебания рынка.<br>Ж: Вернемся к науке, что же теперь будет с исследованиями?<br>А: Исследования должны и будут продолжены. Необходимо срочно восстановить исследовательские работы. А для этого необходим новый корабль.<br>Напомню, что по время своей гибели «Коперник» был передан под прямое управление Ассамблеи и Сената и полностью подчинялся их приказам. При этом экипаж «Коперника» ценой своей гибели спас не одну сотню миллионов жизней.<br>Я призываю Сенат, Ассамблею и лично президента Кейн обеспечить финансирование постройки, корпорацией IPX, нового исследовательского корабля.<br>А также помочь корпорации с выплатой компенсаций семьям погибших."');

select data.set_attribute_value(data.get_object_id('news10'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news10'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news10'), data.get_attribute_id('news_title'), null, jsonb '"Чума на Марсе"');
select data.set_attribute_value(data.get_object_id('news10'), data.get_attribute_id('name'), null, jsonb '"ISN: Чума на Марсе"');
select data.set_attribute_value(data.get_object_id('news10'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news10'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.02.21 22:40"');
select data.set_attribute_value(data.get_object_id('news10'), data.get_attribute_id('news_time'), null, jsonb '"21.02.2258 22:40"');
select data.set_attribute_value(data.get_object_id('news10'), data.get_attribute_id('content'), null, jsonb '"Как стало известно редакции нашего издания, Ричард Франклин, военный губернатор Марса, известный всему Альянсу своей жесткой политикой и неукоснительным следованием акту Раша, болен, и болен ни чем иным как скоротечной формой дилгарской чумы.<br>Это уже второй высокопоставленный чиновник Земного Альянса, который заразился этой болезнью. Первым был Рикардо дель Густо директор корпуса-пси, ренегат, вдребезги разбивший хрупкий мир между телепатами и людьми. и скончавшийся от этого заболевания восемь месяцев назад в Женеве.<br>Источник, пожелавший остаться анонимным, также посчитал своим гражданским долгом сообщить о фальсификации числа заболевших в официальных отчетах. Самая сложная ситуация складывается в колониях, не обеспеченных современным медицинским оборудованием.<br>Информация с далеких миров поступает скудная и прошедшая цензуру, но уже есть достаточно оснований для того, чтобы прогнозировать самые ужасные варианты развития событий. Генерал Франклин, как известно, долгое время прожил на Марсе, не покидая даже Солнечной системы.<br>Эти факты заставляют задуматься – так ли уж далека от нас угроза пандемии? Надеемся, что выступление председателя комитета по здравоохранению Акио Хитоши, которое состоится на заседании Конгресса, внесет больше ясности.<br>Начнется заседание уже через два дня на станции Вавилон-5. Нам остается ждать и уповать на то, что слова самого мудрого и влиятельного сенатора помогут человечеству понять истинное положение дел."');

select data.set_attribute_value(data.get_object_id('news11'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news11'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news11'), data.get_attribute_id('news_title'), null, jsonb '"Два покушения, одно обострение и одно поглощение"');
select data.set_attribute_value(data.get_object_id('news11'), data.get_attribute_id('name'), null, jsonb '"ISN: Два покушения, одно обострение и одно поглощение"');
select data.set_attribute_value(data.get_object_id('news11'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news11'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.01.09 19:10"');
select data.set_attribute_value(data.get_object_id('news11'), data.get_attribute_id('news_time'), null, jsonb '"09.01.2258 19:10"');
select data.set_attribute_value(data.get_object_id('news11'), data.get_attribute_id('content'), null, jsonb '"Сегодня станция Вавилон снова стала центром дипломатического скандала. На посла Антареса Мать Эллайну напал экстремист из дилгар, все еще содержащихся на станции как на пересылочном пункте. С криком \"Мой народ никогда не будет твоим рабом\" он трижды выстрелил в посла из бластера.<br>Тело Матери Элайны было увезено работниками медицинской службы Вавилона. Убийца задержан. Никаких официальных комментариев пока не поступало.<br>Редакция считает, что деяния дилгар переполняют чашу терпения галактического сообщества, и народ этот подлежит полному истреблению.<br>Печально, что новый начальник СБ станции господин Гарибальди начинает свою работу с такого явного провала его службы.<br><br>Лига Неприсоединившихся миров сегодня официально заявила, что шестой ударный флот Режима Нарна, принимавший участие в спасательной операции в секторе Кары не будет пропущен в сторону Раггеш 3, и не может следовать на Нарн через системы принадлежащие Лиге без деактивации всех систем вооружения флота. Флот заблокирован в система Кары, экипажи временно интернированы. Комментарий флаг лидера Галотты Рааза Акри \"Никто не удерживает экипажи против их воли. Мы готовы осуществить их доставку на Нарн на гражданских кораблях, однако пока сохраняется надежда договориться по выводу флота из принадлежащих Лиге систем, экипажи остаются на месте чтобы управлять кораблями. Это решение К Хари, а не наше решение\".<br>Насколько известно редакции ИСН - Шестой Ударный одно из самых боеспособных подразделений космофлота Режима Нарна.<br><br>Со станции отозван посол НаГхат, инициировавший экспедицию Шестого флота, правительство Режима Нарна уже опубликовало заявление о лишении его статуса посла.<br><br>К новостям альянса:<br>Сегодня в Capital One на сенатора Игоря Семеноффа было совершено покушение. Взорвался автомобиль припаркованный рядом со зданием Фонда \"Марсианский Прогресс\", во время визита сенатора. Ответственность за покушение взяла на себя радикальная группировка \"Свободный Марс\". При взрыве пострадало и пропало без вести более 250 человек. Повреждены несущие конструкции купола Capital One. Утечку атмосферы ликвидировали в течении трех часов. Убытки оцениваются в 40 000 000 кредитов. Сенатор помещен в центральный больничный комплекс Capital One, врачи уверяют что его жизнь вне опасности. Туда же отвозят всех пострадавших, извлеченных из-под развалин.<br><br>Президент Кейн посетила сегодня Религиозный Конгресс земных конфессий. Это мероприятие было вычеркнуто из списков Серого Дома около месяца назад, однако Президент нашла в своем расписании время для последней кучки маразматиков Земного Альянса.<br><br>Корпорация IPX выиграла торги за контрольный пакет акций \"Митчел-Хьюдайн\" у корпорации Рокет-Дайн. Теперь знаменитые Фурии, Авроры и новейшие Тандерболты будут производиться под эгидой IPX, а Рокет-Дайн остается только облизнуться, с чем мы их и поздравляем."');

select data.set_attribute_value(data.get_object_id('news12'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news12'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news12'), data.get_attribute_id('news_title'), null, jsonb '"Черновики воспоминаний Джона Моргана \"Подруги дней моих суровых\""');
select data.set_attribute_value(data.get_object_id('news12'), data.get_attribute_id('name'), null, jsonb '"ISN: Черновики воспоминаний Джона Моргана \"Подруги дней моих суровых\""');
select data.set_attribute_value(data.get_object_id('news12'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news12'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.02.19 01:14"');
select data.set_attribute_value(data.get_object_id('news12'), data.get_attribute_id('news_time'), null, jsonb '"19.02.2258 01:14"');
select data.set_attribute_value(data.get_object_id('news12'), data.get_attribute_id('content'), null, jsonb '"Черновики воспоминаний Джона Моргана \"Подруги дней моих суровых\", слитые в сеть Стеллар-ком, райтером, нанятым Морганом, после того как сенатор попытался заставить его работать за еду.<br>Автор А. Финогенов. Авторский стиль и орфография почти сохранены:<br><br>Сенатор расскажите немного о себе:<br><br>Я родился в семье Морган в новом Иерусалиме в 2218 году на территории Еврейского консорциума. В силу того, что в свое время произошло слияние Морган Индастриал и IPX в результате чего моей семье достался крупный пакет акций IPX.<br>Моя карьера в политике началась сразу после получения мною степени доктора экономических наук Оксфордовского университета. Совет директоров корпорации в тот момент решил, что им нужен сенатор, который будет лоббировать их интересы. По-первости я, как молодой политик, слабо понимал, что происходит, но честно исполнял свои обязанности члена партии корпоратов. До войны я в общем-то этим и занимался. Однако мое общение с финансами на ты, заметила Мери Кейн. Сказать честно это, пожалуй, самое лучшая встреча моей жизни. Мери научила меня всему, что я знаю о политике. Это человек удивительной энергии. Жизнь бьет в ней фонтаном, все к чему она прикасается, становится лучше. Итак я вошёл в лучшую политическую команду. Параллельно с политической карьерой мне приходилось много работать в банковском секторе и на рынке ценных бумаг. Так я имею отношение к правлению большинства крупных банков и имею пакеты акций большинства крупных корпораций. Безусловно жемчужиной моей коллекции акций является пакет ценных бумаг IPX.<br><br>Сенатор у вас есть слава человека, недолюбливающего военных и даже более того часть ваших предыдущих высказываний некоторые мои коллеги склонны интерпретировать, ваше отношение к военным как к тупой серой массе. Так ли это?<br><br>Вы знаете, это довольно сложный вопрос и на него у меня нет однозначного ответа. Если вы не против, то я пожалуй расскажу историю своей службы в армии, а ваши читатели сами сделают из этого свои выводы<br>Началось все вот так во время минбарской войны был мобилизован. Прервав свои полномочия сенатора ЗА я обратился в ВС и получил чин Капитана и должность аналитика в штабе полковника Франклина.<br>Там я познакомился с молодым начинающим аналитиком моим коллегой, Трампом и молодым лейтенантом командиром поста наблюдения на фрегате «Филактет» Емельяненко.<br>Шла напряжённая подготовка к обороне Проксимы. В какой то момент Трамп предоставил альтернативный вариант защиты Проксимы.<br>Франклин, будучи идиотом, отмахнулся от Трампа со словами «мальчик что ты знаешь про войну». Тогда Трамп отправил свой план Адмиралу Вонгу и попросил меня представить план сенату.<br>Вонг, будучи адмиралом флота, не был готов мириться с тем, что в плане Трампа флоту отводилась второстепенная и вспомогательная роль. Встав на сторону своего тупого подчиненного и проявив тем самым недальновидность, он проигнорировал рекомендации Трампа.<br>Франклин же, будучи дурацким солдафоном, приказал арестовать Трампа и перевел меня на корабль РЭБ «Инженер Попов» старпомом.<br>Как словом так и делом началась битва. Как нам известно из достоверных источников при обороне Проксимы, что-то пошло не так с первой же секунды. «Гениальный» не побоюсь этого слова план ОКНШ летел ко всем чертям со скоростью выстрела ионного излучателя. Не прошло и получаса как коварные Минбари забывшие, что маневр - это наше превосходство, а не их, и воюющие с Вонгом нечестно, гоняли его ссаными тряпками по всей системе.<br>В этот прекрасный момент дошла очередь и до моего гибрида консервной банки с тазом. Первый же залп минбарского истребителя – «Ниала» - отправил изучать глубокий космос борт и половину экипажа, чуда земной инженерии с горделивым названием «Инженер Попов».<br>В недобровольные исследователи космоса без скафандра, минбарцами, был записан и командир моего корабля. Мне ничего не оставалось, кроме как стать главным. Не сказать, что это был предел моих мечт о карьерном росте, ну то есть рост-то налицо, но кресло главы сенатского комитета мне грело душу сильно больше. Однако делать нечего.<br>Как говорили мои предки, картина маслом. Начальник соединения Франклин - горделивый осел, да и до него далеко. С начальником обороны Ли Вонгом связи нет, и даже если ее восстановить, то толку от этого мало, он просто тупой, в медицинском смысле этого слова.<br>На Проксиму валится минбарский десант, как говно из рога изобилия. Узловые точки обороны отсутствуют, зато присутствуют окопы предполагаемой линии обороны, жаль только то, что противник кидает десант в обход данной линии. Франклин ведь забыл минбарцам сообщить куда по уставу десант надо выкидывать, а они земной устав не читали. Дикари-с.<br>Присутствие флота в моей зоне видимости обозначается группой из шести разрушителей класса Омега, четвертью звена истребителей и гордым тазиком вашего покорного слуги, да и вся эта трихомудь не разваливается только потому, что ее чайки обосрали.<br>Минбарцы перестраивают, вне зоны нашей досягаемости, свою малую атакующую группу: 6 ударных крейсеров \"Шарлин\", прикрытых каждый своим звеном Ниалов.<br>Компьютер выдает расчетное время боя 1,45 минуты плюс 3 минуты на перестроение и 10 минут на вход в зону контакта при наших активных маневрах.<br>Ну надо сказать, к чести этого идиота Франклина, он хоть приказ о эвакуации с планеты отдал.<br>Этот торжественный момент, полагалось закончить пафосной, геройской, но абсолютно бесполезной смертью экипажей 6 разрушителей, вписав имена кораблей «Алкамена», «Адонис», «Антей», «Апполон», «Агрей» и «Аластор» в героическую историю ЗА. Так же как в свое время в героическую историю России были вписаны «Варяг» и «Кореец».<br>Я взял командование на себя. Правда стоит уточнить, что командовал я от имени Ли Вонга, обосновывая это тем, что на моей лохани есть оборудование способное связаться с ним, но в связи с тем, что тазик слегонца разваливается, транслировать я его могу только своим голосом. Первым и единственным моим приказом стал приказ об отступлении. Я до сих пор гожусь своим решением - мне удалось спасти тысячи жизней, однако каково же было мое удивление, когда Франклин и Вонг не только не сказали мне спасибо, но один из них отдал меня под трибунал. Франклин, будучи председателем данного трибунала отправил меня в инженерный дисбат. Там я и докручивал гайки на станциях ПКО в своем оранжевом камбезике до конца своей военной карьеры.<br>Сторонникам распространенного мнения, о том, что дисбатом он меня спас от расстрела, хочу напомнить, что на тот момент я был, хоть и с приостановленными полномочиями но все же, сенатором, и Франклина от этого факта просто кипятком ссал, в противном случае этот ура-военный с удовольствием пустил бы мне пулю в лоб.<br>При этом все-таки я не стал бы утверждать, что все военные - идиоты. Во-первых, как мы знаем у нас множество действительно талантливых офицеров, заслуженно называемых героями ЗА так, например, командующий Хейг. Во-вторых, есть множество генералов, которые несмотря на чудовищные потери и роковые ошибки приобрели необходимый опыт и отстояли Альянс в тяжёлой борьбе, например, адмирал Вонг. Ну и в-третьих флот и армия — это отражение общества - там большое количество талантливых и профессиональных людей и у меня достаточное количество друзей служащих в вооруженных силах.<br>Есть еще такой интересный факт, что, не смотря на все потуги Франклина обвинить меня в неудачах обороны Проксимы, я получал много писем в поддержку от офицеров флота разного уровня. Я до сих пор являюсь, членом флотского братства, к которому относятся на равных и с уважением другие члены, несмотря на то что уволен я был в должности младшего матроса.<br><br>Сенатор вы зарекомендовали себя как принципиальный и честный политик. Зачастую это не очень удобная для политика позиция. Как вам удаётся всегда держаться в рамках договоренностей.<br><br>На самом деле действительно достаточно сложно придерживаться достигнутых договоренностей и не нарушать данных слов. Особенно если обстоятельства внезапно изменились или вскрылись ранее не известные факты. Однако при этом каждый политик должен четко осознавать, что репутация — это его единственный капитал растратить который очень просто, а вот приобретать нужно годами. При этом репутация местами может помочь действительно сильно. Я не могу припомнить, когда я в последний раз нарушал данное мною слово и именно поэтому мои партнеры мне доверяют.<br><br>Господин Морган, раз уж мы говорим о принципиальности, может вы объясните почему вы так стараетесь, чтобы ваш комитет приобрел контрольный пакет акций всех крупных корпораций. Вы даже подготовили законопроект, по которому все корпорации с капитализацией больше 10 млрд кредитов должны добровольно передать 21% акций в распоряжение вашего комитета (КРЭФ, прим. редактора). Зачем вам это?<br><br>Ответ на этот вопрос и сложный, и простой одновременно. Я бы хотел вам рассказать с чего все началось. Как вы знаете в нашей истории случаются трагические моменты. Мой рассказ начнется именно с такого момента известного всем как восстание на ИО и его дальнейшее кровавое подавление. Дело в том, что по результату данного восстания было назначено расследование. Расследование было поручено сенатской комиссии под руководством сенатора Луиса Сантъяго. В комиссию вошёл и ваш покорный слуга, как представитель финансового комитета сената. Все собранные факты вели к тому, что корпорация Марс Индастрис неоднократно нарушала права человека и трудовое законодательство. Семенов настаивал на том факте, что необходимо дать возможность оправдаться. В качестве возможности оправдаться Семенов предложил провести ПСИ сканирование господину и госпоже Мюллер. Комиссия проголосовала не равномерно, но большинство приняло предложение Семенова. На процедуру был назначен опытный телепат, ныне герой ЗА посмертно, Дельгусто. К сожалению, со сканированием, что-то пошло не так и это привело к серьёзной семейной драме Мюллеров. Слава богу, хоть почти все живы остались. Господин Мюллер-младший занял должность главы корпорации. И для предотвращения подобных нарушений корпорации передал 21% акций в управление сенатскому финансовому комитету.<br>Надо сказать, что комитет не злоупотреблял своими возможностями, но имея блокирующий пакет, отменил более 50 решений корпорации, направленных на извлечение прибыли, за счет ухудшения уровня жизни сотрудников. Отсюда можно сделать простой вывод если корпорации передадут свои 21% акций сенату или еще лучше в администрацию президента -все выиграют. Граждане получат контролируемые государством условия жизни, государство снимет радикальную напряжённость у населения, а члены советов директоров корпораций уверенность в том, что с их семьями не произойдет того же несчастья, что и с Мюлерами.<br><br>Сенатор вы упомянули, что знакомы с господином Емельяненко, так же как известно, что ваш друг и коллега господин Трамп, как известно, вел избирательную компанию того же Емельяненко. Изначально никто не верил в успех этой компании. Скажите поддерживали ли вы эту компанию, верили ли вы в ее успех?<br><br>С Емельяненко я познакомился еще в студенческие годы и у нас сразу завязалась дружба. Он так же, как и я воевал при обороне Проксимы. И как я уже говорил, я спас его, как и тысячи других членов экипажей кораьлей. И думаю, он помнит об этом. Мы с ним поддерживаем довольно плотные дружеские отношения, но к моему сожалению, с тех пор как Мери стала президентом, работы только прибавилось. Как следствие, мне банально не хватает времени на общение с друзьями. Я как могу, стараюсь поддерживать нашу дружбу, но, к моему сожалению, не всегда это получается. А что касается избирательной компании, то я всегда верил в гений Арчибальда, да и Володя оказался весьма активным кандидатом. Такой союз не мог проиграть. Отвечая на ваш вопрос, непосредственно в компании я участия, не принимал, но как я и подозревал, в этом и не было надобности, хотя если бы они меня попросили, то я бы точно помог.<br><br>За последний год на вас было совершено несколько покушений, кому вы так могли насолить и не страшно ли вам?<br><br>Ну по порядку, это, пожалуй, самые легкие вопросы вашего интервью.<br>Первое - кому это выгодно - конечно корпорациям, я пытаюсь увеличить их издержки на работников и привести их к социальной ответственности, а это для них многомиллиардные потери. Эти люди не считают своих работников за граждан, они относятся к ним как к рабсиле и чем она дешевле, тем у них больше денег.<br>Второе - не страшно только дуракам, но мириться с таким положением дел больше нельзя. Люди в колониях ведут нищенский образ существования и практически не имеют прав, многие из них идут на преступления, то там, то тут возникают восстания, бунты и забастовки, жители Земли и крупнейших колоний голосуют за закрытие границ, Альянс трещит по швам. А этим все нипочем -они только набивают свою мошну, ухудшают положение людей, приглашают на работу более дешёвую инопланетную рабсилу, вводят поправки в конституцию о том, чтобы приравнять алиенов в правах к людям через своих сенаторов наподобие Семенова.<br>Знаете, на ютубе есть канал топ пять покушений на Моргана. Но, пожалуй, я лучше умру, чем позволю развалить ЗА и продать человечество в руки нелюдей."');

select data.set_attribute_value(data.get_object_id('news13'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news13'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news13'), data.get_attribute_id('news_title'), null, jsonb '"ЭХО ДИЛГАРСКОЙ ВОЙНЫ"');
select data.set_attribute_value(data.get_object_id('news13'), data.get_attribute_id('name'), null, jsonb '"ISN: ЭХО ДИЛГАРСКОЙ ВОЙНЫ"');
select data.set_attribute_value(data.get_object_id('news13'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news13'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.02.19 23:23"');
select data.set_attribute_value(data.get_object_id('news13'), data.get_attribute_id('news_time'), null, jsonb '"19.02.2258 23:23"');
select data.set_attribute_value(data.get_object_id('news13'), data.get_attribute_id('content'), null, jsonb '"Добрый вечер! С вами Карлос Морено, и программа “Многими голосами”. Темой сегодняшнего часа стала “дилгарская чума”. Но нет, подождите переключаться, речь пойдет не про ужасное заболевание, поразившее наших соотечественников, а… любовь. Да, дорогие друзья, неожиданная любовь вспыхнувшая в сердце молодого лейтенанта ЗФ ЗА Густава Сикорски к дилгарке Феа’Джин. Многие из вас, конечно же узнали героев нашумевшего романа молодой писательницы Ангелы Купер. Даже те, кто не читал это, с позволения сказать, произведение, наверняка видел в новостях репортаж о безобразной драке, развернувшейся на презентации книги в Берне на прошлой неделе. Напомню, что там произошло. На уличный фуршет явилась компания молодых людей, одетых в реплики дилгарских мундиров. Шокированная таким зрелищем публика перевозбудилась, разгорелась ссора, которая очень быстро переросла в драку, к который подключились случайные прохожие, а также курсанты Космической Академии. Прибывшая на место происшествия Служба Безопасности быстро восстановила порядок, задержав нескольких нарушителей спокойствия, в том числе саму писательницу.<br>[на экране - крупным планом лицо молодой женщины с растрепанными русыми волосами, на правой скуле - крупный кровоподтек]<br>Корр. Ангела, как вы можете объяснить появление на улицах Берна людей, одетых в дилгарскую форму? Это что, провокация?<br>А.К. (гордо вскинув голову) Засуньте себе в {цензура} свои провокации! Это мои друзья из “Громовой поступи”, и это не они начали драку! Вы превратили Землю в рассадник ксенофобии {цензура}<br>[на экране снова Карлос Морено]<br>В настоящий момент все участники скандала отпущены на свободу, кроме тех, кто оказался в больнице в тяжкими телесными повреждениями. Продажи книги после этого инцидента выросли втрое, даже ваш покорный слуга не удержался и приобщился к прочтению данного текста.<br>Чтобы все понимали, о чем идет речь, вкратце изложу сюжет, который писательница решила поведать миру. Итак, Густав Сикорски отправился служить на пресловутый Вавилон-5, где и познакомился с дилгаркой (разумеется, юной и прекрасной) Феа’Джин. Между ними вспыхнула любовь с первого взгляда, которую они старательно скрывали от общества, потому что понимали (надо же, хватило мозгов!), что общество такого пассажа не оценит. Когда срок службы закончился, Сикорски решил тайно перевезти свою возлюбленную на Землю. В чем им помогла загадочная и могущественная организация “Утренняя Звезда”. Влюбленные поселились в маленьком городке, тщательно скрывали лицо Феа’Джин и были счастливы. Но потом грянул гром, и у одного из городских “бонз” от дилгарской чумы скончалась кузина. И как раз в этот момент маскировка дилгарской девы была раскрыта. Парочка подверглась ужасной травле, и целых двадцать пять страниц они убегали от погони, используя все подвернувшееся оружие и транспортные средства. Количество жертв - пятьдесят четыре, я специально посчитал. Когда казалось, что спасения нет, на помощь внезапно снова пришел представитель той самой “Утренней Звезды”, помог им покинуть Земной Альянс и запросил убежища у Антареса. Синекожие с пониманием отнеслись к ситуации и предложили молодым убежище на Антаресе-5. Здесь у главного героя на какое-то время проклюнулся разум, потому что он засомневался. Но хватило его минут на пять. В романтичной финальной сцене главная героиня держит Сикорски за руку, и проникновенно сообщает, что теперь у него будет новая семья, мы вместе построим прекрасный мир, где не будет места непониманию, злу и предательству.<br>Да, я знаю, что многие из вас сейчас не могут сдержать гомерического хохота, принимая ставки на продолжительность жизни нашего героя в дилгарском новом мире. Сейчас будет рекламная пауза, предлагаю вам всем использовать ее для упражнений в остроумии и возгласов возмущения. Потому что после ролика мы с вами будем говорить о серьезных вещах, и нам понадобится весь наш здравый рассудок.<br>[рекламная пауза]<br>Это снова Карлос Морено и программа “Многими голосами”, посвященная теме “Дилгарская чума”. Во всей ситуации, описанной в первой части программы, меня поразила вовсе не слезливая мелодрама, ставшая на этой неделе бестселлером. Тем более, мы уже просмеялись по ее поводу. А теперь давайте задумаемся. На прошлой неделе в Берне несколько наших с вами соотечественников вышли на улицу, добровольно нарядившись в дилгарскую форму. “Немыслимо!” - подумал я и взялся за расследование. “Громовая поступь” - это название одного из дилгарских воинских формирований, разгромленного во время инцидента Омега. И… объединения молодых людей, увлеченных дилгарской культурой и образом жизни. Лично я был в шоке. Но я не был бы журналистом, если бы позволял эмоциям брать над собой верх! Поэтому я решился побеседовать с лидером этой организации Густавом Клайдом. Если кто-то в этот момент подумал, не он ли послужил прототипом главного героя книги, то, предваряя вопросы, отвечаю: да, это так. Это студент Университета Земли, юноша из хорошей семьи, обучается праву и политологии. И он присутствует сегодня в нашей студии. Я знаю, вы с нетерпением ждете, когда я представлю второго гостя, который по традиции должен присутствовать в нашей программе. Конрад Креймер, ветеран Дилгарской Войны, вышел в отставку в чине капитана ЗФ ЗА.<br>[студия программы “Многими Голосами”, на красной половине - красивый молодой человек, одетый в реплику мундира дилгарского воителя, на синей половине - пожилой мужчина в гражданском]<br>Карлос Морено: Итак, Густав, расскажите нашим зрителям, как вы докатились до такой жизни… То есть, про вас и “Громовую поступь”, разумеется.<br>Густав Клайд. С удовольствием! В нашей организации 322 действующих члена, и еще 22 в данный момент проходят испытания…<br>КМ. Подождите-подождите, вы торопитесь… Это значит, что вы функционируете уже довольно давно?!<br>ГК. Уже более трех лет, но идея возникла раньше. Мы с друзьями провели исследования деятельности института пропаганды ЗА в период после дилгарской войны и пришли к неутешительным выводам, что властям было мало просто победы в войне, и они демонизировали народ дилгар, подвергнув жесткой цензуре все документы того периода. Однако все эти сложности только подхлестнули наше любопытство. Собирая истину по крупицам, мы, вольно и невольно, прониклись симпатией к этой удивительной культуре, а также осознали, насколько однобоко нам показывала конфликт пресса Земного Альянса. Победив, мы не смогли воспользоваться настоящими плодами своей победы, а именно - научиться тому хорошему, что может нам дать народ дилгар…<br>Конрад Кремер. Да что ты говоришь пи[цензура] малолетний! Хорошему! Ты хоть раз видел этих головорезов живьем?! Ты хоть представляешь, что они такое?!<br>ГК. Мне понятна ваша экспрессия, господин Креймер, но я, с вашего позволения, продолжу. Итак, мы пришли к выводу, что общество нуждается в просвещении. И что мы должны взять эту миссию на себя. Так и образовалась “Громовая поступь”. Название мы взяли в память о героической гибели этого…<br>КК. Героической что?! Морено, я даже говорить от возмущения не могу!<br>ГК. Вот и помолчите. Мы и так очень много лет вас слушали, даже не задумываясь о том, правдива ли та информация, которой нас пичкали с самого рождения…<br>Карлос Морено: Итак, вы приняли решение, образовались и… что дальше? Чем вы занимаетесь?<br>ГК. Как я уже сказал, мы проводим исследования, и делимся своими находками на еженедельных сборах. Помимо этого мы реконструируем военную форму дилгар, изучаем их язык, культуру и быт. Кроме того, мы много занимаемся спортом, к счастью одному из нас попал в руки инфокристалл с программой начальной физической подготовки дилгарских солдат. На наш взгляд, она значительно превосходит все наши комплексы упражнений. Помимо этого, лично я веду неофициальный факультатив, посвященный дилгарской культуре, в Университете Земли.<br>КК. Дебилы, б[цензура]...<br>Карлос Морено. И о чем же вы там… эээ… рассказываете?<br>ГК. О, об очень многом! Например, вы знакомы с дилгарской любовной лирикой?<br>КК. Дилгарской… ЧТО?!<br>ГК. А меж тем, это удивительное искусство! Такой пронзительности чувств не смог достичь ни один земной поэт. Между прочим, несколько оригинальных цитат встречается в тексте талантливой писательницы Ангелы Купер, не побоявшейся в наше непростое время поднять столь острую тему…<br>Карлос Морено. Скажите, Густав, а случалось ли вам лично встречаться с представителями народа дилгар?<br>ГК. К сожалению, нет. Но я надеюсь, что в скором будущем это станет возможным. Судя по тому, с каким живейшим интересом воспринимает мой факультатив просвещенная молодежь, мозг которой еще не успела проесть пропаганда правительства...<br>КК. Пропаганда! Любовная лирика! Ни разу дилгара живьем не видел - и туда же, молодежь он учит! Да это твои мозги сожрала какая-то дилгарская зараза, если ты ими думать разучился! Хотел бы я посмотреть, какие ошметки остались бы от тебя после “культурного” контакта с каким-нибудь вармастером!<br>ГК. Мы пытались выйти на контакт с теми, кто побывал в дилгарском плену, но с ужасом обнаружили, что это невозможно. Вся информация об этих людях либо изъята из сети, либо неполна. Похоже, правительство Земного Альянса неплохо позаботилось о том, чтобы мы никогда не узнали правды…<br>КК. Мой товарищ попал в плен почти в самом конце войны. Только поэтому он вернулся на родину живым. Он прожил всего полтора года, и никто, ни один врач не смог определить, от чего он умирает. В его нервы были вживлены какие-то… штуки. Тело было напичкано какой-то дрянью. Он каждый день просил убить его, пока наконец не сошел с ума от воспоминаний и не выбросился с балкона. Нужен ты кому-то, скрывать от тебя информацию. Да вы просто слепцы, если до сих пор не поняли, с чем имеете дело!<br>ГК. Я понимаю вас, господин Креймер, для вас дилгары - это враги, и в силу косности своего мышления, вы никогда не сможете воспринимать их иначе. Но подумайте, ведь для них мы тоже убийцы. Они вели вынужденную войну за выживание, а мы, своим вмешательством, обрекли их на вымирание. К счастью, сейчас ситуация изменилась, и есть шанс, что народ дилгар возродится…<br>КК. Дай-то бог, чтобы ты был не прав, молокосос…<br>[свет в студии медленно гаснет. На экране появляется крупным планом лицо изможденного человека, с лихорадочно блестящими глазами]<br>Карлос Морено. Этому человеку осталось жить не больше трех суток. Наши медики поддерживают в нем жизнь, насколько возможно, надеясь, что случится чудо, и лучшим умам человечества удастся найти способ исцелить страшный “подарок” народа дилгар человечеству. Вот статистика погибших за последние месяцы…<br>[по экране ползут длинные колонки цифр, названий планет, округов, городов]<br>Может быть, в чем-то юный гость нашей студии прав. Может быть, мы можем чему-то научиться у дилгар.<br>[цифры меняются на количество погибших во время Дилгарской Экспансии людей, драззи, маркабов, нарнов, бракири, геймов, аббаи, пакмара, митос, криш...]<br>Представителей некоторых из этих народов мы никогда не увидим. Может быть, этот мир станет лучше, если список исчезнувших навсегда цивилизаций пополнится еще одним названием… Но давайте задумаемся на минуточку, а станем ли от этого лучше мы сами?<br>Это был Карлос Морено с вечерней программой “Многими Голосами”."');

select data.set_attribute_value(data.get_object_id('news14'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('news14'), data.get_attribute_id('type'), null, jsonb '"news"');
select data.set_attribute_value(data.get_object_id('news14'), data.get_attribute_id('news_title'), null, jsonb '"Воззвание новой общественной организации - Люди"');
select data.set_attribute_value(data.get_object_id('news14'), data.get_attribute_id('name'), null, jsonb '"ISN: Воззвание новой общественной организации - Люди"');
select data.set_attribute_value(data.get_object_id('news14'), data.get_attribute_id('news_media'), null, jsonb '"media_isn"');
select data.set_attribute_value(data.get_object_id('news14'), data.get_attribute_id('system_news_time'), null, jsonb '"2258.02.21 12:42"');
select data.set_attribute_value(data.get_object_id('news14'), data.get_attribute_id('news_time'), null, jsonb '"21.02.2258 12:42"');
select data.set_attribute_value(data.get_object_id('news14'), data.get_attribute_id('content'), null, jsonb '"Примечание: опубликовано во всех планетарных сетях<br><br>Мы - люди!<br>Наша родина - Земля. Наш дом - планеты Земного Альянса. Наше будущее - Космос.<br>Мы добры, щедры, хотим счастья и мира.<br>Мы много работаем и мало получаем за свой труд. Вокруг нас полно нищеты и несправедливости. Где бы мы не жили, на Проксиме, Веге, Марсе или Земле - мы видим, как далеки от нас те, кто правит нами. Как корпорации истекают жадностью, выдавливая золото из нашей крови и пота. Как жаждут сделать нас тупым скотом на их производствах. Как сепаратисты в законе, вроде Семенофа с трубун кричат о защите колоний, на деле лишь борясь за личную власть и тайно надевая бомбы на наших детей.<br>Идеалисты до сих пор кричат, что Космос ждет нас и все расы с открытыми объятиями рады принять нас в свою семью. Минбар показал нам, как горячи эти объятия. Дилгарская чума отравляет наши планеты. Иккарианские боевые корабли готовы уничтожить наши колонии. Даже предатели-телепаты, захватившие Юкос уже готовы исторгнуть себя из расы людей и изменить свой геном, для размножения с ксеносами.<br>Мы - люди и нам надоело это терпеть!<br>Земному Альянсу нужен порядок и наведем его мы - ЛЮДИ!"');

select data.set_attribute_value(data.get_object_id('transactions'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('transactions'), data.get_attribute_id('type'), null, jsonb '"transactions"');
select data.set_attribute_value(data.get_object_id('transactions'), data.get_attribute_id('name'), null, jsonb '"История операций"');
select data.set_attribute_value(data.get_object_id('transactions'), data.get_attribute_id('system_meta'), data.get_object_id('persons'), jsonb 'true');

select data.set_attribute_value(data.get_object_id('mailbox'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('mailbox'), data.get_attribute_id('type'), null, jsonb '"mailbox"');
select data.set_attribute_value(data.get_object_id('mailbox'), data.get_attribute_id('name'), null, jsonb '"Почта"');
select data.set_attribute_value(data.get_object_id('mailbox'), data.get_attribute_id('system_meta'), data.get_object_id('persons'), jsonb 'true');

select data.set_attribute_value(data.get_object_id('notifications'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('notifications'), data.get_attribute_id('type'), null, jsonb '"notifications"');
select data.set_attribute_value(data.get_object_id('notifications'), data.get_attribute_id('name'), null, jsonb '"Уведомления"');
select data.set_attribute_value(data.get_object_id('notifications'), data.get_attribute_id('system_meta'), data.get_object_id('persons'), jsonb 'true');

select data.set_attribute_value(data.get_object_id('inbox'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('inbox'), data.get_attribute_id('system_mail_folder_type'), null, jsonb '"inbox"');
select data.set_attribute_value(data.get_object_id('inbox'), data.get_attribute_id('type'), null, jsonb '"mail_folder"');
select data.set_attribute_value(data.get_object_id('inbox'), data.get_attribute_id('name'), null, jsonb '"Входящие"');

select data.set_attribute_value(data.get_object_id('outbox'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('outbox'), data.get_attribute_id('system_mail_folder_type'), null, jsonb '"outbox"');
select data.set_attribute_value(data.get_object_id('outbox'), data.get_attribute_id('type'), null, jsonb '"mail_folder"');
select data.set_attribute_value(data.get_object_id('outbox'), data.get_attribute_id('name'), null, jsonb '"Исходящие"');

select data.set_attribute_value(data.get_object_id('med_library'), data.get_attribute_id('system_is_visible'), data.get_object_id('med_documents'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('med_library'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('med_library'), data.get_attribute_id('type'), null, jsonb '"med_library"');
select data.set_attribute_value(data.get_object_id('med_library'), data.get_attribute_id('name'), null, jsonb '"Медицинские отчёты"');
select data.set_attribute_value(data.get_object_id('med_library'), data.get_attribute_id('system_meta'), data.get_object_id('med_documents'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('med_library'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');

select data.set_attribute_value(data.get_object_id('research_library'), data.get_attribute_id('system_is_visible'), data.get_object_id('research_documents'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('research_library'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('research_library'), data.get_attribute_id('type'), null, jsonb '"research_library"');
select data.set_attribute_value(data.get_object_id('research_library'), data.get_attribute_id('name'), null, jsonb '"Научные отчёты"');
select data.set_attribute_value(data.get_object_id('research_library'), data.get_attribute_id('system_meta'), data.get_object_id('research_documents'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('research_library'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');

select data.set_attribute_value(data.get_object_id('crew_library'), data.get_attribute_id('system_is_visible'), data.get_object_id('crew_documents'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('crew_library'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('crew_library'), data.get_attribute_id('type'), null, jsonb '"crew_library"');
select data.set_attribute_value(data.get_object_id('crew_library'), data.get_attribute_id('name'), null, jsonb '"Журнал экипажа"');
select data.set_attribute_value(data.get_object_id('crew_library'), data.get_attribute_id('system_meta'), data.get_object_id('crew_documents'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('crew_library'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');

select data.set_attribute_value(data.get_object_id('library'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library'), data.get_attribute_id('type'), null, jsonb '"library_category"');
select data.set_attribute_value(data.get_object_id('library'), data.get_attribute_id('name'), null, jsonb '"Документы"');
select data.set_attribute_value(data.get_object_id('library'), data.get_attribute_id('system_meta'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('category_rules'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('category_rules'), data.get_attribute_id('type'), null, jsonb '"library_category"');
select data.set_attribute_value(data.get_object_id('category_rules'), data.get_attribute_id('system_library_category'), null, jsonb '"library"');
select data.set_attribute_value(data.get_object_id('category_rules'), data.get_attribute_id('name'), null, jsonb '"Правила"');

select data.set_attribute_value(data.get_object_id('category_laws'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('category_laws'), data.get_attribute_id('type'), null, jsonb '"library_category"');
select data.set_attribute_value(data.get_object_id('category_laws'), data.get_attribute_id('system_library_category'), null, jsonb '"library"');
select data.set_attribute_value(data.get_object_id('category_laws'), data.get_attribute_id('name'), null, jsonb '"Нормативные документы"');

select data.set_attribute_value(data.get_object_id('category_laws_ea'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('category_laws_ea'), data.get_attribute_id('type'), null, jsonb '"library_category"');
select data.set_attribute_value(data.get_object_id('category_laws_ea'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws"');
select data.set_attribute_value(data.get_object_id('category_laws_ea'), data.get_attribute_id('name'), null, jsonb '"Земной Альянс"');

select data.set_attribute_value(data.get_object_id('category_laws_assembly'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('category_laws_assembly'), data.get_attribute_id('type'), null, jsonb '"library_category"');
select data.set_attribute_value(data.get_object_id('category_laws_assembly'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws"');
select data.set_attribute_value(data.get_object_id('category_laws_assembly'), data.get_attribute_id('name'), null, jsonb '"Ассамблея"');

select data.set_attribute_value(data.get_object_id('category_laws_congress'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('category_laws_congress'), data.get_attribute_id('type'), null, jsonb '"library_category"');
select data.set_attribute_value(data.get_object_id('category_laws_congress'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws"');
select data.set_attribute_value(data.get_object_id('category_laws_congress'), data.get_attribute_id('name'), null, jsonb '"Конгресс"');

select data.set_attribute_value(data.get_object_id('category_laws_babylon'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('category_laws_babylon'), data.get_attribute_id('type'), null, jsonb '"library_category"');
select data.set_attribute_value(data.get_object_id('category_laws_babylon'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws"');
select data.set_attribute_value(data.get_object_id('category_laws_babylon'), data.get_attribute_id('name'), null, jsonb '"Вавилон 5"');

select data.set_attribute_value(data.get_object_id('category_universe'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('category_universe'), data.get_attribute_id('type'), null, jsonb '"library_category"');
select data.set_attribute_value(data.get_object_id('category_universe'), data.get_attribute_id('system_library_category'), null, jsonb '"library"');
select data.set_attribute_value(data.get_object_id('category_universe'), data.get_attribute_id('name'), null, jsonb '"Вселенная"');

select data.set_attribute_value(data.get_object_id('library_document1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document1'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document1'), data.get_attribute_id('name'), null, jsonb '"Общие положения"');
select data.set_attribute_value(data.get_object_id('library_document1'), data.get_attribute_id('document_title'), null, jsonb '"Общие положения"');
select data.set_attribute_value(data.get_object_id('library_document1'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document1'), data.get_attribute_id('content'), null, jsonb '"О правилах<br><br>1. Знание правил обязательно для ВСЕХ.<br>2. Людей, собирающихся играть по своим собственным правилам, мастера просят на игру не приезжать.<br>3. Ваш приезд на игру означает Ваше автоматическое согласие соблюдать данные правила и подчиняться решениям мастеров в рамках игры.<br><br>Об игре<br><br>1. На игре обязательно ношение игрового костюма – зависящего от расы или грима соответствующей расы.<br>2. Употребление наркотических средств и злоупотребление алкоголем на территории базы, во время проведения игры запрещено! Мастера оставляют за собой право удалить с территории базы игроков, нажравшихся и насвинячивших, без возвращения взносов.<br>3. Игра идет в режиме нон-стоп, с восьми утра до трех часов ночи. В период с 3 ночи до 8 утра запрещено взаимодействие игроков в рамках боевых правил, рамках правил по технике, не обслуживаются все макро модели, исследования, медицина. Мастера советуют всем лечь спать.<br>4. Масштаб времени на игре для реальных действий на станции 1/1 т.е. три дня игры это три дня жизни персонажа. Для виртуальных действий галактический цикл. На игре он занимает 8 часов реального времени, во вселенной масштаб времени 1/3 один галактический цикл 8 часов = три дня вселенной.<br>5. Выход из образа на игровой территории в игровое время недопустим, как и любая «неигровуха», разборки по применению правил и пр.<br><br>О мастерах<br><br>1. Мастер является консультантом-наблюдателем на игре, т.е. к нему можно обращаться только с вопросами по трактовке данных правил или для разрешения пожизненных конфликтов.<br>2. Мастера в качестве персонажей будут присутствовать в игре, исполняя служебные роли-функции.<br>3. Мастера оставляют за собой право отклонить заявку игрока и потребовать от него не приезжать на базу без объяснения причин.<br><br>Об игроках и гостях<br><br>1. Присутствие несовершеннолетних игроков на игре не допускается.<br>2. Гости на базу не допускаются. Все пожизненные визиты и дела – за забором.<br>3. Фотографы или операторы должны быть одеты в игровой костюм и иметь минимальную роль-маску для ведения игровых разговоров.<br><br>Об имидже и персонажах игры<br><br>1. Обязательные атрибуты внешнего вида:<br>Игровой костюм - зеркало расы, общественного положения в нем и маркер, относящий персонажа к определенной цивилизации. Целесообразно привезти с собой несколько костюмов, на случай смены роли или для других надобностей.<br>Знаки, относящиеся к моделированию состояний и прочим моделям, обязательно носятся поверх игровой одежды.<br>Удостоверение личности всегда носится на груди открыто, это правило станции (т.е. можно не носить – но это повод для СБ арестовать вас)<br>Имя персонажа должно соответствовать культурным нормам, указанным в Описании цивилизации.<br>Грим или маски – внешность разных рас моделируется специальным гримом, который будет разработан мастерами совместно с игроками. Мастера постараются нанять гримера на весь период игры.<br>2. Оружие является элементом костюма и должно соответствовать описанным в Правилах канонам, характерным для конкретной цивилизации. Официально на станции носить оружие и средства самозащиты имеют право только сотрудники СБ, Пси-надзора и служащие станции из военных (Космофлот и Легионеры Земного Альянса). Станеры могут носить все, кто имеет разрешение от СБ.<br>3. Боевой костюм – может носить только сотрудник СБ или телохранитель.<br><br>Об обязательном использовании игроками электронных устройств<br><br>1. Мобильные устройства. Для того, чтобы играть в Вавилон 5 каждый игрок должен иметь с собой электронное устройство, смартфон или планшет, имеющий доступ к вайфай и желательно мобильный интернет, а также работающий на Андроиде не ниже 4-й версии. На мобильное устройство ставится система Бабком.<br>2. Ноутбуки используются для игры во все виртуальные и макромодели. Любой ноутбук, или иное устройство, используемое для хранения игровой информации должен быть подключен к мастерскому вайфаю.<br>Ноутбуки должны быть в медицинской лаборатории, в командном центре, у главного инженера, у руководителя СБ, у ученых, у всех кто работает с документами и имеет отношение к макромоделям.<br>3. Большое количество игровых действий, расследование, открытие дверей, исследования, будет доступно только при использовании электронных устройств, через систему QR кодов (программу для чтения определяют мастера) или через сайт (мобильное приложение) игры.<br>4. BABCOM – сеть для общения персонажей игры. Делается мастерами. Для приватных переговоров по сети, и отсылки любых текстовых сообщений другим игрокам может быть использована только сеть BABCOM. Пользоваться СМС-ками, или иными видами электронной месенджеров в целях игры запрещено.<br>5. Звонки на мобильные телефоны – запрещены.<br>6. Внутренняя – официальная видеосвязь станции – в разработке.<br>7. Запрещается удалять любую информацию с электронных устройств, связанную с игрой, чистить логи используемых программ и подобные действия.<br><br>Об игровых вещах<br><br>1. Игровые вещи могут находиться только поверх игровой одежды, в руках, в сумке или в сейфе.<br>Игровые вещи должны всегда находиться непосредственно у игрока или в его личном сейфе. Их запрещено прятать под матрас в комнате, под одежду, оставлять в бачке в туалете, и пр.<br>Если игрок хочет избавиться от любой игровой вещи, он обязан положить ее в ближайшем общедоступном помещении красного сектора, так чтобы она была на виду.<br>Оружие можно прятать на теле, но при обыске беспомощного персонажа оно сдается обыскивающему автоматически.<br>Ключи, коды от замков на дверях и сейфах – это тоже игровые вещи.<br>Любые игровые вещи могут быть отчуждены у персонажа: украдены или забраны силой.<br>Электронные устройства не могут быть забраны у игрока, но, если игрок арестован или беспомощен, он обязан дать другому игроку возможность просмотреть все имеющие отношение к игре записи на устройстве.<br>Запрещается удалять любую информацию с электронных устройств, связанную с игрой, чистить логи используемых для игры программ и тому подобные действия.<br><br>О подтверждении игровых действий<br><br>1. Так называемых «честных слов» или «сертификатов действий» на игре нет. Игрокам, чьи персонажи обладают особыми свойствами (в основном телепатам), даются большие возможности, и на них возлагается большая ответственность. Выполнение правил, по своим свойствам, они отслеживают сами. В случае нарушения этих правил персонаж такого игрока выходит из игры. Даже если нарушение произошло случайно, по ошибке или запарке. Особенно – если это привело к конфликту с участием других игроков.<br>2. Если персонаж предъявил вам знак ПСИ (см. правила по телепатии), и заявил, что с вами что-то произошло, то это произошло.<br>3. Если в правилах игры говорится что определённое действие подтверждается использованием электронного устройства – такое использование обязательно при каждом совершении действия. Нарушение данного правила может повлечь за собой отмену мастерами игровых результатов, которых игрок добился в результате такого нарушения."');

select data.set_attribute_value(data.get_object_id('library_document2'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document2'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document2'), data.get_attribute_id('name'), null, jsonb '"Боевые правила"');
select data.set_attribute_value(data.get_object_id('library_document2'), data.get_attribute_id('document_title'), null, jsonb '"Боевые правила"');
select data.set_attribute_value(data.get_object_id('library_document2'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document2'), data.get_attribute_id('content'), null, jsonb '"Традиционно, на наших сюжетных играх убить персонажа с помощью оружия очень трудно, ибо нефиг.<br>1. Оружие на игре есть только у тех, кому об этом сказали мастера.<br>1.1. Контрабанда игроки, чьи персонажи, не имеют оружия на начало игры могут привезти его на игру и сдать мастерам. Такое оружие вводится в игру по специальным закрытым правилам контрабанды. Правила знают персонажи-контрабандисты.<br>2. Холодным оружием могут пользоваться Центавры и Нарны.<br>Одно попадание холодным оружием в конечность выводит конечность из строя. Ей нельзя пользоваться после боя у персонажа Травма. Два попадания в конечности - персонаж получает статус Ранен.<br>Попадание в корпус – сразу переводит персонажа в статус Раненого.<br>3. Любой персонаж – может ранить (сделать беспомощным) другого персонажа, применив огнестрельное оружие, и попав поражающим элементом в поражаемую зону<br>Бластеры, присутствующие на станции имеют сниженную мощность батареи, и поэтому наносят серьезные ожоги, но не убивают<br>Станеры при попадании в поражаемую зону – оглушают персонажа<br>4. Любой персонаж может оглушить другого персонажа предметом обстановки.<br>5. Драка - любой персонаж - может попытаться сделать другого беспомощным в драке.<br>Драка возможна только в коридорах, или там, где невозможно нанести повреждение мебели<br>Обязательно перед дракой выяснение отношений с хватанием за грудки и произнесением кодовой фразы «Пойдем выйдем!».<br>Основная модель – игроки хлопают друг друга руками по плечам.<br>Пропустивший три хлопка в плечо персонаж – беспомощен и должен обратится к врачу для исцеления.<br>Участвовать в драке может любое количество игроков.<br>По взаимной договоренности игроки могут бороться, играть в «ирландского дурака» или применять другие модели, главное не увлекаться.<br>6. Социальное (театральное) убийство - любой персонаж убит, если прилюдно (в присутствии минимум трех других персонажей) совершены некие действия, которые должны привести к его смерти. Примеры социального убийства – казнь, линчевание разъяренной толпой, самоубийство, жертвоприношение... Социальное убийство совершается либо по согласию, либо если жертва беспомощна, оглушена, схвачена, либо в нейроошейнике.<br>7. Убийца (это специальный статус персонажа) используя холодное оружие или бластер, попаданием в поражаемую зону, может убить другого персонажа. Словесный маркер слово «Убит». Убийство возможно только в небоевой обстановке.<br>8. Толпа, не менее трех человек, может схватить одного персонажа. Если они изображают избиение схваченного, то он считается беспомощным, до осмотра у лекаря.<br>Есть очень сильные персонажи, которые могут схватить другого персонажа в одиночку. Необходимо реально взять другого игрока за какую-то часть тела или костюма. Словесный маркер «схвачен».<br>9. Оглушение/парализация производится любым игровым предметом,  или предметом обстановки, рукояткой оружия, или клинком оружия плашмя, легким ударом в спину персонажа, со словами «оглушен».<br>Оглушить голыми руками может персонаж имеющий специальную способность рукопашного боя.<br>Оглушить можно выстрелом из «станера».<br>Оглушить может телепат – показав оглушаемому знак пси.<br>Оглушение предметами и руками производится только в небоевой ситуации.<br>Оглушение станером и телепатом можно делать в боевой ситуации.<br>если оглушенному надоело валяться, а обидчик покинул помещение, он может привести к своему телу первого встречного игрока.<br>Оглушенного может привести в себя другой персонаж, похлопыванием по щекам, поливанием водичкой, в срок раньше пяти минут.<br><br>Боевой костюм - специальное оборудование, позволяющее игнорировать удары холодного оружия, попытки оглушения, избиения, выстрелы из бластеров или станнеров. Боевой костюм защищает всю поражаемую зону вне зависимости от его внешнего вида.<br>Боевой костюм позволяет полностью игнорировать любые атаки холодным оружием, попытки оглушения, избиения или попытки схватить персонажа.<br>Боевой костюм фильтрует от одной до трех атак подряд из бластера или станнера, в зависимости от количества «аккумуляторов» на костюме. Между боями костюм «заряжается» т.е. восстанавливает защитные способности.<br>10. Поражаемая зона для любого оружия полная.<br>11. Запрещены: удары руками и ногами, броски и захваты, болевые и удушающие приемы, удары в голову, шею или пах; использование поврежденного, не прошедшего мастерский контроль оружия и доспеха.<br>Важное примечание: отметим, что на игре могут присутствовать персонажи, не подчиняющиеся общим боевым и альтернативным правилам, например, их нельзя оглушить, схватить, отравить и т.п. Они будут сами знать о своих способностях.<br>Оружие и доспехи - критерии допуска в игру:<br>1. Холодное оружие – только протектированное. Оно должно соответствовать расовым стандартам, по внешнему виду, и типу, быть безопасным и эстетически выдержанным. Ножи резиновые, мечи ЛАРП. Список закрытый.<br>2. Огнестрельное оружие и станеры – это нерфы. Нерф обязательно покрасить.<br>Нерфы имеющие автоматическую подачу патронов это бластеры. Должны быть выкрашены преимущественно в черный цвет.<br>Нерфы, имеющие ручную перезарядку это станнеры. Должны быть покрашены преимущественно в серый или серебристый цвет.<br>3. Все оружие будет проходить мастерский контроль по критериям безопасности и эстетичности, если мастера посчитают, что оружие не соответствует критериям, оно на игру допущено не будет.<br>4. Боевой костюм – должен выглядеть как бронежилет, или имитация бронежилета с приделанными к нему футуристическими штуками.<br>Общее оформление на совести игроков, но по нему должно быть явственно видно, что это такое.<br>Сверху костюма обязательно прикрепить от одной до трех металлически выглядящих коробочки, которые называются аккумуляторы, и демонстрируют энергозапас (количество игнорируемых попаданий) костюма.<br>В комплект обязательно входит каска (любая из страйкбольного ряда снаряжения, хорошо если с пластиковым забралом).<br>Если мастера посчитают, что костюм не соответствует эстетическим критериям, на игру он допущен не будет."');

select data.set_attribute_value(data.get_object_id('library_document3'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document3'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document3'), data.get_attribute_id('name'), null, jsonb '"Правила по состоянию и статусам персонажа"');
select data.set_attribute_value(data.get_object_id('library_document3'), data.get_attribute_id('document_title'), null, jsonb '"Правила по состоянию и статусам персонажа"');
select data.set_attribute_value(data.get_object_id('library_document3'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document3'), data.get_attribute_id('content'), null, jsonb '"Состояния или статус персонажа:<br>У персонажа игры может быть всего 4 состояния, ограничивающих его действия.<br>Смерть - игрок вышел из игры. Беспомощен, без сознания, под контролем - игрок ограничен в игровых действиях, в основном в боевых правилах:<br>Смерть<br>Смерть может наступить в результате социального убийства, либо если тебя убил убийца, или из-за врачебной ошибки на операционном столе доброго доктора.<br>Убитый или умерший - лежит на месте смерти. Спрятать труп невозможно. Если игроку надоело валяться а труп еще не нашли, убитый игрок должен дойти до начальника СБ или любого другого офицера ЗА, в виде «случайного сотрудника, обнаружившего труп» и привести его на место убийства.<br>\"Случайный сотрудник\" показывает место преступления, в какой позе лежит убиенный, сообщает какие есть на теле повреждения - на этом \"сотрудник\" покидает место преступления, на котором остается «труп» и приведенный игрок.<br>Труп может быть обыскан (просто сдает все имеющиеся у него игровые вещи полностью и безоговорочно по первому требованию обыскивающего)<br>Умерший непосредственно в медблоке, в результате лечения, переводится в состояние комы,  умерший за пределами медблока может быть подвергнут криозаморозке.<br>Беспомощность<br>Состояние беспомощности может наступить в результате ранения, отравления, болезни, драки, телепатического воздействия, пыток, или употребления наркотиков, а также в некоторых других специфических случаях:<br>Беспомощный человек не может пользоваться оружием, сопротивляться обыску<br>запрещено бегать, беспомощный должен передвигаться только очень медленно (пошатываясь или опираясь на стены), и постоянно демонстрировать свою слабость, и беззащитность.<br>Если беспомощного удерживает за руку другой персонаж, он может запретить беспомощному двигаться и разговаривать.<br>Все виды беспомощности лечатся только врачом в медблоке, с применением специальных препаратов.<br>состояние беспомощности можно временно купировать, при применении автодока (см. правила по медицине)<br>Виды беспомощности:<br>Ранен/травмирован – раненый/травмированный персонаж беспомощен. Он должен держась за рану/травму, корчиться от боли, бормотать, стонать, и иначе демонстрировать наличие ранения. Если игрок прекращаете отыгрыш ранения/травмы - персонаж умер.<br>Рана - последствие попадания холодным оружием или из бластера в поражаемую зону.<br>Травма это последствия оглушения, избиения, удара током, несчастного случая или парализации. Травма отрывается как рана.<br>Если персонажу оказывают первую помощь (перевязка, сделанная здоровым персонажем, применение автодока), он может перестать изображать ранение, до обращения к врачу.<br>Отравлен - персонаж если игрок почувствовал на языке резкий, не характерный для еды вкус, (или если об этом сообщил мастер).<br>Действие яда наступает сразу. Игрок должен пускать пузыри, корчиться от боли и иначе отыгрывать действие яда (мастер или карточка яда подскажет симптомы). Если игрок прекращаете отыгрыш отравления - персонаж умер.<br>Если персонажу оказывают первую помощь (типа что-то пытаются влить, суют пальцы в рот, автодок etс), игрок может перестать отыгрывать отравление, до осмотра у врача.<br>Врач, после осмотра должен сообщить, каковы последствия отравления, обычно это травма.<br>Болен – заболеть можно по-разному, симптомы есть в карточке. Симптомы, нужно в меру сил отыгрывать.<br>Любой заболевший персонаж - беспомощен.<br>Следующие стадии болезни могут перевести персонажа в статус умершего<br>Биоблокада позволяет не отыгрывать симптомы<br>Без сознания<br>Оглушен/парализован - в этом состоянии игрок, закрывает глаза, падает и не двигается пока его не привели в чувство.<br>Если игроку надоело валяться а вокруг никого, он в качестве “случайного свидетеля нападения” идет до ближайшего игрока и приводит его к своему бесчувственному телу.<br>Оглушенный/парализованный получает Травму (см. выше как отыгрывать травму). Травма лечится только медиком в лаборатории.<br>Под контролем<br>Персонаж под контролем обязан выполнять следующие распоряжения того кто контролирует его:<br>Не двигаться - персонажу под контролем могут запретить двигаться и говорить.<br>Подчиняться - персонаж под контролем обязан выполнять распоряжения контролера - по перемещению, идти куда скажут.<br>Неловкий - персонаж под контролем не может использовать технику, программы, пилотировать шаттлы, использовать боевку и бежать.<br>Разновидности состояния “под контролем”<br>Под надзором - персонаж, задержанный следственными органами, не сидит в кутузке, когда с ним не работают следователи. Вместо этого ему выдается специальный пропуск, по которому видно что он под надзором. То же происходит с персонажами чья вина доказана, до отправки на землю или домой до суда (до конца игры), они продолжают играть но с меткой поднадзорного и следующими ограничениями:<br>персонаж под надзором не может участвовать в боевке, пользоваться оружием, участвовать в драке, глушить, хватать и прочее.<br>персонаж под надзором не может пользоваться техникой (кроме бабкома), красть игровые предметы, подбрасывать яд, бегать, проходить в любые сектора кроме красного без приглашения.<br>Персонаж под надзором имеет состояние “под контролем” для любого сотрудника СБ.<br>персонаж под надзором иммунен к социальному убийству.<br>Схвачен - значит, тебя держат минимум трое игроков, или игрок со спецспособностью, позволяющей удерживать персонажа в одиночку.<br>Схваченный не может вырываться, не может пользоваться оружием, даже если держит его в руках, он может только имитировать эти действия.<br>И те, кто хватает и те, кого хватают, не могут совершать приемы рукопашного боя, броски или просто резкие движения, которые могут причинить вред другому человеку. Схватывание производится настолько элегантно, насколько могут быть элегантны трое, набрасывающиеся на одного.<br>Нейроошейник -  если на персонажа надели нейроошейник, пока он был под контролем или беспомощен, или он позволил это сделать добровольно, он не может освободиться от нейроошейника самостоятельно.<br>Владелец кнопки от нейроошейника может мгновенно оглушить персонажа в ошейнике.<br>Любая попытка действий типа бега, использования оружия, снятия ошейника, драки и проч, немедленно оглушает персонажа в нейроошейнике.<br>Персонажа в нейроошейнике можно с его помощью пытать.<br>Ментальный контроль – персонаж находится под непосредственным влиянием телепата или выполняет отложенные приказы телепата, телепатическую программу, нейро-программу.<br>В этом состоянии персонаж не реагирует на окружающую действительность, кроме как выполняет полученные приказы.<br>Персонаж не вступает в игровые разговоры, не откликается на свое имя. Он идет прямо к цели.<br>ИСКЛЮЧЕНИЕ - персонаж под ментальным контролем может стрелять из бластера или станнера<br>Персонаж под ментальным контролем не подвержен оглушению и игнорирует первое попадание любым оружием<br>Нервный срыв – это состояние обострения психотравмы. Во время нервного срыва персонаж себя не контролирует, и отыгрывает ту эмоцию которую должен по бэкграунду. Окружающие должны четко понимать что у персонажа нервный срыв. Нервный срыв купируется транквилизатором."');

select data.set_attribute_value(data.get_object_id('library_document4'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document4'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document4'), data.get_attribute_id('name'), null, jsonb '"Модель деятельности Личности персонажа"');
select data.set_attribute_value(data.get_object_id('library_document4'), data.get_attribute_id('document_title'), null, jsonb '"Модель деятельности Личности персонажа"');
select data.set_attribute_value(data.get_object_id('library_document4'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document4'), data.get_attribute_id('content'), null, jsonb '"Эмоции – эмоциональные реакции персонажа, отыгрываемые игроком, в тех случаях, когда что-то провоцирует его на эмоцию. Эмоции помогают сделать некоторые реакции персонажа более харАктерными. В то же время они позволяют другим манипулировать данным персонажем.<br>Список эмоций фиксирован — отсутствующие в списке эмоции отыгрывать никто не запрещает, но игротехнически это ничего не будет значить, в отличие от эмоций из списка указанных.<br>Список эмоций:<br><br>Ужас – состояние, в котором персонаж пытается бежать, скрыться от объекта, вызывающего эмоцию. Игрок сам решит, перерастет ли ужас в панику или истерику, главное, что он не может находиться в одном помещении с объектом, вызывающим ужас, и не может нападать на него<br>Гнев, ненависть – состояние, заставляющее игрока нападать на объект, вызвавший его. Атаковать всеми силами, даже царапать ногтями, если нет оружия и проч. Если конкретного объекта, вызвавшего гнев, нет рядом, игрок должен начать нападать на все подряд и крушить окружающую обстановку (но аккуратно))))<br>Шок – состояние, в котором игрок не может делать ничего. Ступор. Нужно выглядеть как можно дебильнее, жевать губами, говорить междометиями и пр.<br>Эйфория – состояние, больше всего похожее на легкое опьянение. Персонаж в состоянии эйфории не может просто тихо сидеть в уголке и тащиться. Он обязан поделиться радостью бытия со всеми окружающими, восклицая «не правда ли какой прекрасный день!», вешаясь им на грудь со слезами радости и т.п. Необходимо высказать окружающим свои мысли и мнение об их персонах, поступках и моральном облике. Но радостно) Характерны легкая неадекватность и нарушение координации.<br>Депрессия – в этом состоянии персонаж находится в режиме «горлума». Он устал, ему ничего не нужно, его все ненавидят, весь мир – тщета, тлен и безысходность. Опять же сидеть в уголке, говоря «моя прелесть» не надо. Если у вашего персонажа депрессия, об этом должен узнать каждый обитатель станции, от командора, до уборщицы.<br><br>Ограничения, накладываемые эмоциями: находящийся в любом эмоциональном состоянии игрок не может работать со сложной медицинской, научной или инженерной техникой. Не может ничем руководить или управлять кораблем.<br>Не может пользоваться оружием. (замок открыть, сообщение написать) пользоваться можно.<br><br>Когда отыгрывать эмоции –  эмоции должны быть отыграны в следующих случаях:<br><br>Самим игроком в любой момент по желанию, как реакция на события игры. Постарайтесь быть ярким и выразительным, но без лишней наигранности и фальши.<br>Телепат может спровоцировать эмоцию персонажа, передав ему знак ПСИ.<br>Наркотики и стимуляторы  –  провоцируют эмоции (см. правила по медицине) и могут вызывать психотравмы.<br>Преступление против принципов<br>Шокирующее событие – (невозможность поступить в соответствии с ценностью, см. ниже)<br>Некоторые болезни<br>Длительность эмоционального состояния – обычно состояние длится так долго, как долго в поле вашего зрения находится вызвавший его объект.<br>Если вы устали или не готовы отыгрывать эмоцию, то можно перестать.<br>Состояния, вызванные наркотиками, длятся столько, сколько сказано в правилах по медицине<br><br>Психотравмы<br>Эмоции, это кратковременные вспышки - реакции на травмирующие события, позволяющие сделать вашу игру и игру окружающих ярче и насыщенней. Психотравмы - это серьезная деформация личности, вызванные внешними причинами, или поступками персонажа.<br>Психотравма - это патология личности. Если с ней ничего не делать, она развивается, прогрессирует и управляет поведением персонажа.<br>Психотравма может вызывать физиологические сбои в организме.<br>Как работает психотравма: При возникновении триггерной ситуации персонаж ощущает одну из эмоций.<br>Как получается психотравма.<br>Конфликт ценностей – может возникнуть ситуация, в которой персонаж вынужден будет выбирать, в соответствии с какой именно ценностью действовать, при этом поступая вопреки другой ценности. Например, ради любви к государству предать любовь к человеку (или наоборот). В этом случае персонаж после событий обращается к мастерам, получает от них психотравму.<br><br>Стрессовая ситуация, в которой персонаж не мог действовать в соответствии с ценностью, в связи с объективными или внутренними причинами (должен был спасти человека, но испугался, или там рухнувшая балка перегородила проход))), тоже вызывает психотравму и взрыв эмоции, с которой связана ценность (либо любой подходящей на выбор).<br><br>Ценности могут быть искажены или заменены умелым телепатом или психологом. Или игроком по желанию."');

select data.set_attribute_value(data.get_object_id('library_document5'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document5'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document5'), data.get_attribute_id('name'), null, jsonb '"Правила по игровой территории"');
select data.set_attribute_value(data.get_object_id('library_document5'), data.get_attribute_id('document_title'), null, jsonb '"Правила по игровой территории"');
select data.set_attribute_value(data.get_object_id('library_document5'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document5'), data.get_attribute_id('content'), null, jsonb '"Локации<br>• Игровая территория разбита на несколько локаций. Все локации являются внутренними помещениями Вавилона 5, или внутренними помещениями космических кораблей и т.п. Несколько локаций находятся на улице, т.н. «ближний космос», они будут специально обозначены мастерами.<br>• Производить любые игровые действия за пределами игровой территории, в том числе на улице – запрещено.<br>• Персонаж, не имеющий доступа к космическому кораблю, не может попасть на объекты в ближнем космосе.<br>Секторы<br>1. Сектор – часть станции Вавилон 5, ограниченная по доступу и имеющая определенное функциональное значение.<br>Секторы отмечаются специальным маркером – на входе в помещение висит табличка с номером уровня/помещения. Цвет таблички указывает на то в каком секторе находится помещение. Персонаж не имеющий права доступа в сектор, не может попасть ни в какие внутренние помещения сектора.<br>2. Жилые секторы Вавилона 5 –  В жилых секторах происходит вся основная игра и находятся каюты и рабочие помещения обитателей станции<br>Голубой сектор – сектор предназначен для жизни и работы персонала станции:<br>• Пассажирский причал и таможня. Это единственное место для абсолютного большинства игроков, откуда можно покинуть Вавилон 5, или через которое можно попасть на станцию. Доступ ограничен.<br>• Рубка Вавилона 5 – командный центр, рабочее место командования сектора – доступ ограничен.<br>• Жилые отсеки для работников станции. Доступ ограничен<br>• Медицинская лаборатория №1 – дислокация штаба медицинской службы и место для научных изысканий. Доступ ограничен.<br>• Изолятор – тюрьма, изолятор временного содержания, комната для допросов, там же штаб СБ станции. Доступ ограничен.<br>Красный сектор – сектор для приезжих, не являющихся дипломатами, и также деловая и торговая часть станции. Все заведения, казино, кофейни, офисы негосударственных контор.<br>• Зокало - ночной клуб, казино и место неофициальных встреч дипломатов и торговцев.<br>• Гостиницы для приезжих – жилые отсеки для посетителей и технического персонала с низким уровнем допуска. Плата за использование вносится в бюджет станции.<br>Зелёный сектор – место расположения всех дипломатических представительств, а так же рабочих помещений ассамблеи, и Сады – система регенерации воздуха:<br>• Сады – если игрокам требуется переместиться из одного здания арендуемой базы в другое, по улице, место через которое они перемещаются называется «сады». В садах можно перемещаться только в одиночку. Разговаривать с другими игроками запрещено. Взаимодействовать с другими игроками (любыми способами) запрещено. «Сады» нужны только для того, чтобы переместится из пункта А в пункт Б, ну или покурить). Доступ есть у всех жителей станции.<br>• Дипломатические миссии - апартаменты послов, являются территорией той расы, которую они представляют. Доступ ограничен.<br>• Зал Ассамблеи – основной зал где проходят заседания Ассамблеи – доступ у всех<br>• Зал Лиги и подобные ему помещения, переговорные комнаты, предназначены для приватного общения послов и членов делегаций.<br>3. Технические секторы Вавилона 5 и моделируемые объекты в ближнем космосе – локации, представленные на игре в основном виртуально, в виде нескольких помещений не используемых для основной игры. В Технических секторах происходят удаленные приключения и исследования. Конкретная модель будет изложена в другом разделе настоящих правил.<br>Жёлтый сектор – с нулевой силой тяжести, в котором находятся все причалы, трюмы, ремонтные службы и оборонительные системы станции. Попасть туда можно только через таможню и терминал в синем секторе. В том числе в желтом секторе есть отсек истребителей, через который можно покинуть станцию на истребителе. Вход в него находится в синем секторе. Функционирование этого сектора важно для стратегической игры.<br>Серый сектор – содержит в себе системы жизнеобеспечения, трубы системы охлаждения ядерного реактора и другие чисто технические системы. Используется на игре, чтобы устранять неисправности основного оборудования станции. Те части, которые не используются как грузовые трюмы, считаются недостроенными и заброшенными.<br>Коричневый сектор – является исключительно соединением машинных и технических отсеков.<br>Вавилон 1 – пустая оболочка, оставшаяся от первой станции проекта, после взрыва реактора. Все ценное оборудование оттуда было вывезено. Корпус очень сильно «фонит» - он до сих пор радиоактивен. Попасть туда без костюма радиационной защиты, означает мгновенную смерть. В пространстве Вавилона 1, из-за высокого уровня радиации недоступна любая связь.<br>Планета Эпсилон и прочие исследовательские локации – планету Эпсилон можно попробовать исследовать. На игре будут и другие удаленные локации «ближнего космоса» для исследования.<br>Специальные правила, действующие в игровых локациях<br>1. Виртуальная охрана – в голубом секторе полно сотрудников секьюрити станции. Поэтому любой персонаж кроме сотрудника СБ, командира станции и первого помощника, который достал оружие в этом секторе сразу считается оглушенным. Командир станции может издать приказ, разрешающий ношение и применение оружия конкретным персонажам, таким образом отменив это правило в их отношении.<br>2. Все что “по жизни” видно и слышно из других помещений, видно и слышно по игре<br>Неигровой территории во время игры для персонажей не существует. Если игроку понадобится отдохнуть или психологическая разгрузка, мастера конечно помогут ему выйти из игры.<br>Правила по доступу в локации<br>1. Чтобы попасть в определенные помещения Вавилона 5 нужно иметь электронное удостоверение с допуском в сектор. Удостоверение имеет видимую цветную кодификацию по доступу к секторам.<br>2. Удостоверение всегда носится на груди – открыто это правило станции (т.е. можно не носить – но это повод для СБ арестовать вас)<br>3. Удостоверение, а значит и допуск куда угодно, может быть аннулировано командованием станции, мастера изымают пропуск у персонажа, с которым случилось подобное. Также командование может выдать персонажу новое удостоверение.<br>3.1. Удостоверение “вездеход” есть у сотрудников спецслужб. Позволяет игнорировать правила доступа в том числе и в личные каюты.<br>4. «Схемы станции» - игровой предмет, позволяющий нарушать правила по допуску в сектора, и дающий понимание того, где расположены конкретные системы жизнеобеспечения и другое оборудование станции. Нахождение схем станции у любого персонажа кроме членов экипажа – незаконно. Персонаж, попавшийся со схемами на руках, может быть оштрафован – это игровое действие.<br>5. Покинуть территорию Вавилона-5 можно только через пассажирский терминал, или желтый сектор - отсек истребителей, личный шатл. У покидающего должно быть разрешение на выход от СБ станции. Воспользоваться любым кораблем - может только персонаж, у которого есть диплом пилота.<br>6. Уйти на территорию технических (желтого, серого и коричневого) секторов станции можно только имея пропуск соответствующего цвета, удостоверение “вездеход”, взломав замки на дверях сектора, или имея «схемы станции» - они позволяют проходить мимо охранных устройств и минуя обычные пути.<br>• Персонаж имеющий допуск может провести с собой персонажа, допуска, не имеющего куда угодно, однако он должен физически пройти вместе с ним весь путь до нужного помещения. Проводить персонажа не имеющего допуска в помещения синего, и всех технических секторов – серьезное нарушение закона и правил станции. В Зеленый сектор можно водить кого попало<br>• Использовать чужое удостоверение в отсутствие его владельца возможно только для техников или электрокинетиков. Нахождение чужого удостоверения у персонажа незаконно.<br>• Разовый пропуск – может быть выдан СБ станции любому персонажу. Выдача отмечается в журнале (на сайте). Разовый пропуск, для использования обязательно пропускается чрез сканер QR кодов, с устройства игрока.<br>• Доступ к локациям в ближнем космосе возможен только при наличии у персонажа космического корабля на борту станции (т.е. в желтом секторе). Наличие корабля ВОЗЛЕ станции не позволяет покинуть ее.<br>• Кораблям необходимо разрешение рубки на попадание внутрь станции и для того чтобы ее покинуть. Разрешение запрашивается в системе бабком у персонажа “рубка Вавилона”.<br>Правила по доступу в помещения и замкам<br>Все помещения на станции имеют электронные замки. Если дверь закрыта, помещение автоматически считается запертым.<br>• Чтобы попасть в запертое помещение нужно иметь допуск в сектор, и знать код замка. Если у вас есть код замка, а доступа в сектор у вас нет, вы не можете зайти в этот блок помещений станции.<br>• Код замка набирается в электронном устройстве игрока на специальном разделе сайта, всякий раз, когда игрок хочет попасть в помещение<br>• Взлом помещения, как и любых компьютерных систем моделируется не умениями персонажа, а наличием специального оборудования – электронных отмычек или хакерских программ.<br>• Сейф – должен быть похож на сейф. Запирать сейфы «по жизни» запрещено, но, если дверка закрыта – он считается запертым. Для открытия нужен код доступа. В сейфе можно хранить игровые вещи и документы. Хранить в сейфе другой сейф ЗАПРЕЩЕНО!<br>• Некоторые замки в качестве кода используют биометрические параметры владельца. Такой замок обычному взлому не поддается.<br>Специальные правила окружающей среды<br>В некоторых локациях действуют специальные правила окружающей среды.<br>• Радиация – ясно видимый знак радиации в помещении. Смертельно без средств защиты. В помещениях, зараженных радиацией всегда действует правило «нет связи».<br>• Нет связи – специальный знак, увидев который игрок обязан перевести свое электронное устройство в «режим полета». В помещениях с радиацией это правило действует автоматически.<br>• Вакуум – знак вакуума означает, что помещение подверглось разгерметизации, для выживания необходим специальный костюм<br>• Некислородная атмосфера – помещения со знаком некислородной атмосферы требуют от большинства персонажей для нахождения в них специальной маски-респиратора. Те персонажи, кто может дышать в таких помещениях, обязаны носить респиратор во всех остальных помещениях станции."');

select data.set_attribute_value(data.get_object_id('library_document6'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document6'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document6'), data.get_attribute_id('name'), null, jsonb '"Правила по дипломатии"');
select data.set_attribute_value(data.get_object_id('library_document6'), data.get_attribute_id('document_title'), null, jsonb '"Правила по дипломатии"');
select data.set_attribute_value(data.get_object_id('library_document6'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document6'), data.get_attribute_id('content'), null, jsonb '"ОПРЕДЕЛЕНИЕ ПОНЯТИЙ<br>Цивилизация – орден, сообщество, государство, имеющее самостоятельную суверенную внутреннюю и внешнюю политику.<br>Кластер цивилизации – крупная политическая сила в обществе цивилизации. Например, корпорация или колония, или орден, или другая организация, тайное общество и т.п. Все послы на Вавилоне 5 - руководители конкретных кластеров, они управляют ими и получают свои ресурсы от них.<br>Соглашение – письменный договор между цивилизациями, опубликованный в сети Бабком, если они входят в Ассамблею (в том числе с правом наблюдения), или оформленный в виде «инфокристалла», если соглашение тайное или одна из цивилизаций не член ассамблеи.<br> Соглашение исполняется автоматически.<br> Соглашение может заключаться от лица Цивилизации. В этом случае оно должно быть подписано ВСЕМИ послами цивилизации на Вавилоне 5, или высшим должностным лицом (ратифицировано высшим представительным органом) цивилизации.<br> Соглашение может заключаться от лица Кластера Цивилизации -  Вторым участником такого соглашения может быть цивилизация, корпорация, организация, и т.п. Такие соглашения подписываются руководителями кластера или их законными представителями.<br> Необходимый Уровень Отношений - Соглашения между кластерами цивилизации (корпорациями колониями, и пр.) и кластерами или целиком другой цивилизации могут заключаться только при соответствующем уровне отношений между цивилизациями (см. Уровни Отношений) или должны быть тайными.<br> Для заключения и разрыва заключенного соглашения стороны тратят Влияние.<br> Соглашения могут включать какое угодно количество сторон. Важно что при этом, все стороны заключающие общее соглашение должны быть на уровне отношений позволяющем такое соглашение, со ВСЕМИ подписантами.<br>Посредник – официальный статус цивилизации или комитета Ассамблеи. Посредник помогает заключить двум цивилизациям - клиентам, соглашение уровнем выше чем уровень отношений с ними. Нельзя заключить базовое соглашение уровня с помощью посредника.<br>При уровне отношений Холодная война – посредник обязателен, и он может помогать заключать только соглашения уровня Холодная война.<br>Посредник обязан обладать более высоким уровнем отношений хотя бы с одним из клиентов, чем текущий текущий уровень отношений цивилизаций клиентов.<br>Тайные соглашения – могут заключаться только между кластерами цивилизации или между кластером и цивилизацией.<br>Тайные соглашения могут быть только торговыми сделками, или сделками по обмену технологиями, или рамочными (соглашение о намерениях).<br>Тайные соглашения являются незаконными для обеих цивилизаций. Их обнародование приводит к автоматической отставке, аресту, расстрелу лиц, подписавших соглашение, автоматическому (без затрат влияния) разрыву соглашения, и плохим последствиям для кластеров - участников.<br>Тайные соглашения не зависят от уровня отношений цивилизаций<br>Тайные соглашения заключаются только через посредника! Обычным посредником для тайных отношений является Антарес, Синайская Хризантема или Арталан - преступный синдикат Лиги.<br>Посредник является гарантом соблюдения тайного соглашения, требования о его расторжении направляются посреднику, он же их и ратифицирует.<br>Парадигмы цивилизаций - основные тенденции общественные настроения, преобладающие паттерны поведения членов цивилизации или сообщества.<br>Есть пять “линеек” парадигм, положение ползунка на которых определяет текущее состояние общества:<br><br>Парадигмы, максимальные значения<br><table><tr><td>Тоталитаризм<td>-10<td>Анархия<td>10<td><b>Власть</b><tr><td>Государство<td>-10<td>Личность<td>10<td><b>Общественный строй</b><tr><td>Насилие<td>-10<td>Пацифизм<td>10<td><b>Агрессивность</b><tr><td>Материализм<td>-10<td>Духовность<td>10<td><b>Отношение к познанию</b><tr><td>Ксенофобия<td>-10<td>Мультикультурализм<td>10<td><b>Терпимость</b></table><br>Сдвиг цивилизационных парадигм в результате заключения соглашений. Некоторые соглашения, будучи заключенными, сдвигают парадигмы заключивших их цивилизаций по следующим правилам:<br>Если заключение Соглашение сдвигает парадигмы цивилизации, это указывается в самом соглашении в данных правилах. Если такой эффект не указан – ранг парадигмы, при заключении соглашения не меняется.<br>Сдвиг парадигмы – уменьшение или увеличение ранга парадигмы на 1 единицу.<br>Более развитая цивилизация (с более высоким ТУ) сдвигает ранг парадигмы менее развитой.<br>Цивилизации с одинаковым ТУ сдвигают ранги парадигм друг друга.<br>Если цивилизации имеют совпадающие парадигмы, то ранги этих парадигм не двигаются.<br><br>АССАМБЛЕЯ И КОНСУЛЬТАТИВНЫЙ СОВЕТ<br>Член ассамблеи – цивилизация подписавшая Кодекс Ассамблеи.<br>Наблюдатель – цивилизация, рамочно вошедшая в ассамблею, без взятия на себя обязательств. Послы наблюдатели имеют право только личной неприкосновенности и на выступления с Декларациями и Нотами, остальных прав не имеют<br>Консультативный совет (КС) – руководящий орган ассамблеи, состоящий из пяти цивилизаций: Земной альянс, Центавр, Нарн, Ворлон, Минбари. Решения КС в виде рекомендаций обязательны для всех цивилизаций - членов Ассамблеи и в перерыве между сессиями Ассамблеи обладают юридической силой ее постановлений.<br>Комитет Ассамблеи (КА)– На игре Геометрия Теней присутствуют только председатели комитетов. Они исполняют все обязанности комитета. Есть пять профильных комитетов Ассамблеи – Комитет по торговле, Комитет по Научно-техническому сотрудничеству и бюджету, Гуманитарный Комитет, Комитет по Опеке.<br>Члены КС не могут входить в комитеты.<br>Профильный КА обладает правом законодательной инициативы, внесения проектов Решений КС и Постановлений Ассамблеи, от своего лица. Расследования поручают тоже профильным комитетам.<br>Профильный комитет может выступать посредником для любой пары цивилизаций, при заключении соответствующего Соглашения. При этом Комитет имеет право отклонить Соглашение если оно его не устраивает.<br>Посол – представитель цивилизации в ассамблее, обладающий определенными правами.<br>Личная неприкосновенность – посла могут только выслать со станции, в распоряжение его цивилизации, но не могут арестовать, обыскивать, и пр. Решение об экстрадиции принимает Консультативный Совет<br>Право выступить в КС с заявлением или нотой, в отношении обсуждаемого вопроса или другой цивилизации, обратиться в консультативный совет с требованием рассмотреть срочный вопрос или жалобу<br>Право предложения проектов решений КС<br>Право голосования на заседании Консультативного совета.<br>Решение Консультативного Совета Ассамблеи – документ, который обязателен к исполнению всеми членами ассамблеи. Может быть отменен Постановлением Ассамблеи. Принимается только в рамках компетенции КС.<br> Декларация – документ, который публикует Ассамблея, как постановление, КС как решение, или Цивилизация как акт о намерениях. Декларации устанавливают базовые принципы, основы для будущих действий- фактически рамочные правила для определенных взаимоотношений. Вся вводная часть Кодекса Ассамблеи – это Декларация. Исполнение декларации – обаятельно для того, кто ее опубликовал, и всех его кластеров.<br>Соглашения между цивилизациями – подробно описаны в правилах по внешней политике. Все соглашения публикуются в Бабком (кроме тайных).<br>Регламент голосования КС:<br>Голосование консультативного совета – чаще всего происходит простым поднятием рук.<br>Заседания КС ведет посол Земного Альянса.<br>Подсчет голосов и наблюдение за регламентом осуществляет Секретарь Ассамблеи.<br>Все члены Ассамблеи не имеющие представительства в КС имеют в сумме один решающий голос по вопросам обсуждавшимся в КС, который они определяют внутренним голосованием между собой. Они могут наложить на решение совета Вето.<br>Права консультативного совета<br>Право рекомендации – КС может выступить с рекомендацией к любому члену Ассамблеи. Рекомендации к члену Ассамблеи обязательны к исполнению. Несоблюдение рекомендаций может привести к наложению санкций на цивилизацию или приостановке членства в Ассамблее.<br>Санкции – совет может наложить санкции на любую цивилизацию. Все торговые сделки с этой цивилизацией и ее кластерами у членов ассамблеи немедленно разрываются.<br>Приостановление членства – Совет может приостановить членство цивилизации, за нарушения кодекса и прочие косяки, это переводит цивилизацию в разряд наблюдателей.<br>Введение миротворческого флота - КС может послать свой миротворческий флот для остановки боевых действий между цивилизациями - членами ассамблеи. Также КС может обратиться с требованием к членам ассамблеи, по предоставлению военной поддержки решениям КС.<br><br><br>УРОВНИ ОТНОШЕНИЙ МЕЖДУ ЦИВИЛИЗАЦИЯМИ:<br>Существует 5 уровней отношений между цивилизациями – каждый из которых дает бонусы цивилизациям, для сотрудничества, но и накладывает на них определенные ограничения.<br>Для перехода от одного уровня отношений к другому, необходимо заключить ВСЕ соглашения, доступные цивилизациям на текущем уровне.<br>На каждом более высоком уровне отношений заключение соглашений стоит дешевле для всех сторон, а разрыв соглашений стоит дороже для всех сторон.<br>НЕТ ОТНОШЕНИЙ<br>Цивилизации ранее не встречались или состоялся первый контакт. С этого уровня возможен переход либо к дипломатическим отношениям, после подписания соглашения о разделе сфер влияния, либо к холодной войне или войне, если отношения между цивилизациями недружественные или контакт не задался))<br>Базовая стоимость заключения соглашений этого уровня – 1 000 000<br>Базовая стоимость расторжения соглашений этого уровня – 100 000<br><br>ХОЛОДНАЯ ВОЙНА/война:<br>Этот уровень отношений наступает, когда между цивилизациями начаты военные действия.<br>Необходимость посредника. Официальное общение цивилизаций происходит только через официального посредника, цивилизацию, состоящую с обеими сторонами хотя бы в дипломатических отношениях. через Гуманитарный Комитет ГА, либо вообще не происходит<br>Военные действия - против представителей цивилизации с которой холодная война или против ее колоний, организаций и структур возможно все. Даже обычный капитан боевого корабля может атаковать любых представителей другой цивилизации и его не накажут.<br>Базовая стоимость заключения соглашений этого уровня – 1 000 000<br>Базовая стоимость расторжения соглашений этого уровня – 100 000<br> Перечень соглашений уровня Холодная Война, после состоявшихся боевых действий:<br>«Об объявлении Войны» это не соглашение а нота или меморандум. Предъявляется второй стороне в явочном порядке. Удешевляет все приказы войскам вдвое. Может следовать за разрывом соглашения о дипломатических отношениях и отзыва послов.<br>«О прекращении огня». Только если были военные действия. Может заключаться ВМЕСТО соглашения «О капитуляции и контрибуции». Предполагает установление временного периода, во время которого не ведутся военные действия. При наличии данного соглашения – стоимость посылки флотов или наземных сил в атаку против стороны соглашения утраивается.<br>ЛИБО  «О капитуляции и контрибуции». Только если были военные действия. Вместо соглашения «О прекращении огня». Одна из сторон капитулирует. Ее правительство расформировывается. Проигравшая сторона обязуется выплатить контрибуцию, в размере установленном победившей стороной. Выигравшие могут оккупировать территории проигравших.<br>Необязательное соглашение:  «О режиме содержания и обмене военнопленными». Только если были военные действия. Позволяет обмениваться пленными - или договариваться о режиме их содержания.<br><br><br>ДИПЛОМАТИЧЕСКИЕ ОТНОШЕНИЯ:<br>Обмен послами, установление контакта. На этом уровне отношений невозможно частное проявление агрессии (на уровне капитан корабля), атаковать могут кластеры и цивилизации. Приказы на атаку стоят втрое дороже. Для официального объявления войны нападения все соглашения этого уровня должны быть разорваны.<br>Базовая стоимость заключения соглашений этого уровня – 800 000<br>Базовая стоимость разрыва соглашений этого уровня – 300 000<br>Соглашения уровня Дипломатические отношения:<br>«О разграничении сфер влияния»  (о демаркационной линии). Базовое соглашение уровня. Заключается первым. Если у сторон есть общая граница или звездные системы, входящие в сферу интересов этих сторон, перед заключением соглашения о дипломатических отношениях нужно обязательно разграничить сферы влияния, признать границы и принадлежность территорий цивилизаций.<br>«Об установлении дипломатических отношений». Заключается вторым. Если оно не заключено, никакие другие соглашения этого уровня, невозможны. Стороны оговаривают статус дипломатических отношений, декларируют взаимное намерение к сближению, и гарантируют дипломатическую неприкосновенность посланников. Также устанавливается место и количество посольств и консульств.<br> «О ненападении». Если между цивилизаций действует это соглашение – приказы о внезапной атаке начинают стоить обоим сторонам в шесть раз дороже, чем обычно.<br>«О разграничении сфер влияния» (о демаркационной линии)». если у сторон есть общая граница, или системы входящие взаимно в сферу их интересов, перед заключением соглашения о дипломатических отношениях обязательно разграничить сферы влияния, признать границы и принадлежность территорий цивилизаций. Без этого невозможны дипломатические соглашения.<br>«О культурных и гуманитарных контактах». Рамочное соглашение. Предполагает обмен культурными миссиями. Позволяет делать запрос или предоставление гуманитарной помощи второй стороне. Провоцирует сдвиг рангов парадигм цивилизаций участников.<br><br>СОТРУДНИЧЕСТВО<br>Уровень отношений, разрешающий торговлю, культурный обмен, и исключающий внезапный разрыв дипломатических отношений, который может последовать только после разрыва соглашения «О сотрудничестве». На этом уровне исключена агрессия одной цивилизации или кластеров этой цивилизации против второго участника соглашения. Уровень достигается при заключении всех соглашений уровня “Дипломатические отношения”<br>Базовая стоимость заключения соглашений этого уровня – 500 000<br>Базовая стоимость разрыва соглашений этого уровня – 500 000<br>Соглашения данного уровня:<br>«О сотрудничестве». Заключается первым. В нем оговаривается в каких именно сферах сотрудничают между собой цивилизации.<br>«О пошлинах». Рамочное соглашение - открывающее возможность заключения легальных сделок между цивилизациями. Сторонами оговаривается взаимная пошлина, взимаемая цивилизациями с дохода всех торговых соглашений, заключаемых их кластерами, корпорациями, или колониями. Минимальная пошлина 5%. Открывает банковские, сырьевые рынки, рынки медицинских услуг, рынки гиперкосмоса. Делает возможным для корпораций, кластеров и государств, владение совместными активами типа “месторождение”, “гражданская верфь”, завод, руины.<br>«Об экстрадиции преступников».  Соглашение о совместном розыске и выдаче преступников.<br>«О культурном обмене». Данное соглашение открывает возможность торговли ресурсами второго уровня, но только при переходе к уровню Партнерство. Провоцирует сдвиг рангов парадигм цивилизаций участников.<br>«Об Оборонительном союзе». Соглашение о совместных действиях против агрессора. Открывает рынок ВПК в области оружия для наземных сил.<br>«О визовом режиме». Позволяет представителям цивилизаций посещать колонии друг друга. Могут быть оговорены ограничения на посещения (временные или территориальные).<br><br>ПАРТНЕРСТВО<br>Уровень сотрудничества и взаимного доверия очень высок. Сотрудничество взаимовыгодно. Достигается только при совпадении у цивилизаций трех Парадигм состояния (см. правила по внутренней политике) из пяти. Взаимная агрессия невозможна.<br>Базовая стоимость соглашений этого уровня – 300 000<br>Базовая стоимость разрыва соглашений этого уровня – 800 000<br>Соглашения данного уровня:<br>«О партнерстве». Заключается первым. Провоцирует сдвиг рангов парадигм цивилизаций участников. Обязательно оговаривает сферы партнерской деятельности.<br>«О научно-техническом сотрудничестве». Открывает рынок технологий. Делает возможным для корпораций, кластеров и государств, владение совместными активами типа Лабораторно-Исследовательский Коплекс. Позволяет торговлю технологиями.<br>«О Военном альянсе». Открывает рынок ВПК. Делает возможным для корпораций, кластеров и государств, владение совместными активами типа военная верфь, военный завод. Предусматривает совместное ведение войн.<br>«О беспошлинной торговле». Отменяет торговые пошлины<br>«О режиме свободного посещения». Отменяет визовый режим.<br><br>ИНТЕГРАЦИЯ<br>Цивилизации де юро оставаясь разными государствами, де факто объединяются.<br>В соглашении об интеграции оговаривается условия интеграции и структура нового сообщества.<br>Базовая стоимость соглашений этого уровня – 100 000<br>Базовая стоимость разрыва соглашений этого уровня – 1 000 000"');

select data.set_attribute_value(data.get_object_id('library_document7'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document7'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document7'), data.get_attribute_id('name'), null, jsonb '"Правила по стратегии"');
select data.set_attribute_value(data.get_object_id('library_document7'), data.get_attribute_id('document_title'), null, jsonb '"Правила по стратегии"');
select data.set_attribute_value(data.get_object_id('library_document7'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document7'), data.get_attribute_id('content'), null, jsonb '"Определение понятий:<br>Глобальная карта - глобальная карта нужна для стратегического планирования военных операций и разведки. Мастера сделают достаточное количество ее копий. Глобальная карта будет висеть в зале ассамблеи. На стратегической карте будут отражаться глобальные события, такие как обрывы связи с системой, проблемы с маяками, и пр.<br>Звездная Система - объект стратегической карты,  обозначенный на нем стилизованный изображением звезды.<br>Навигационная пара - белые линии на карте обозначают маршруты между ЗС, проложенные с помощью навигационных пар маяков.<br>Прыжок - под прыжком подразумевается расстояние от одной Звездной Системы до другой, соединенной с ней посредством навигационной пары.<br>Зона перехода - стационарный вортекс генератор, позволяющий перемещаться в систему торговым и грузовым кораблям. Если Зона перехода не работает - Активы находящиеся в системе, перестают учитываться в Капитализации корпорации. Эти активы не могут поставлять технологии и вообще становятся недоступными во всех смыслах. Зона перехода может быть уничтожена во время военных действий или отключены хозяином ЗС.<br>Квант времени - время в игре за которое исполняется любой приказ на стратегической карте. Квант времени на Геометрии Теней равен двум часам. Это означает, что посланный в атаку флот будет в соседней системе через два часа, приказ на отключение или включение Зоны перехода будет исполнен через два часа, и т.п.<br>Командир Ударного Флота - игрок имеющий статус командира УФ может отдавть непосредственные приказы ударным флотам, не советуясь ни с кем. Он имеет на руках карточки БК, карточки ресурсов,  и карточки Усиления и Действия, которые и использует во время боя в своей системе, или во время боя который был инициирован по его приказу.<br>Приказ - отдается УФ (ударный флот) или РФ (разведывательный флот)на глобальной карте. Базовая стоимость приказа для непосредственного командира 50 000 влияния, для вышестоящего командира 100 000 влияния. Приказ отдается в письменной форме на бланке. Игрок помечает время отдачи приказа и время окончания приказа (через два часа) и как можно скорее передает его мастерам.<br>Карта ЗС - на глобальной карте происходит только перемещение и планирование. Война происходит на карте ЗС - локальной карте конкретной Звездной системы.<br>Ударный Флот - военный флот, который может перемещаться по навигационным путям из одной ЗС в другую, игнорируя наличие или отсутствие в системе Зоны перехода. <br>Разведывательный флот - корабли разведчики, быстрые, малозаметные. Разведчик может, используя ресурс Квантум 40, увеличивать свой радиус дальности перемещения (по сравнению с обычным для цивилизации). За 1 квантум и 1 инфокристалл радиус действия увеличивается на один незаметный прыжок. О входе корабля разведчика в ЗС, хозяин этой ЗС не извещается, пока разведчик не решает начать боевые действия.<br>Передовая База - ЗС цивилизации, связанная хотя бы одним навигационным путем с ЗС другой цивилизации. От передовых баз отмеряется радиус дальности перемещения флота. Внутри цивилизации сперва производится перемещение войск до передовых баз, или с одной передовой базы на другую (квант времени) и только после этого можно перемещаться за границы влияния цивилизации.<br>Радиус дальности перемещения флота - это количество прыжков, которое корабль может совершить, не выходя в реальное пространство, удаляясь от своей передовой базы.<br>У ЗА, Лиги, Нарна, Антареса  радиус 0. <br>У Центавра и Минбари (Анлашок) радиус 1. <br>У Дракхов и Иккариан 2.<br>Древние не ограничены радиусом дальности.<br>Перемещение в радиусе дальности осуществляется за квант времени. <br>Прохождение через чужую ЗС, без выхода в реальный космос - обнаруживается средствами слежения. Поэтому НА конверте с приказом (см. ниже) о таком перемещении обязательно пишутся названия систем, мимо которых идет перемещение.<br>Флот, переместившийся на максимальный радиус дальности, может либо оставаться в системе, в которую переместился (приказ о боеготовности либо об обороне), либо должен вернуться на свою ближайшую передовую базу (приказ о перемещении).<br>Цивилизация с которой заключено Соглашение об обороне (уровень отношений сотрудничество), может предоставить союзнику свои системы в качестве передовых баз. Это должно быть отдельное соглашение, если системы не перечислены в базовом соглашении об обороне.<br>Боевые карты, Карты технологий и ресурсы - локальные бои напоминают бои в МТГ. Есть Боевые карты, - в основном корабли. Карты технологий позволяют увеличивать мощь Боевых карт или совершать специальные действия во время или до боя. Ресурсы определяют максимальное количество используемых в одном бою Боевых карт, и/или Карт Усиления и Действия.<br><br>Действия на глобальной карте - приказы<br>Все действия на глобальной карте совершаются только по письменному приказу. <br>Все приказы имеют стоимость во влиянии - базовая стоимость 100 000 влияния.<br>Приказ исполняется в течении Кванта времени, и считается полностью исполненным только по окончании двух часов. Во время двухчасового исполнения приказа отменить его нельзя.<br>Приказ передается мастеру максимально быстро, после того как его подписал командир. <br>Приказы, переданные мастеру меньше чем за час до номинального времени их исполнения, исполняться не будут или к их исполнению будет прибавлен час.<br>К приказу может прилагаться карточка технологии “Подавление тахионной связи”. В этом случае бой отыгрывается его инициатором и мастером. Тем, кто не участвовал в бою, результаты становятся известны либо в случае поражения инициатора, либо после разведки системы.<br>приказ это лист бумаги, на котором написано, например “перемещение из системы Х в систему У”. Листок складывается внутрь надписью, снаружи пишется время, в которое приказ отдан, время исполнения и имя персонажа, отдавшего приказ. Также игрок должен перевести Влияние в системе Бабком. Влияние переводится на счет “Боевые приказы”. В таком виде приказ отдается мастеру. Мастер проверяет поступление средств.<br>Выполнение приказов - во время, обозначенное на конверте, как конец кванта времени, мастер вскрывает конверт и реализует приказ. <br>При нападении на ЗС, если среди карт технологий есть “Подавление тахионной связи” мастер находит автора приказа, и они играют бой в мастерятнике. Все остальные знают только, что с системой пропала связь. Если глушилки нет, извещается сторона на которую напали, и стороны в зале ассамблеи разыгрывают бой между собой, присутствовать могут все желающие. <br>Список приказов:<br>Перемещение - приказ флоту переместиться в радиусе действия флота. Перемещатся могут только флоты находящиеся в состоянии боевой готовности, и только флоты от передовых баз.<br>Разведка системы - после разведки отдавший приказ получает полную информацию о системе. <br>Шпионаж - приказ может отдаваться только руководителем разведки цивилизации или преступным кластером. Шпионаж позволяет украсть одну карточку технологии. Краденая технология обычно дешевле купленной. Технология выбирается случайным образом из карточек технологий хозяина системы. Если у него ничего нет, то ничего и не украдено. Хозяину украденной технологии мастер сообщает о цивилизации, отдавшей приказ на шпионаж (без персоналий).<br>Геноцид - приказ об уничтожении инфраструктуры и жизни в Звездной системе.<br>Саботаж - приказ может отдаваться только руководителем разведки цивилизации или преступным кластером. Саботаж повреждает конкретный актив, который, как думает тот, кто отдавал приказ, присутствует в ЗС. Стоимость Актива снижается на половину суммы, потраченной на приказ о саботаже. В один приказ о саботаже можно вложить от 50 000 до 1 000 000 влияния.<br>Отключение/включение Зоны перехода - приказ о блокировании стационарного вортекс-генератора системы или о его запуске. Если Зона перехода не заблокирована, в систему в принципе может войти любой флот, в том числе без вортекс генераторов, имеющий коды доступа или взломавший доступ.<br><br>Локальные бои:<br><br>Карточки ресурсов - есть два вида ресурсов - инфо-кристаллы и квантум-40. Корпорация, владеющая добывающим комплексом может иметь одну карточку кристаллов и одну карточку квантум-40 на один комплекс. Эти карточки корпорации “сдают в аренду” командирам ударных флотов. Карточка ресурсов поворачиваются для вызова БК или КУ. В начале следующего хода они разворачиваются обратно.<br>Боевые карточки - карточки имеющие два параметра - атака/защита. Кроме этого, каждая БК имеет возможность 1 раз в бой задействовать каждую технологию из списка на карте. Параметры брони и орудий действуют постоянно и уже учтены в характеристиках карты. Специальные же свойства брони и орудий применяются 1 раз за бой. Задействование технологии БК не требует мнфокристаллов. На следующий ход действие использованной технологии заканчивается. <br>Корпорации владеют одной БК на каждую верфь. Эти карты они по договору передают командиру ударного флота. В бою вызывается за 1 квантум-40.<br>Карты технологий: Картами технологий владеют корпорации, по одной карте усиления и по одной карте действия на каждый лабораторно-исследовательский комплекс. Эти карты сдаются в аренду командирам ударных флотов.<br>Основное правило сочетания карт технологий - свойства карты из одного раздела (орудия, связь и двигатели, Способность, Броня) не складываются,неважно усиление карта или действие.<br>Нельзя применить на БК карты действия из одного раздела технологий. <br>Нельзя заменить вызванную карту технологий или убрать ее с поля.<br>Карты усиления -  действуют на все боевые карты в системе согласно описанию. Вызов стоит 2 кристалла и 2 квантума-40.<br>Карточки действия -  действуют на одну Боевую Карту до конца боя, и могут применяться в любой момент боя за 1 инфокристалл.<br><br>Защита системы - по умолчанию 5 хитов. Присутствие в системе Активов увеличивает Защиту системы (+5 хитов за каждый Актив).<br>Атакующий считается победителем, если он уничтожил все Боевые карты защитника и/или снял всю Защиту системы. Если Атакующий не столкнулся в Звездной системе с оппонентом, он автоматически снимает все хиты Защиты, а также может отдать приказ Геноцид.  <br>Защита системы считается победителем, если уничтожены все Боевые карты атакующего (или он отступил). <br>Если хиты Защиты системы были полностью сняты, все Активы системы теряют 50% стоимости. Если не полностью - 20%.<br><br>Первая фаза - подготовка:<br>При прибытии сил вторжения в ЗС на стол выкладывается карта системы.<br>Обе стороны открыто выкладывают карты ресурсов. Карты ресурсов не могут быть добавлены в следующих фазах боя.<br>Обе стороны выкладывают Карты технологий Усиления, рубашками кверху.<br>Обе стороны выкладывают Боевые карты, рубашками кверху.<br>Обе стороны выкладывают Карты технологий Действия, рубашками кверху.<br>Вторая фаза -  космический бой:<br>Первый ход. Начинают Атакующие.<br>Обе стороны, сначала Атакующий, потом Защита вскрывают карты технологий-усиления, по очереди (по одной карте). За вскрытие каждой карты платится 2 инфокристалла и 2 квантума. Использованные карты ресурсов поворачиваются.<br>Атакующие вскрывают свои боевые карты, по очереди с Защитой, по одной. Каждая вскрытая карта стоит 1 квантум. Каждая сторона может закончить вскрывать карты в любой момент.<br>Боевые карты одной цивилизации можно складывать вместе (нельзя, например, сложить Шарлин и Омегу), но не более двух. При этом параметр атаки сложенных карт суммируется. Параметр защиты у каждой карты остается “своим”. Если эта “стопка” блокируется противником, в первую очередь погибает корабль, находящийся сверху “стопки”. Боевые карты Ассамблеи могут складываться с любыми другими.<br>Атакующие используют вскрытые карты, двигая их вперед по столу. Защищающиеся выставляют свои боевые карты против карт атакующих,блокируя карты противника по своему выбору. <br>1 карта или “стопка” карт блокирует 1 карту или “стопку” карт противника (т.е. нельзя заблокировать карту противника двумя отдельными картами). <br>Карта (“стопка” карт), чья защита (суммарная защита) меньше или равна атаке карты оппонента снимается со стола в мастерский отбой. <br>Следующий ход. Начинает Защита:<br>Карты ресурсов обеих сторон разворачиваются обратно.<br>Если на столе остались не вскрытые карты Технологий Усиления, Боевые карты, игроки могут начать их вскрывать, соблюдая очередность и “оплачивая” вскрытые карты поворотом карточек ресурсов. <br>Если у Атакующего - в ход Защиты не осталось вскрытых Боевых карт и/или он не может блокировать все Боевые карты Защиты, он проигрывает бой.<br>Если карты остались, следующий ход начинает Атакующий и так далее<br><br>Четвертая фаза - конец боя:<br>Победителем считается тот, чьи вскрытые Боевые карты остались на поле. Либо, если произошла взаимная аннигиляция Боевых карт, но у Звездной системы остался хотя бы один хит, выигрывает сторона Защиты.<br>Все использованные карты технологий Усиления и Действия, уничтоженные Боевые карты забираются мастерами. <br>Стороны забирают себе свои карты ресурсов. <br>Стороны забирают себе оставшиеся у них не вскрытые Боевые карты и карты технологий.<br>Если при захвате Звездной системы, в ней находился актив “Добывающий комплекс”, то ЕГО карты ресурсов (Квантум-40 и Инфо-Кристаллы) отдается победителю.<br><br>Карточки технологий<br>Связь и двигатели. Действия:<br>Устройство РЭБ - не позволяет складывать БК с другими БК или отменяет действие карты “Универсальные системы связи”.<br>Гравитационные двигатели - дает свойство “Первый удар” (Ваш БК может нанести первый удар по БК противника. Если защита БК противника равна или меньше атаки вашего БК, БК противника уходит в сброс), -1 к защите вашего БК.<br>Тахионные двигатели - БК не требует квантума-40 для вызова.<br>Вызов Подкрепления - позволяет вскрыть БК в процессе атаки или защиты.<br>Универсальные системы связи - позволяет складывать БК с другими БК, невзирая на ограничения по правилам.<br>Сбой в системе навигации - отменяет действие карты “Вызов подкреплений”.<br>Взлом зоны Перехода - позволяет БК без вортекс-генератора войти в бой, если ЗП системы не отключена.<br>Сбой систем наведения - отменяет свойство “Первый удар”.<br><br>Связь и двигатели. Усиления:<br>Пост раннего обнаружения - позволяет Защитнику перехватить инициативу у Атакующего.<br>Системный Взлом зоны Перехода - позволяет любому БК без вортекс-генератора войти в бой, если ЗП системы не отключена.<br>Системный корабль РЭБ - запрещает использовать карту “Универсальные системы связи” или запрещает складывать БК для атаки и защиты.<br>Блокировка тахионной связи - передается мастеру с приказом. Никто не может смотреть на бой кроме атакующего. За защищающегося играет мастер. <br>Биологический Разрушитель - -1 к атаке и защите всех вражеских БК. -1 Защиты системы каждый ход. -3 к атаке и защите БК дракхов, иккариан, Древних.<br><br>Орудия. Действия: <br>Лазерные орудия - дает свойство “Первый удар”, -1 к атаке БК<br>Плазменные орудия - дает свойство “Пробивание” (Если атака вашего БК превысила защиту БК противника, Защита системы получает повреждения равные числу, на которое атака превысила защиту), +1 к атаке БК.<br>Нейтринные орудия - игнорируют эффекты карт усиления брони, +1 к атаке БК. <br>Истребители +1 к защите БК или -1 защите блокирующей/атакующей БК противника<br>Разрушающий луч - дает свойство “Пробивание”, игнорирует все специальные свойства брони, кроме органической.<br>Планетарная бомбардировка - +2 к Атаке против Защиты системы. Не действует на другие БК.<br>Уничтожитель планет - +5 к Атаке против Защиты Системы. Не действует на другие БК. Уничтожает активы. (могут использовать только БК Древних)<br><br><br>Орудия. Усиления:<br>Военный аванпост - дает всем своим БК +1 к атаке. Применяется только защитниками системы.<br><br>Броня. Действия:<br>Органическая броня +2 защиты, игнорирует спец. свойства орудий.<br>Активная броня - +2 защиты, +1 атаки<br>Дополнительная броня - +1 защиты<br><br>Способности. Действия:<br>Инженерные службы - +1 к защите, сочетается с броней.<br>Отступление - одна своя БК убирается со стола, больше не может участвовать в этом бою.<br>Полог невидимости - +1 к защите. Позволяет держать одну БК не на столе а в кармане.<br>Саботажник - отменяет эффекты одной любой Карты Действия. <br>Диверсант - -1 к атаке выбранного БК.<br>Чума - +2 к Атаке против Защиты Системы. Не действует на БК.<br>Телепат - +1 к Атаке и +1 к Защите БК.<br><br>Способности. Усиления:<br>Пророк - дает +1 к атаке или защите всем БК на поле, или -1 к атаке или защите всем боевым картам противника на поле. Не может применяться расами без телепатов - Нарном, Бракири, Иккарианами, Дракхами.<br>Системный саботаж - отменяет эффекты одной любой Карты Усиления."');

select data.set_attribute_value(data.get_object_id('library_document8'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document8'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document8'), data.get_attribute_id('name'), null, jsonb '"Приложение к правилам по стратегии"');
select data.set_attribute_value(data.get_object_id('library_document8'), data.get_attribute_id('document_title'), null, jsonb '"Приложение к правилам по стратегии"');
select data.set_attribute_value(data.get_object_id('library_document8'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document8'), data.get_attribute_id('content'), null, jsonb '"Командиры ударных флотов на игре, перечень. бонусы:<br>Бонус дает плюс в атаку и защиту руководимого флота. плюс дается только для флотов, характерных для расы, например земные офицеры не имеет бонусов при использовании БК Нарна и т.п.<br><br>1. Нерун - +1 против флотов ЗА<br>2. Рааз Акри +1 против флотов Дилгар и минбари<br>3. Адмирал Вонг +1 против флотов Дилгар Центавра и Минбари<br>4. Генерал Франклин +1 против флотов Минбари<br>5. капитан Джон Шерридан +1 против Дилгар и Минбари<br>6. коммандер Сибирский +1 против Дилгар и Минбари<br>7. РадЖар - +1 против Лиги, ЗА, Нарна, Центавра<br>8. ГАртхас +1 против Центавра<br>9. Лондо маллари +1 против Нарна<br>10. Дарио Галло +1 против Нарна +1 против Лиги<br>11. Мать Рийна<br>12. Мать Будхи<br>13. Синклер Нейман +1 против Минбари<br>14. Саул Хань +1 против Дилгар.<br>15. Капитан Гонсалес<br>16. Теодор Бетте<br>17. Шай Алит Гилран<br>18. Эриенна<br>19. Ирида Шафтброк"');

select data.set_attribute_value(data.get_object_id('library_document9'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document9'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document9'), data.get_attribute_id('name'), null, jsonb '"Правила по глобальной экономике"');
select data.set_attribute_value(data.get_object_id('library_document9'), data.get_attribute_id('document_title'), null, jsonb '"Правила по глобальной экономике"');
select data.set_attribute_value(data.get_object_id('library_document9'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document9'), data.get_attribute_id('content'), null, jsonb '"Экономические циклы - влияют только на получение доходов от сделок. В конце цикла все стороны, зафиксированные в соглашении, получают доход от сделок. Государство получает налоговые поступления.<br>Расписание циклов:<br>Нулевой экономический цикл заканчивается в 18-00 23-го февраля<br>Первый в 9-00 24-го. <br>Второй в 18-00 24-го<br>Третий в 9-00 25-го.<br>Четвертый в 18-00 25-го<br><br>Основные понятия:<br>Влияние - это эквивалент денег, связей, пропаганды. Влияние используется для продвижения проектов, совершения стратегических действий. <br>Как можно получить влияние:<br>Влияние получается корпорациями в качестве дохода от сделок в конце каждого экономического цикла и однократно сразу по завершении сделки.<br>Государство получает влияние в бюджет, в конце экономического цикла, в качестве доли от сделок корпораций.<br>Акционеры корпораций получают Влияние один раз в экономический цикл, из оборотных средств корпорации, если корпорация принимает решение о выплате дивидендов. Если решение не принято, дивиденды не начисляются. Дивиденды составляют 0,0001% от Капитализации корпорации.<br>Государственные служащие и политики получают влияние в конце цикла за каждую подпись, которую они поставили под дипломатическими соглашениями или под политическим проектом, внесенными в систему Бабком и просто за должность. За должность 500 000 влияния, за подпись еще 500 000.<br><br>Активы - активом называется собственность корпорации или государства такая как месторождение, лаборатория, производственный комплекс, космические сооружения, и пр.<br>Актив имеет номинальную стоимость во влиянии, это рыночная оценка.<br>Актив может принадлежать корпорации или государству (кластеру)<br>Капитализация Корпорации - сумма номинальных стоимостей всех активов корпорации. <br>Все активы имеют привязку к стратегической карте. Активы могут быть куплены, проданы, подарены, разрушены, захвачены в ходе военной операции. Некоторые могут самостоятельно перемещаться.<br>Новые активы создаются только в результате сделок. Т.е. для создания нового актива нужны две стороны сделки.<br>Амортизация - активы потребляют влияние каждый цикл, автоматически списывая его из оборотных средств корпорации в конце каждого цикла. Если оборотных средств нет, стоимость амортизации списывается с капитализации корпорации. Амортизация составляет 10% стоимости актива в цикл.<br>Стратегические активы - флоты, войска, врата, станции тахионной связи, военные базы, и прочее (см. правила по стратегии) находятся на стратегической карте, и могут быть использованы по правилам стратегии. Экономически это такой же актив как и остальные. Падение стоимости актива не отражается на его стратегических характеристиках.<br>Актив существует пока существует сделка породившая актив. При расторжении сделки актив ликвидируется.<br>Оборотные средства - это свободное Влияние на счетах корпораций, частных лиц и в бюджете государственных ведомств.<br>Сделка - сделка это экономическое соглашение о создании актива или о совместном благотворительном или политическом проекте.<br>Стороны сделки - сторонами сделки могут являться корпорации, корпорация и государство (в лице своих представителей), корпорация и кластер государства (центаврианский или антареанский дом и т.п.).<br>В результате сделки всегда создается новый актив. (например “Рокетдайн” заключает сделку с “Марба” о создании новых верфей на Денебе II, или “Амбрелла” с комитетом сената по здравоохранению о постройке новой лаборатории для исполнения медицинского госпроекта).<br>Предметом сделки может быть ПРОЕКТ  (проекты влияют на Парадигмы - см. правила внутренней политики и дипломатии - или позволяют создавать или исследовать новые технологии) делающийся на базе существующего актива. В этом случае сумма сделки ограничивается максимальной стоимостью базового актива. (у “Амбреллы” уже есть лаборатории, так что предметом сделки может быть сам проект создания нового медикамента, а базовым активом - существующая лаборатория “Амбреллы”)<br>Доход от сделки - сразу после заключения, и в каждый конец экономического цикла заключенная Сделка создает некую сумму во Влиянии, т. е. Доход от Сделки (см. пункты 5-10)<br>В общем случае Доход от Сделки во влиянии не превышает 6% стоимости активов одной корпорации, участника сделки. Учитываются  активы той корпорации, чья Капитализация ниже всего из всех участников. Доход автоматически пересчитывается при повышении и понижении стоимости активов  любой из корпораций участников.<br>Первый раз Влияние получается сторонами сразу после заключения Сделки. Стороны, при заключении сделки обязательно должны оговорить между собой распределение Дохода во Влиянии, полученном в результате сделки.<br>Созданный в результате сделки Актив или проект требует однократных затрат влияния из оборотных средств участников Сделки. Его номинальная стоимость эквивалентна 70% от вложенных оборотных средств.<br>Стороны сделки, во время заключения, обязательно оговаривают доли в которых актив будет включен в капитализацию сторон (кто именно и в каких пропорциях будет им владеть).<br>Налоги, и пошлины, устанавливаемые государством, вычитаются из прибыли каждой стороны автоматически, в размере, установленном на момент конца цикла.<br>Сделка между корпорациями на глобальном рынке возможна только в случае если государства корпораций участников имеют между собой соответствующее дипломатическое соглашение.<br>Тайная сделка. Сделкой на черном рынке является тайная сделка, которую нельзя заключить на глобальном рынке по причине политических ограничений (запреты, отсутствие нужных дипломатических соглашений и т.п.). Сделка на черном рынке не облагается налогами, пошлинами, не имеет законодательных ограничений. Однако тайная сделка ставшая явной означает для участников ОБЯЗАТЕЛЬНУЮ потерю положения, должностей, имущества, арест, пытки, расстрел). Тайная сделка считается заключенной после регистрации ее у одного из трех “черных дилеров” - гарантов сделки. Кому надо тот знает.<br>Кредитная сделка - в качестве посредника при сделках могут выступать кредитные организации. Это комитет Сената ЗА КРЭФ (только для корпораций ЗА) банк “Бракос Даймонд”, “Синайская Хризантема” и недавно созданный банк “Антарес-Финанс”. Кредитная организация временно предоставляет свои активы (ценные бумаги) корпорациям, участникам сделки, для увеличения финансового основания сделки. Чего хочет банк за эту услугу решает банк. Также возможно заключить кредитный договор напрямую с банком, чтобы создать новый дорогой актив, например. Банк временно дает свои активы (ценные бумаги), а залогом выступает новый актив, до выплаты долга. Если банк отзывает свои активы из сделки, она считается расторгнутой.<br>Легальная сделка считается заключенной с момента регистрации ее профильным комитетом ассамблеи (председателем), или если сделка внутри ЗА то профильным комитетом сената.<br><br>На что можно потратить влияние:<br>На заключение и расторжение дипломатических соглашений (производится по правилам Дипломатии). На каждое из вышеуказанных действий стороны тратят Влияние, согласно прейскуранту.<br>На Проекты. В том числе на проекты Ассамблеи - Консультативный Совет может тратить Влияние из бюджета ассамблеи на свои проекты.<br>На проекты по внутренней политике - это касается в основном Земного Альянса, но кластеры цивилизаций или Лига тоже могут менять внутреннюю политику если захотят. Любые изменения существующих законов требуют затрат Влияния.<br>На приобретение технологий - покупка карточки технологии у корпорации или другого владельца.<br>На производство технологий, сырья и стратегических ресурсов  - актив “лаборатория” может проводить карточку технологии, завод - бригаду десанта, квантум, верфи - флот и т.п. Это действие можно производить неоднократно и в любое время.<br>На покупку Актива другой корпорации.<br>На поддержку Актива, в том числе Амортизацию, поддержку ударных флотов и т. п.<br>На приказы объектам на стратегической карте, т.е. на войну.<br><br>Глобальный рынок, акции, структура корпораций<br>Глобальный рынок это определенная сумма во влиянии, которая может быть выплачена за все имеющиеся сделки в течении цикла. Если эта сумма меньше чем суммарная прибыль со сделок всех субъектов, то вся прибыль всех субъектов уменьшается пропорционально. <br>Цивилизация подключается к глобальному рынку и начинает на него влиять в случае подписания Соглашения о глобальных рынка Ассамблеи.<br>Глобальный рынок разделен на отраслевые рынки. <br>Рынок ВПК<br>Рынок медицинских услуг<br>Рынок ресурсов<br>Рынок гиперкосмической связи и массовых коммуникаций <br>Черный рынок - особенный. Это максимально возможная сумма прибыли для всех тайных сделок, нарушающих законы цивилизаций, корпорации или кластеры которых участвуют в сделке. Легализация запретов уменьшает объем черного рынка. Сумма, на которую уменьшается черный рынок, увеличивает легальную часть остальных отраслевых рынков пропорционально.<br><br>Глобальный или отраслевой рынок увеличивается или уменьшается  (увеличивается потенциальная прибыль во влиянии) в случае принятия соответствующих отраслевых политических или дипломатических проектов и соглашений. Например в случае войны между двумя цивилизациями рынок ВПК автоматически растет на определенную сумму. В случае нового соглашения о пошлинах между цивилизациями глобальный рынок увеличивается - растут все рынки и т.п., в случае протекционистских решений одной из цивилизаций, глобальный рынок уменьшается для всех участников.<br><br>Биржевая паника - под влиянием политических обстоятельств или мировых событий, корпорации работающие на одном из рынков могут мгновенно потерять часть стоимости своих активов. Глобальные события могут уронить капитализацию корпорации не более чем на 30%. События межцивилизационные между двумя или тремя цивилизациями могут уронить капитализацию не более чем на 20%. События локальные - относящиеся к самой корпорации или или к одной цивилизации (кластеру) не более чем на 10%.<br>Золотая лихорадка - под влиянием политических обстоятельств или мировых событий, корпорации работающие на одном из рынков могут мгновенно увеличить часть стоимости своих капитализации (всех активов). Глобальные события могут увеличить капитализацию не более чем на 30%. События межцивилизационные между двумя или тремя цивилизациями могут увеличить капитализацию не более чем на 20%. События локальные - относящиеся к самой корпорации или или к одной цивилизации (кластеру) не более чем на 10%.<br><br>Структура Корпорации<br><br>Долевая структура - капитализация корпорации это ее номинальная стоимость (стоимость 100% акций и/или активов) на глобальном или локальном рынке. <br>Миноритарии - В 100% капитализации всегда есть определенная доля миноритарных владельцев корпорации, которые находятся вне пределов игры, и не влияют на политику корпорации. Однако за счет них мажоритарии могут увеличивать свои доли участия.<br>Мажоритарные акционеры - Остальная часть капитализации принадлежит персонажам игроков в определенных пропорциях - долях. Наличие доли в корпорации, означает что игрок может управлять своей долей, продавать ее на миноритариям, или увеличивать ее за счет миноритариев. Также он может блокировать решения остальных владельцев паев.<br>Технически это осуществляется с помощью компьютерной программы, покажем на игре, или до игры. <br>Как корпорации принимают решения:<br>Решение о сделке или затрате оборотных средств принимается корпорацией при непротивлении сторон. Под соглашением должны стоять подписи всех акционеров, имеющих в сумме более 80% мажоритарных акций.<br>Блокирующий пакет - мажоритарные акционеры, владеющие суммарно 21% акций могут заблокировать любое решение корпорации, до его принятия. <br>Доли участия в корпорации можно продавать другим игрокам по частям или же полностью, получая за это Влияние на личный счет. Сумма сделки - вопрос личных договоренностей. Хоть бесплатно.<br>Долю участия можно отдать в управление другому игроку. Об этом извещается комитет по торговле Ассамблеи или (в случае земных корпораций) Комитет по регулированию в сфере экономики и финансов. Распределение доходов между управляющим и владельцем предмет личных договоренностей."');

select data.set_attribute_value(data.get_object_id('library_document10'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document10'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document10'), data.get_attribute_id('name'), null, jsonb '"Правила по допросам"');
select data.set_attribute_value(data.get_object_id('library_document10'), data.get_attribute_id('document_title'), null, jsonb '"Правила по допросам"');
select data.set_attribute_value(data.get_object_id('library_document10'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document10'), data.get_attribute_id('content'), null, jsonb '"Правила допроса универсальны, независимо от метода ведения допроса, или его вида.<br>Виды допроса:<br>1. Пытки – допрос с болевым воздействием на персонажа. Чтобы причинять боль применяется нейроошейник, или пси способности, или оборудование вирт допросов. Совсем примитивные существа могут бить реципиента или ломать ему всякое торчащее. Дознаватель говорит кодовое слово БОЛЬ. Игрок, которого пытают НАПРЯГАЕТСЯ ВСЕМ ТЕЛОМ, и начинает кричать. Дознаватель говорит СТОП. Можно расслабиться. Период боли длиться не долго в пределах 30 секунд. После каждого нового болевого сигнала идет собственно допрос.<br>Оборудование нужно заряжать. При каждой посылке болевого сигнала телепат выкладывает на стол ЗП, а владелец оборудования 1 панацелин. Пытаемый их забирает, и отдает медику или мастеру уже после допроса. Кончились ресурсы кончился допрос.<br>После посылки 3-х подряд болевых сигналов, на четвертом и далее допрашиваемый может получить по своему желанию сердечный приступ или инсульт, и впасть в состояние комы. Дальше к медику. Может продолжить.<br>В случае дилетантского допроса с помощью подручных средств (ломать всякое), можно получить ответ только на один вопрос. Затем допрашиваемый сразу получает состояние “без сознания”, повторная попытка его пытать без лечения - кома.<br>2. Виртдопрос – допрос разума в виртуальной среде. Производится с помощью наркотиков и специального оборудования, или ТЕЛЕПАТОМ. Для настройки оборудования виртдопроса нужен инженер.<br>2.1. Виртдопрос проводится в отдельном помещении, где присутствуют только допрашиваемый и дознаватель.<br>2.2. Их игровая одежда лежит В ДРУГОМ МЕСТЕ, где и находятся их реальные тела.<br>2.3. После того, как пациент зафиксирован, дознаватель может приступить к допросу<br>2.4. Временной шаг вирт допроса – 5 минут. В начале каждого нового временного шага дознаватель выкладывает на стол ЗП или одну Суперпенту. Пациент забирает знаки или Суперпенту. Чтобы потом предъявить суперпенту их медику а знаки отдать мастерам. Применение более чем 3-х ЗП или наркотических Суперпенты против человека в течении одного допроса, грозит серьезными осложнениями его здоровью.<br>2.5. Допрашиваемый во время вирт допроса АБСОЛЮТНО ВЕРИТ дознавателю. Если дознаватель говорит, что он мама допрашиваемого и они гуляют в парке, то это так. ОДНАКО, если мама допрашиваемого умерла – он имеет право удивится этому обстоятельству ВСЛУХ, и до СЛЕДУЮЩЕГО ШАГА ДОПРОСА отвечать что угодно. Пояснение – если допросчик допустил серьезный промах, строя виртуальную среду, в отношении биографии персонажа, можно не отвечать на вопросы в течении этого шага.<br>2.6. Дознаватель при виртуальном допросе моделирует ситуации, которые как он считает спровоцируют персонажа к раскрытию ценностей или корней допрашиваемого, с помощью описаний или наводящих вопросов.<br><br>Общие правила допросов независимо от вида воздействия<br>Главное правило любого допроса! – допрашиваемый НЕ МОЖЕТ ПРЯМО ЛГАТЬ дознавателю. <br>1. Допрос можно прерывать, давая допрашиваемому отдохнуть, или нет, по желанию дознавателя. Однако если допрос прерван, для допрашиваемого должно работать правило “Под арестом”. Его нельзя запирать в комнате, оставлять одного и т.п. Если с поциентом не работают - его отпускают.<br>2. Допрашиваемый обязан отвечать на любые регламентированные данными правилами вопросы дознавателя подробно и с максимальной достоверностью.<br>3. Допрашиваемый может прямо НЕ отвечать на прямые вопросы о своих ценностях, тайнах, или принципах. Любое выяснение этих обстоятельств должно произойти косвенно. Можно отвечать уклончиво на альтернативные вопросы – на которые ответ только да, или нет. Совсем не отвечать запрещено.<br>4. В момент, когда дознаватель считает, что все понял про личность допрашиваемого он говорит: «Назову ценность - Ты руководствуешься …» называя ценность, которой руководствуется допрашиваемый, или «Пирнцип – ты считаешь…» и называет ценность или принцип персонажа.<br>5. Если он назвал правильно, допрашиваемый говорит ему: «Сдаюсь ты прав.», и после этого сам подробно рассказывает одну тайну,  о которой хотел узнать допрашиваемый. <br>6. Телепат после вскрытия ценности или принципа может перепрограммировать реципиента по правилам телепатии.<br>7. Если дознаватель не попал, в ценность или принцип, допрашиваемый должен дать ему понять насколько далеко, или близко представления дознавателя от реальности фразой «Да НО, и дать наводку на дальнейшее продолжение», или «полная чушь!» если дознаватель совсем не прав, и дать наводку в каком направлении искать, затеяв спор.<br>ВАЖНО! Дознаватель не обязан сформулировать ценность или принцип дословно, или с подробностями, типа дат и конкретных имен. Он должен попасть достаточно близко, чтобы допрашиваемый, примерив его слова на себя, мог сказать, да это я, это обо мне.<br>Вся модель ориентирована на честность и отыгрыш, помните об этом."');

select data.set_attribute_value(data.get_object_id('library_document11'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document11'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document11'), data.get_attribute_id('name'), null, jsonb '"Общие правила по Псионике"');
select data.set_attribute_value(data.get_object_id('library_document11'), data.get_attribute_id('document_title'), null, jsonb '"Общие правила по Псионике"');
select data.set_attribute_value(data.get_object_id('library_document11'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document11'), data.get_attribute_id('content'), null, jsonb '"1.     Пси способности – способность некоторых существ к воздействию на разум, чувства и организм других существ с помощью силы своего разума.<br>Виды Пси способностей:<br>- Телепатия – воздействие на разум и чувства.<br>- Телекинез – воздействие на неживые объекты, перемещение их, или на организм живого существа<br>- Электрокинез – воздействие на электронику или электрические приборы<br>- Пророчество – воздействие на будущее. Создание событий.<br>2. Знаки ПСИ – передаются телепатом другому игроку при пси воздействии.<br>Знак ПСИ можно использовать несколькими способами:<br>Временное ПСИ воздействие – телепат передает знак другому игроку, лично или через мастера. Игрок прячет знак, и отыгрывает временное пси воздействие. Пока временное воздействие не кончится, игрок обязан хранить при себе знак. Когда воздействие закончилось, он передает знак мастеру или телепату, от которого его получил.<br>Поэтапное воздействие – при глубоком сканировании, стирании личности или воздействиях, требующих расходов силы в несколько этапов, телепат выкладывает на стол или отдает мастеру знак ПСИ через определенные промежутки времени. Когда знаки кончаются – воздействие заканчивается.<br>Пророки сдают свои знаки мастерам насовсем для предсказания будущего.<br>Знак ПСИ может быть забран у реципиента только телепатом, наложившим воздействие, лично или через мастеров, или телепатом уровня выше чем тот, кто наложил воздействие.<br>- Знаки пси — это не игровая вещь. Они носятся скрытно и не предъявляются при обыске.<br>Телепат, прикоснувшись к игроку, не телепату, может потребовать сказать ему, есть ли у него знаки ПСИ. В этом случае игрок говорит только есть или нет, он может не объяснять, что за воздействия на нем и сколько у него знаков. Точное количество знаков пси у персонажа не телепата и их назначение телепат может выяснить только при глубинном сканировании.<br>Знаки немедленно сдаются ближайшему мастеру если кто-то обнаружил знак пси случайно, нашел, или если воздействие на игрока закончилось, согласно данным правилам, или если телепат забрал чужой знак пси у игрока.<br>- Дистанция ПСИ воздействия:<br>• Большинство телепатов могут воздействовать на других существ только прикоснувшись голой рукой к открытому участку кожи другого игрока. В этом случае он объявляет воздействие и передает знак ПСИ реципиенту.<br>• Начиная с определённого уровня силы, телепат может воздействовать на тех, кто находится в его поле зрения. В таком случае телепат может передать знак через мастера или бросить знак ПСИ в сторону другого игрока и громко объявить воздействие. Реципиент ОБЯЗАН подобрать знак, зажать его в левой руке и выполнить указания телепата.<br>• Крайне редко телепат может воздействовать на других, не видя объект воздействия. Это происходит через мастера.<br>- Общеизвестные воздействия: (список может быть дополнен)<br>Определение лжи – часто используется при совершении торговых сделок, при которых телепат выступает посредником. Реципиент сидит рядом с телепатом, они держатся за руки (знак ПСИ лежит между ладонями). Если реципиент лжет, он пожимает телепату руку. Руки должны быть расположены так, чтобы никто больше не мог их видеть. Только телепат и реципиент знают, что является ложью, а что правдой.<br>Причинение боли – телепат может сделать реципиента беспомощным, посылая ему в подкорку болевые сигналы. Пока знак ПСИ в руке реципиента, боль не прекращается. Отыгрывается как жуткая головная боль.<br>Парализация – телепат может парализовать реципиента. Парализация длится пока пока знак ПСИ не забрали у реципиента.<br>Ранение – телекинетик может ранить или даже убить другого персонажа. Знак ПСИ остается скрытым у реципиента пока его не вылечат или не найдут тело, затем сдается мастерам.<br>Ложные эмоции – телепат может заставить другого персонажа действовать под влиянием ужаса, гнева, эйфории, депрессии (см. правила по психологии). Эмоция действует пока знак ПСИ скрытно находится у реципиента.<br>Поверхностное сканирование – телепат, прикоснувшийся к персонажу и передавший ему знак ПСИ, может получить у мастеров информацию о каком-то одном секрете реципиента, о том, о чем реципиент по мнению мастеров пытается не думать в данный момент)). Мастера выдают телепату не конкретную информацию, а некий образ. Получить больше одного секрета от одного персонажа за игру невозможно. Также при поверхностном сканировании телепат выясняет есть ли у персонажа не телепата знаки пси, ловит эхо чужих воздействий.<br>Забудь – телепат удаляет часть памяти персонажа. Провал в памяти держится пока у персонажа не забрали знак ПСИ.<br>Ложное восприятие – телепат может обманывать органы чувств. Он может внушить реципиенту, что перед ним гладкая дорога, и тот шагнет в открытый люк, или обмануть слух, обоняние и прочие органы восприятия.<br>Внушение – телепат может отдавать простые приказы, которые люди охотно и с радостью выполняют. Приказы не должны противоречить Ценностям. В случае противоречия игрок может не выполнять приказ и понимает, что его пытались задоминировать.<br>Глубинное сканирование – телепат может провести допрос реципиента, лишив его сознания и общаясь с ним внутри его разума. Сканируемый персонаж не может лгать. Сканирование проводится по правилам допроса:<br>• Раз в 10 минут телепат выкладывает на стол знак ПСИ. Допрос кончается, когда кончаются знаки. Телепат выходит из допроса в состоянии слабости, а реципиент беспомощности<br>• Телепат может изменять Ценность персонажа.<br>• Ложные ЦЕННОСТИ (чувства) – могут быть вложены персонажу после глубинного сканирования. Персонажу могут внушить, что он что-то любит или ненавидит, или любые другие чувства<br>• Программирование – после успешного глубинного сканирования на место Ценности телепат может заложить отложенную программу. Программа должна быть простой и состоять из простой последовательности действий, пойти куда-то и там что-то сделать. Обсуждается с мастерами<br>• Стирание личности – широко применяется для наказания судами Земного Альянса за тяжкие преступления или если преступник сумасшедший. После обнаружения всех Корней и Ценностей реципиента телепат может полностью удалить его личность и воспоминания, и создать частично или полностью новую личность с ложными воспоминаниями, Принципами и Ценностями. Обычно при официальном стирании личности используется специальная машина, которая усиливает способности телепата.<br>• Смертная сеть – (привет от машины Орфей) телепат, просканировавший реципиента, может защитить его ТАЙНЫ или ЦЕННОСТИ смертной сетью. При попытке передать кому-то тайну любым способом или при попытке определения или изменения ценности путем сканирования, пытки или допроса реципиент впадает в кому, - остановка сердца."');

select data.set_attribute_value(data.get_object_id('library_document12'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document12'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document12'), data.get_attribute_id('name'), null, jsonb '"Общие правила по медицине"');
select data.set_attribute_value(data.get_object_id('library_document12'), data.get_attribute_id('document_title'), null, jsonb '"Общие правила по медицине"');
select data.set_attribute_value(data.get_object_id('library_document12'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document12'), data.get_attribute_id('content'), null, jsonb '"Врач с помощью медицинской аппаратуры может вывести из состояния беспомощности, заштопать рану, вылечить от болезни или отравления.<br>Медицинская лаборатория – место, специально оборудованное для оказания мед помощи, в которой установлен УМК.  Большинство вариантов медпомощи возможно оказывать только в этом месте.<br>Универсальный медицинский компьютер (УМК) способен провести диагностику пациента и синтезировать лекарства.<br>После подключения пациента к УМК тот ОБЯЗАН сообщить доктору, что с ним случилось. После этого пациент получает наркоз и засыпает на время процедуры. <br>УМК способен синтезировать заряды для Автодока (см. ниже). Так что если нужен стимулятор или любой другой мгновенный медикамент нужно идти в медлабораторию или на черный рынок.<br>Болезни, отравление их диагностика и лечение.<br>Болезнь бывает хронической или заразной. Заболевая, игрок получает карточку от мастера или от другого игрока, на карточке одна сторона посвящена симптомам, и предназначена только для этого игрока, а вторая предназначена только для врача. <br>Получив карточку, игрок открывает любой квадрат в столбце, соответствующем своей расе, и начинает отыгрывать симптомы.<br>Обратившись к врачу, пациент описывает своими словами симптомы, открытые на карточке болезни. Врач сверяется УМК, ставит диагноз и назначает лечение. <br>Отравление тоже имеет свою карточку такую же как карточка болезни. Врач, диагностирующий отравление, лечит его так же как и болезнь<br>Психотравмы диагностика и лечение – возникает после травмирующего события. Представляет собой сочетание психологического и физиологического повреждения. Приступы вызываются триггером, снимаются только медикаментозно. Для излечения нужно снять симптомы и идти лечиться к психологу или телепату.<br>Травмы диагностика и лечение<br>Травмы делятся на три типа:<br>Ранение.<br>Ожог, электрический удар<br>тупая травма (ушиб избиение и проч)<br>Травмы могут быть получены в процессе починки или поломки оборудования, исследования артефактов, боевой стычки между персонажами или при нахождении в неудачном месте в неудачное время. Пропустить этот момент вы не сможете, так как мастером или программой вам будет выдана карточка с описанием того, что с вами случилось и что вам нужно отыгрывать.<br>Все травмы имеют симптомы<br>Вы упали и ударились головой. Пример симптома: Чувствуете легкое головокружение, не можете быстро двигаться, громко говорить и применять профессиональные способности. <br>В любом случае, лечиться ли у доктора или нет, вы решаете сами. Может быть, вы никогда не любили свою левую руку и считаете, что она получила по заслугам.<br>Некоторые травмы приводят к потере сознания. В таком случае больной не может принимать решения о своем лечении и это за него могут сделать окружающие или доктор. Если вам надоело лежать без сознания, вы можете пойти в виде “случайного свидетеля” привести к своему телу ближайшего встреченного персонажа.<br>Напоминаем, что человек без сознания не может разговаривать. Если окружающие не видели, что с больным случилось, то выяснить это они могут или дождавшись пока он придет в себя или с помощью диагностической операции.<br>У операции могут быть как только положительные, так и отрицательные последствия. О них вы узнаете у врача после лечения.<br><br>Кома. Одним из последних симптомов некоторых болезней или отравлений может быть Кома. Вывести пациента из Комы может только врач с помощью УМК. После того, как пациент выведен из комы, он описывает симптомы болезни или травмы, которая привела к коме. Доктор проводит лечение согласно правилам.<br>Криозаморозка - если кома персонажа становится перманентной, или если его убили согласно игровым правилам, то врач может подвергнуть его тело криозаморозке. На этой игре игрок больше не участвует, однако его персонаж может выжить. <br><br>Парамедицина, или быстрая помощь<br>Автодок<br>Автодок – специальное медицинское устройство первой помощи. Он позволяет персонажу ввести себе или другому персонажу одноразовый медикамент из списка ниже. Автодок - игровой предмет.<br>У Автодока может быть несколько разных медикаментов в обойме, в зависимости от модели. <br>Автодок имеет только один заряд каждого из медикаментов.<br>Заряды автодока - игровой предмет который можно хранить отдельно, воровать, отбирать, продавать и т.п.<br>Создание зарядов возможно только в  медицинской лаборатории (или их можно купить на черном рынке). Заправить автодок может кто угодно.<br>Медикаменты для Автодока<br>Это список медикаментов, которые можно зарядить в автодок. При этом прием этих препаратов не лечит персонажа, а только купирует симптомы до осмотра у врача.<br><br>Длительность действия - все препараты действуют пока не нейтрализованы или до 8 часов утра следующего за приемом дня.<br>Если у персонажа снова проявился симптом  (вас снова отравили, новый приступ головной боли), препарат нужно принимать повторно.<br><br>Суперпента – медикамент, с помощью которого можно проводить допросы людей, по правилам допроса. Персонаж под воздействием суперпенты - слаб (смотри статус персонажа). Персонаж под воздействием суперпенты не может лгать и не может не отвечать на вопросы.<br>Симптом принятия - легкая эйфория.<br><br>Антидот - препарат, позволяющий прекратить отыгрывать отравление до осмотра у врача. Также он нейтрализует действие любых введенных ранее автодочных препаратов, в том числе суперпенту, стимулятор и др. Если после отравления и приема Антидота осмотр врача и лечение не наступили до 8 утра следующего дня персонаж умер, без вариантов.<br>Симптом принятия - легкая депрессия<br><br>Биоблокада - препарат, позволяющий игнорировать симптомы вирусных или бактериальных заболеваний. Не лечит. Предотвращает вирулентность. Не работает против дилгарской чумы и Драффы. Если осмотр заболевшего врачом и лечение не наступили до 8 утра следующего дня персонаж умер, без вариантов.<br>Симптом принятия - легкая депрессия<br><br>Стимулятор - препарат, позволяющий игнорировать последствия оглушения, состояние “без сознания” или одной парализации. Принимается ДО повреждения. Любое оглушение и псионическое тоже дает в качестве последствия тупую травму.  Если травма не излечена, вторичное ранение приводит к беспомощности, третье к коме, повторное применение стимулятора в таком случае бессмысленно.<br>Симптом принятия - легкая эйфория.<br><br>АнтиПси – вещество, вызывающее кратковременную устойчивость к пси-воздействию. Одна доза -  Рейтинг защиты П-12. Оказывает сильное токсическое воздействие на нервную систему в частности и организм в целом. Получая карточку АнтиПси, игрок обязан выполнять инструкции, написанные на ней.<br>Вызывает привыкание с первой дозы, что является медикаментозной зависимостью. Получая зависимость, игрок получает у мастеров карточку и выполняет написанное на ней. Для излечения от зависимости нужно обратиться к доктору. <br><br>Новолидокаин - препарат, позволяющий игнорировать одну травму или снять боль. Может быть принят ДО нанесения травмы, однако вторая травма/рана вгоняет персонажа в кому. Персонаж под Новолидокаином не чувствует боли и испытывает легкую заторможенность. Ему запрещено бегать, он не может участвовать в драке, оглушать, пользоваться оружием и боевыми правилами.<br>Симптом принятия легкий ступор. <br><br>Нейротрансмиттеры - препараты этой группы купируют любые эмоциональные состояния, стимулируют память, улучшают работу логических отделов мозга. Прием нейротрасмиттера заранее позволяет проигнорировать один любой триггер эмоциональной реакции и не отыгрывать ее. <br>Нейротрансмиттеры , будучи введенными телепату, снижают его П-рейтинг вдвое. <br>Может вводиться в том числе с пищей и питьем.<br>Симптом - легкая заторможенность.<br><br>Транквилизатор - позволяет погрузить персонажа в крепкий, здоровый сон (состояние без сознания). Нейтрализует действие стимулятора и/или нейротрасмиттера - в этом случае персонаж не засыпает.  Может вводиться в том числе с пищей и питьем. Помните: если вам надоело валяться без сознания - вы можете привести к “телу” первого встречного для оказания помощи.<br><br>Гидроморфизин - специальный препарат который доктор Франклин выписывает от всех болезней. Ничего не дает. Никаких последствий. Любая дозировка. Шутка ))))))))))"');

select data.set_attribute_value(data.get_object_id('library_document13'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document13'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document13'), data.get_attribute_id('name'), null, jsonb '"Правила по науке"');
select data.set_attribute_value(data.get_object_id('library_document13'), data.get_attribute_id('document_title'), null, jsonb '"Правила по науке"');
select data.set_attribute_value(data.get_object_id('library_document13'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document13'), data.get_attribute_id('content'), null, jsonb '"<i>“Короче, наука имеет много гитик.”</i><br><br>Вся наука в галактике строится либо на исследовании технологий высокоразвитых цивилизаций, часто уже исчезнувших, но оставивших после себя культурные артефакты, или же на изобретении велосипеда, т.е. попыток заново открыть уже известные другим технологии.<br><br>В связи с этим правила по науке делятся на два раздела: Исследование артефактов и Самостоятельные изыскания.<br>Исследование артефактов (сюда же входит исследование улик, анализы крови, всякие медицинские тесты и т.п.). <br>На станции:<br>Есть специальный лабораторный компьютер, который, анализируя состав артефакта, выдает исследователю его предполагаемые свойства.<br>На основании изученных свойств ученый-исследователь выдает сформулированную письменно гипотезу о работе артефакта. <br>После визирования гипотезы у мастеров он пытается использовать артефакт указанным образом.<br>Правило использования артефактов - артефакты обычно не работают сами по себе, чтобы их использовать надо придумать к какому имеющемуся уже устройству их можно подключить.<br>В результате получается ЕДИНИЧНЫЙ игровой предмет который можно использовать на станции или в стратегической боевке. <br>Если Технический уровень вашей цивилизации исследователя ниже ТУ цивилизации изготовителя артефакта - сделать артефакт воспроизводимым не получится."');

select data.set_attribute_value(data.get_object_id('library_document14'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document14'), data.get_attribute_id('system_is_visible'), data.get_object_id('person2'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document14'), data.get_attribute_id('system_is_visible'), data.get_object_id('person44'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document14'), data.get_attribute_id('system_is_visible'), data.get_object_id('person34'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document14'), data.get_attribute_id('system_is_visible'), data.get_object_id('person35'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document14'), data.get_attribute_id('system_is_visible'), data.get_object_id('person11'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document14'), data.get_attribute_id('system_is_visible'), data.get_object_id('person6'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document14'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document14'), data.get_attribute_id('name'), null, jsonb '"Правила по псионике (закрытые)"');
select data.set_attribute_value(data.get_object_id('library_document14'), data.get_attribute_id('document_title'), null, jsonb '"Правила по псионике (закрытые)"');
select data.set_attribute_value(data.get_object_id('library_document14'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document14'), data.get_attribute_id('content'), null, jsonb '"Данные правила предназначены только для телепатов<br>Запрещено знакомить с данными правилами игроков не телепатов<br>Телепатические воздействия<br>Основной список телепатических воздействий и моделирования есть в общих правилах<br>По сути – пси воздействия — это серьезный инструмент для изменения сюжета игры. Поэтому <br>1. На любое одно простое воздействие телепат тратит 1 знак пси (ЗП).<br>2. Все длительные воздействия, или воздействия имеющие длящийся эффект требуют постоянного нахождения ЗП у объекта воздействия. Телепат, вызвавший у игрока сердечный приступ (психокинетика) отдает игроку ЗП (через мастера или непосредственно, как позволяет уровень силы) и ПОКА ИГРОК НЕ УМЕР или не вылечен, ЗП остается у атакованного игрока. Если игрок умер, телепат не получит знак до конца игры. Если вылечен, ЗП возвращается к телепату.<br>3. ЗП, потраченные на серьезное изменение сюжета игры конечно, это не возобновляемый ресурс! Телепат, заменивший игроку ценность и корень, либо установивший смертную сеть, либо отдавший отсроченный приказ, теряет 1 ЗП за каждую ценность, до конца игры, или пока воздействие не будет исправлено другим телепатом или психологом.<br>Пророк, изменивший будущее, навсегда теряет свой ЗП пока предсказание не исполнится.<br>Данное правило распространяется на поломки и починку техники с помощью электрокинеза, ЗП остается у мастера игры, пока сломанное устройство не починят, или починенное не сломается. Если электрокинетик с помощью ЗП добыл информацию из системы BABCOM он теряет этот ЗП до конца игры.<br>4. В простых случаях телепат может отозвать свой ЗП в любой момент, ЕСЛИ ДЕЙСТВИЕ, КОТОРОЕ ПОЗВОЛЯЕТ ЗП ОБРАТИМО. Действие силы телепата на объект немедленно прекращается. В примере с устройствами, починенное устройство немедленно ломается, а поломанное восстанавливается. Но человек убитый с помощью телепатии естественно не воскреснет, поэтому отзывать такой ЗП нельзя, как и ЗП потраченный на пророчества, изменение ценностей.<br>5. Защита от пси атак: существует два вида защиты от пси атак<br>5.1. Постоянный Ментальный Блок – телепат закачивает сколько-то ЗП на ментальный блок, отдавая их мастеру. В этом случае, никакие мгновенные воздействия, на которые потрачено ПЗ столько же или меньше на телепата не работают. Блок можно установить на мозг другого персонажа.  Электрокинетики могут защищать оборудование от взлома. Пророки могут защищать персонажей от изменения судьбы. Кинетики ОТ АТАК ОРУЖИЕМ. В случае кинетиков – один знак потраченный на защиту это один дополнительный хит.<br>5.2. Сравнительный ментальный блок – во время попыток Глубинного сканирования, и подобных воздействий телепат, инициировавший сканирование, выкладывает на стол наличные ЗП. Телепат, которого сканируют выкладывает свои. Когда у одного из участников кончаются ЗП второй сканирует его. Прервать инициированное сканирование невозможно. Если телепат, инициировавший сканирование обнаруживает что нарвался на более сильного соперника, упс ему трында.<br>5.3. Преимущество пророка – пророк не может быть просканирован. Ни поверхностно, ни глубинно. Это не зависит от его количества ЗП.<br>5.4. Любой блок ощущается как сопротивление.<br>5.5. Ментальная невидимость. Иногда некоторых существ телепат НЕ ВИДИТ в ментальном поле. Такой персонаж ощущается как «здесь никого нет». На такого персонажа невозможно никакое телепатическое воздействие (пророки, электрокинетики и психокинетики могут применять свои способности как обычно).<br>6. Дистанция телепатического воздействия:<br>6.1. Телепат, уровнем силы от П1 до П 5 может применять пси-воздействие только при прикосновении к открытому участку кожи другого человека, голой рукой.<br>6.2. Телепат уровня силы от П 6 до П8 может применять пси воздействия к другому игроку, находящемуся с ним в одном помещении, и которого предварительно подверг поверхностному сканированию. Запрещается делать это через дверь, через окно, или если игрок находится на другом этаже.<br>6.3. Телепат уровня от П 9 до П 11 – может воздействовать на любого игрока, которого предварительно подверг поверхностному сканированию, и видит в данный момент. Видеосвязь не считается.<br>6.4. Телепат уровня П 12 может воздействует на любого игрока, которого хоть раз предварительно подверг поверхностному сканированию, в пределах станции.<br>6.5. Глубинное сканирование происходит ТОЛЬКО при личном контакте, удаленное невозможно. Но после «взлома ценности» возможен удаленный доступ к поведению игрока.<br>7. Доступность воздействий по уровню силы:<br>Общие ограничения<br>Пророки не могут предсказывать свою судьбу.<br>Электрокинеты не чинят себя<br>Телепат не может сканировать себя<br><br>7.1. П1 - П2<br>* Все: Определение лжи. Работа с пси устройствами древних.<br>* Пророки – Нюх на неприятности – персонаж на которого применена способность, получает +1 хит. Отдайте ЗП мастеру.<br>* Электрокинетики – виртуальный доступ. Электрокинетик, находя карточку оборудования, может подключится к нему так, как будто он инженер. Количество ТО равно его количеству знаков пси.<br>* Психокинетики – воровство. Можно спереть любой мелкий предмет у другого игрока через мастера. ЗП теряется до конца игры.<br>7.2. П3 – П6<br>* Все - Причинение боли<br>* Телепаты - Поверхностное сканирование, Забудь<br>* Пророки – ближайшая судьба – с персонажем на которого применена способность, происходит событие предсказанное пророком. Событие касется только физической формы персонажа, и должно быть незначительным. Через мастера, но ПРОРОЧЕСТВО НЕОБХОДИМО СНАЧАЛА ОБЪЯВИТЬ ИГРОКУ которого оно касается. Отдайте ЗП мастеру.<br>* Электрокинетики – виртуальный доступ. Электрокинетик, находя карточку оборудования, может подключится к нему так, как будто он инженер. Количество ТО равно его количеству знаков пси. Можно сломать устройство 1 ЗП на одну поломку или 1 ЗП на одну починку. Работает пока ЗП в устройстве<br>* Психокинетики – Барьер – невозможен физический контакт, чтобы схватить персонажа нужно 4 человека. пока ЗП вложен. Только на себя.<br>7.3. П7 - П10<br>* Кинетик и Телепат Парализация – телепат может парализовать реципиента.<br>* Телекинетик Ранение. Инициация физического недостатка – например сердечного приступа.<br>* Телепат - Ложные эмоции, Внушение, Ложное восприятие, Глубинное сканирование, Ложные чувства, Программирование, Стирание личности,  Смертная сеть<br>* Пророк – серьезное личное предсказание<br>* Электрокинетик – доступ к тайнам по сети БАБКОМ"');

select data.set_attribute_value(data.get_object_id('library_document15'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document15'), data.get_attribute_id('system_is_visible'), data.get_object_id('person5'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document15'), data.get_attribute_id('system_is_visible'), data.get_object_id('person15'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document15'), data.get_attribute_id('system_is_visible'), data.get_object_id('person31'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document15'), data.get_attribute_id('system_is_visible'), data.get_object_id('person19'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document15'), data.get_attribute_id('system_is_visible'), data.get_object_id('person43'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document15'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document15'), data.get_attribute_id('name'), null, jsonb '"Правила по медицине (закрытые)"');
select data.set_attribute_value(data.get_object_id('library_document15'), data.get_attribute_id('document_title'), null, jsonb '"Правила по медицине (закрытые)"');
select data.set_attribute_value(data.get_object_id('library_document15'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document15'), data.get_attribute_id('content'), null, jsonb '"Терапия.<br>Итак, к вам попал больной. У него в наличии какие-то симптомы, которые он отыгрывает и описывает. Все эти симптомы он получает с карточки болезни. На второй стороне карточки – таблица для применения лекарств. Дальше вам нужно:<br>1. Попытаться понять, чем именно болен пациент.<br>2. Выбрать лекарство, которое не только поможет, но и не вызовет побочных эффектов.<br>3. Оторвать с карточки лечения квадрат, соответствующий нужному препарату. (Рис.1)<br>4. Прочитать полученный эффект и зачитать игроку.<br>5. После приема записать всё в журнал учета (выдается мастерами).<br>Надо учитывать, что некоторые болезни являются заразными и передаются контактным путем. Для доктора наличие перчаток и маски – обязательное условие для работы.<br>Обращаем внимание, что у разных рас одни и те же недомогания могут проявляться по-разному. Лечение также должно проводиться с учетом расовой принадлежности пациента.<br><br>Хирургия.<br>Работа с УМК предполагает наличие у больного какой-либо травмы или повреждения тела.<br>Когда пациент с травмой (ранение, ожог, электроудар) попадает на стол, доктор подключает его к УМК с помощью специальных датчиков и начинает операцию. Для этого в программе выбираются пункты: имя, тип травмы и часть тела. Программа высчитывает сложность случая и выдает от 4-х до 8 знаков-пиктограмм (Рис.2). Доктор запоминает последовательность знаков (10 секунд) и в течение ограниченного времени (30 секунд) вводит их обратно в программу. Чем меньше ошибок было совершено, тем удачнее прошла операция. Ошибки в порядке и написании знаков приводят к осложнениям. Добивайтесь тишины во время операций J<br>Хирургия не предполагает реального вмешательства во внутренние органы пациента, поэтому расовые отличия во время операции не учитываются.<br>Все равны перед УМК.<br><br>Рисунок 1.<br><table><tr><td>Апотанит<td>Тромбопентин<td>Осложнение<tr><td>Тримарил-2<td>Эрзацит<td>Осложнение<tr><td>WX-23<td>Рабинтон<td>Осложнение</table><br><br>Рисунок 2.<br>Тут пиктограммки :)"');

select data.set_attribute_value(data.get_object_id('library_document16'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document16'), data.get_attribute_id('system_is_visible'), data.get_object_id('person5'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document16'), data.get_attribute_id('system_is_visible'), data.get_object_id('person15'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document16'), data.get_attribute_id('system_is_visible'), data.get_object_id('person31'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document16'), data.get_attribute_id('system_is_visible'), data.get_object_id('person19'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document16'), data.get_attribute_id('system_is_visible'), data.get_object_id('person43'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document16'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document16'), data.get_attribute_id('name'), null, jsonb '"Болезни и методы их лечения (закрытые)"');
select data.set_attribute_value(data.get_object_id('library_document16'), data.get_attribute_id('document_title'), null, jsonb '"Болезни и методы их лечения (закрытые)"');
select data.set_attribute_value(data.get_object_id('library_document16'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document16'), data.get_attribute_id('content'), null, jsonb '"Токсикологическое воздействие<br>Причины – употребление внутрь токсичного или патогенного вещества.<br>Больной чувствует слабость и резкие боли в животе. Возможны также такие симптомы как озноб и жажда. При отсутствии лечения наступает паралич, приводящий к коме и смерти.<br>Лечение<br>Эрзацит, возможно применение Тромбопентина (возможно появление побочных эффектов).<br>Противопоказано применение Апотанита.<br><br>Лучевая болезнь.<br>Причины – облучение высокими дозами радиации.<br>Симптомы: тошнота, рвота, покраснение и отек кожи, возможно появление галлюцинаций. При отсутствии лечения возникает дыхательная недостаточность с возможностью летального исхода.<br>Лечение: Тримарил-2.<br>Вариант лечения: Эрзацит. Возможны осложнения, применять с осторожностью.<br><br>Цитомега-инфекция.<br>Поражает только представителей рас минбари и антарес.<br>Причины – инфекционное заражение. Переносится воздушно-капельным путем.<br>Симптомы: головокружение, кашель, слабость, эмоциональные всплески (эйфория, гнев, страх). При отсутствии лечения болезнь поражает зрительные нервы, зрение сильно ухудшается, также возможно проявление симптомов обезвоживания и усиление кашля. На последней стадии болезни развивается дыхательная недостаточность с возможностью летального исхода.<br>Лечение<br>Минбари: рабинтон, WX-23 с осторожностью<br>Антарес: WX-23.<br><br>Драфа.<br>Болезнь невыясненной этимологии. Болезнь была обнаружена только у маркабов, возможно заражению подвержены также представители расы пакмара.<br>Симптомы: на начальной стадии – боль в горле, возможны слабость и озноб. В дальнейшем появляются такие симптомы как паралич верхних конечностей, слабость, повышение температуры. На следующей стадии начинается паралич верхних дыхательных путей и мускулатуры шеи, что в свою очередь приводит к коме и возможности летального исхода.<br>Лечение симптоматическое.<br><br>Лихорадка Айну<br>Поражает только людей, центавров и нарнов.<br>Причины: инфекционное заражение.<br>Симптомы: головная боль, сыпь на руках, зуд. На поздних стадиях – появление слуховых галлюцинации, дыхательная недостаточность. Больной может впасть в кому.<br>Лечение.<br>Люди: тромбопентин.<br>Центавр и Нарн: WX-23, тромбопентин (возможны побочные эффекты)<br><br>Номориаз<br>Поражает только драззи, дилгар и бракири.<br>Симптомы очень разнообразны, что затрудняет постановку диагноза. На первых стадиях болезнь характеризуется состоянием эйфории,  свето- и шумобоязнью. В дальнейшем проявляются паранойя, поведенческие изменения, тремор и паралич конечностей. Без медикаментозной помощи больной может впасть в кому.<br>Лечение:<br>Дилгары: тромбопентин, апотанит (возможны побочные действия)<br>Икариане: тромбопентин, апотанит (возможны побочные действия)<br>Бракири: тромбопентин.<br><br>Нервное истощение<br>Характеризуется упадком сил, снижением внимания, свето- и звукобоязнью, боязнью света и шума, появлениями агрессии, галлюцинациями, паническими атаками.<br>Лечение.<br>Антарес, Дилагры и икариане: апотанит, WX-23<br>Люди: апотанит<br>Минбари, Центавр и нарн: апотанит, WX-23 (возможны побочные эффекты)<br>Бракири: WX-23.<br><br>Зависимость от АнтиПси.<br>Перечень симптомов пока целиком не изучен, но в целом симптоматика напоминает токсикологическое воздействие и нервное истощение. Зависимость возникает после первой дозы. Одинаковое действие на все расы.<br>Лечить как отравление и нервное истощение одновременно.<br>Важно: порядок лечения – в первую очередь снимают токсикологическое отравление, затем нервное истощение.<br><br>Психотравма<br>Возникает после травмирующего события. Представляет собой сочетание психологического и физиологического повреждения. Приступы вызываются триггером, снимаются медикаментозно. Для излечения нужно снять период обострения и проработать событие с психологом или псиоником.<br>Лечение:<br>Психологическая сторона болезни: разговор с психологом о том, что именно послужило причиной психотравмы. Разговор по душам без секретов об этом событии. Как вариант возможно вмешательство псионического сканирования.<br>Физиология: приступы лечатся также как нервное истощение. Лечение снимает симптомы приступа до следующего срабатывания триггера."');

select data.set_attribute_value(data.get_object_id('library_document17'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document17'), data.get_attribute_id('system_is_visible'), data.get_object_id('person11'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document17'), data.get_attribute_id('system_is_visible'), data.get_object_id('person35'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document17'), data.get_attribute_id('system_is_visible'), data.get_object_id('person6'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document17'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document17'), data.get_attribute_id('name'), null, jsonb '"Правила игры Древних (закрытые)"');
select data.set_attribute_value(data.get_object_id('library_document17'), data.get_attribute_id('document_title'), null, jsonb '"Правила игры Древних (закрытые)"');
select data.set_attribute_value(data.get_object_id('library_document17'), data.get_attribute_id('system_library_category'), null, jsonb '"category_rules"');
select data.set_attribute_value(data.get_object_id('library_document17'), data.get_attribute_id('content'), null, jsonb '"Некоторые разъяснения метафизики процесса и его реализации в игровых моделях<br>1. Пространство игры древних - это некое метафизическое пространство, называемое «Озером душ». Физически оно связано с гиперкосмосом. Визуализация поля для игры - само поле представляет из себя паутину, перекрещивающиеся линии которой создают узловые точки и границы (см. рисунок),<br>1.1. Точки пересечения линий “паутины” (см карту) = Узловые точки = Приводные Маяки = Звездные системы, контролируемые различными цивилизациями.<br>1.2. Внутренний круг “паутины” составляют наиболее духовно продвинутые цивилизации (Маркабы, Минбари, ЗА), внешний круг - наименее “духовно продвинутые” цивилизации (Нарны, драззи, антаресы, все остальные).<br>1.3. Доступ к точке (Маяку) дает представитель той цивилизации, которой принадлежит Звездная система. <br>Если Звездная система контролируется двумя и более цивилизациями, разрешение необходимо получить от представителя каждой из них.<br>1.4. Если “Озеро душ” цивилизации имеет общую границу с “Озером душ” другой цивилизации, возможен взаимообмен душами этих двух цивилизаций. Такой взаимообмен позволяет душам представителей одной цивилизации возрождаться в телах представителей другой и наоборот.<br>Если граница выражена двойной линией, это означает, что взаимообмена душами у цивилизаций, находящихся по разные стороны от этой границы, не происходит.<br>1.5. Душа - это не память и не жизненный опыт, душа связана с потенциалом личности - энергетический и эмоциональный заряд, который чем ярче, тем большего величия добьется обладатель души.<br>Все события, происходящие в реальности, отражаются в Озере Душ. Чем глобальнее эти события, тем сильнее их влияние на Озеро Душ и обратное влияние Озера на реальность.<br>2. Визуализация поля для игры - само поле представляет из себя паутину, узловые точки которой это Звездные Системы с Приводными Маяками, образующие на карте «реального космоса» звездные перекрестки. Борьба между древними идет за эти узловые точки.<br>2.1. Зачем Узловые точки, сиречь Приводные Маяки, нужны Ворлонам? Ворлоны обитают не в реальном космосе, а в гиперпространственной сети. Это групповой сверхразум, который существует в Приводных Маяках, являющихся для этого сверхразума материальным носителем. Сеть Маяков позволяет Ворлонам контролировать реальность мира, корректировать его будущее и прошлое. Кроме того, чтобы вся система функционировала, обязательно наличие факта гиперпространственных полетов. Эту функцию исполняют младшие расы. Они являются как бы обслуживающим персоналом сети Ворлонов.<br>2.2. Зачем Узловые точки Теням? По сути незачем. Тени давно хотят уйти за «предел», что бы это ни значило. Однако Сеть ворлонов не дает им это сделать. Поэтому Тени стремятся нанести Сети как можно больший урон, перестраивая Маяки так, чтобы Ворлоны не могли их использовать как элементы Сети. Попутно у малых рас теряется возможность использовать маяки как элементы их транспортной сети. Когда-нибудь Сеть ослабеет настолько, что Тени смогут выйти за «предел».<br>2.3. Зачем Узловые точки Третьему? По сути, Третий пока что просто прямой конкурент Ворлонов. Он тоже захватывает точки для себя, чтобы жить, так сказать. Наличие Третьего как-то связано с войной коллективного разума дракхов внутри себя, Третий стоит за фракцией Богосоздателей. Тени за фракцией Богоискателей. А вот кто стоит за фракцией Агностиков не очень ясно. Может и никто. Однако война фракций парализовала Дракхов и вывела их из Большой игры на ближайшее время.<br>3. Визуализация - игра визуализируется флажками с маркерами Ворлона, Тени или Третьего, которые кладутся на точку, в которую сверхразум получил доступ. Когда уровень доступа повышается, добавляется еще один флажок.<br>4. Ключи - некоторые индивиды - носители душ имеют способность “определять течения в Озере душ”. На Вавилоне-5 все игроки наделены этой способностью. Их называют Ключ. Именно они могут дать сверхразуму “доступ” к узловой точке в сети “Озера душ”. <br>5. Эмиссары - сами Древние не различают индивидов, и по большому счету не разбираются в том, что происходит в “реальном космосе”. Для них политика, войны и прочее лишь источник раздражающих факторов, доносящийся до них через “Озеро душ” в виде эмоций. Поэтому все они действуют через Эмиссаров. Эмиссары - это представители разумных младших рас, которых завербовали Древние. Именно они и осуществляют политику своих “хозяев” в меру своего разумения. <br>6. Эмиссары - взаимодействуя с другими игроками склоняют их на сторону “своей” силы, заключая с ними что-то вроде “сделки”. Модель такова: за некую помощь, личную или фракционную, игрок дает Эмиссару доступ к своей душе и дает ему заменить одну из своих Ценностей на ту, которую выберет Эмиссар. <br>Когда ценность изменена, персонаж этого игрока становится Ключом, давая возможность сверхразуму ФИЗИЧЕСКИ действовать в узловой точке Озера душ, которую Ключ представляет. Это связано с особенностями ориентации Древних - они ориентируются в гипере на “свет души” а не по маякам. <br>6.1. Одна или две измененные ценности у Ключа дают частичный доступ (право входа в узловую точку)<br>6.2. Три измененные ценности у одного и того же Ключа дают полный доступ (блокирование узловой точки). <br>6.3. Физическое уничтожение Ключа ликвидирует доступ. <br>8. Как только сверхразум получает Ключ с “полным доступом”, он может закрыть другим противникам доступ в узловую точку “Озера душ”, несмотря на наличие у них любого количества неполных Ключей.<br>9. Каждая измененная ценность продуцирует “Баллы власти”, которые Древние могут потратить на совершение чудес, строительство реальных флотов, захват маяков, и т.п.<br>Первая измененная Ценность дает 2 балла, вторая - 5 баллов, третья - 8 баллов. <br>10. Никто не мешает эмиссарам действовать чужими руками - руками других младших рас, а не “меряться чудесами”. <br>Пример из сериала: Вот как накладываются сцены из сериала на  нашу метафизику. Почему Ворлоны в конце концов начали тупо долбить планеты рас, якшающихся с Тенями. Это был жест отчаяния с их стороны. При тотальной зачистке уничтожается как ключ, так и его возможность влиять на озеро душ (население планетной системы). Тени теряют доступ к такой системе автоматически. Однако Ворлоны теряют обслуживающий персонал маяков. И сеть слабеет. В принципе Теней устраивает и такой вариант, именно поэтому тотальная война всех со всеми, а также вовлечение в эту войну Ворлонов на физическом уровне им выгодно, и именно поэтому Ворлоны так долго не решались на такие действия. Вспомним Лондо - он остался последним, что связывало Центавр Прайм с Тенями и Ворлоны были готовы бомбить планету, только из-за него одного, потому что Лондо - Ключ Теней. Не различая индивидумов, Ворлоны не способны наносить по ним точечные удары.<br><br>Собственно правила:<br>Правило Вампира: сверхцивилизации не могут действовать в рамках Озера душ конкретной цивилизации, в том числе в “реальности” пока их не “пригласят”. Приглашение может быть осуществлено двумя путями:<br>1.1. Согласие на “официальном уровне” от представителей кластера или глав всей цивилизации. Но за такое приглашение не начисляются баллы власти - наоборот для посещения системы их нужно потратить.<br>1.2. Согласие официального представителя кластера на замену ценности. Продуцирует Баллы власти. <br>Правило Трех: у каждого из Древних в одной точке “реального” пространства может быть лишь один эмиссар. <br>Правило “нет контакта”: во-первых один эмиссар не может напрямую навредить другому эмиссару. Во-вторых он не может инициировать нанесение эмиссару вреда третьей стороной. Эмиссары не взаимодействуют между собой НИКАК. Даже через посредников. О погоде и природе конечно можно поболтать.<br>Правило Тайны: Эмиссарам запрещено использовать в игре термины из этих правил и объяснять суть происходящих событий любым другим игрокам. Максимум можно изъясняться словами о “великой миссии”, “вечной войне” и прочими пропагандистскими штампами, нельзя представлять борьбу сверхразумов картинкой разборок криминальных группировок за автозаправку. Важно - эмиссары не обязаны говорить правду, они могут придумывать вообще что угодно.<br>Правило Ключа - НА ИГРЕ. Эмиссарам запрещено лично уничтожать чужие Ключи. Максимум можно подставить - чтобы свои убили или посадили там. Если персонаж уже является Ключом для одного сверхразума (согласился на замену ценностей), то если эмиссар другого сверхразума заменяет ему вторую ценность, персонаж становится бесполезен как ключ для всех сторон. <br>Правило обмена - для осуществления замены Ценности Эмиссар должен выполнить условия: 1. Предложить Чудо (можно не в такой формулировке). 2. Озвучить плату - изменение личности персонажа.  Если игрок дает принципиальное согласие сделка заключена! С этого момента игрок давший согласие не может отменить сделку! 3. Эмиссар сотворяет чудо по правилам чуда. 4. Далее эмиссар меняет игроку ценность (от какой именно ценности отказаться решает игрок-ключ), на свойственную своей психологии. Тени делают из людей эгоистов, Ворлоны героев, а Третий рабов. 5. После Замены Эмиссар идет к мастерам для работы с картой, получения и траты Баллов Власти и т.д.<br>Правило “Сотворение чуда” - для сотворения Чуда Эмиссар должен потратить Баллы власти. <br>Личное чудо - эмиссар может вылечить человека от любой болезни, оживить человека (правда тут есть нюансы), найти кого угодно, короче способен решить иные проблемы легко и непринужденно. Также личным чудом является помощь в карьере, устранение конкурента, дать бабла и т.п. Личное чудо стоит 1 балл власти. <br>Чудо-чудо глобальное - типа как Лондо говорит Мордену - надо бы решить проблему с Квадрантом 37. “Ок” говорит Морден и вырезает 10 тысяч нарнов. По просьбе Ключа после заключения сделки Древние могут вторгаться в пространства, граничащие с озером души Ключа. Типа “Остановить вторжение этих злобных ксеносов!” или “спаси мой народ от неминуемой гибели!”. Эмиссару нельзя задать четкие параметры  чуда - исполнение лежит в пределах его извращенной фантазии. Обсуждается с мастерами. Глобальное чудо стоит 10 баллов власти, но оно выгодно, потому что не проходит незамеченным.<br>Надо понимать что геноцидом народов древние заниматься не будут. <br>Исполнение чуда должно быть ТЕХНИЧЕСКИ осуществимо с помощью технологий древних, их корабликов, то есть у чуда нет сакральной наполненности - кроме мордобитиев никаких чудес)))<br>Чудо должно быть адекватно плате, которую вносит ключ. Глобальное чудо за одни ценности делать глупо. Но тут уж как сторгуетесь.<br>Видеть насквозь. Эмиссары знают слабости или желания людей. Это значит, что они могут получить подсказку от мастера, что лучше всего предложить будущему ключу в качестве сделки.<br>Личные Способности Эмиссара - эмиссар обладает чудовищной личной силой. Его нельзя задержать против его воли. Он может перемещаться по станции, не обращая внимания на уровни безопасности, доступы и замки. На него не действуют медикаменты. Его нельзя парализовать, оглушить, схватить, избить, ранить или убить из обычного оружия (но эмиссар может притвориться, что воздействия на него работают). Сам эмиссар может оглушать руками, хватать людей в одиночку. Если эмиссар уничтожен, сверхразум может восстановить его тело и личность. <br>Победа - В конце игры победившей стороной будет та, у которой на руках наибольшее количество “Баллов власти”."');

select data.set_attribute_value(data.get_object_id('library_document18'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document18'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document18'), data.get_attribute_id('name'), null, jsonb '"Конституция ЗА"');
select data.set_attribute_value(data.get_object_id('library_document18'), data.get_attribute_id('document_title'), null, jsonb '"Конституция ЗА"');
select data.set_attribute_value(data.get_object_id('library_document18'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document18'), data.get_attribute_id('content'), null, jsonb '"Декларация о провозглашении Земного Альянса<br><br>В этот торжественный день 3 апреля 2085 года мы, представители свободных наций планеты Земля, собрались здесь, чтобы определить наше совместное будущее, подарить нашим потомкам вечный мир и оградить их от тех ужасов, что мы пережили. От имени своих народов мы, собравшиеся здесь, постановляем:<br>1. Отныне не будет национальных или корпоративных государств. Мы больше не рассуждаем о нациях и расах. Мы больше не делимся по вере или цвету наших денег. Отныне мы – единое человечество, объединенное в новое государственное образование – ЗА, образование которого мы декларируем в данном документе.<br>2. Отжившая своё Организация Объединенных Наций распускается, все её исполнительные функции передаются Администрации Земного Альянса. Права и полномочия Совета Безопасности ООН передаются Сенату Земного Альянса. Сенаторы Земного Сената будут выбраны по одному от каждой существующей в данный момент на Земле или её колониях территориальной единицы, объединенной общим языком, культурой и системой управления.<br>3. Все государственные и частные армии и специальные службы, существующие на планете Земля и ее колониях, распускаются. Создаются единые Вооруженные Силы Земного Альянса. Позднее по решениям Президента и Сената могут быть созданы новые специальные службы, необходимые для успешного существования Земного Альянса.<br>4. На основе равенства прав и возможностей и соблюдения норм морали и человечности после своего избрания Земной Сенат ратифицирует конституцию Земного Альянса, которая будет принята открытым голосованием всеми сенаторами от всех территориальных единиц.<br><br>Подписано:<br><br>От Центральноафриканского Блока – Моробуто<br>От Русского консорциума – Евсеев<br>От Индонезийского консорциума – Джарата<br>От Объединения государств Ислама – Аль-Руиди<br>От Североамериканского консорциума – Джонстон<br>От Консорциума Объединенной Европы – фон Маккензен<br>От Конгломерата неприсоединившихся стран – Лебовский<br>От Индо-Китайского союза - Инь Бу Хо<br>От Австрало-полинезийского союза - Мобута<br>От Африканских территорий - Мванга Ортоно<br>От Иудейского консорциума - Изя Шниперсон<br><br>3 апреля 2085 года, Женева, Объединенная Европа, планета Земля, 14 часов по Гринвичу.<br><br>Конституция Земного Альянса(избранные положения)<br><br>Раздел I. Основные положения<br><br>Статья 1. Миссия Земного Альянса<br>Земной Альянс (ЗА) является организацией, призванной осуществлять соблюдение основных прав и свобод, возможность существовать и вести разумную деятельность для всех представителей вида Homo Sapiens Sapiens (далее – людей, человеческого рода), где бы они не находились, представителями какого вида, культуры или государства себя не считали бы, знали бы они о существовании данной конституции или не знали бы.<br> <br>Статья 2. Неотъемлемые права представителей человеческого рода (права личности)<br>Все представители человеческого рода обладают набором неотъемлемых прав, таких как:<br>Право на жизнь;<br>Право на неприкосновенность личности;<br>Право на свободу передвижения и выбора места жительства;<br>Право на неприкосновенность жилища;<br>Право на тайну личности, включая право на защиту конфиденциальной информации, переписки, медицинских данных, данных о частной жизни;<br>Право на свободу совести и вероисповедания;<br>Право на свободный труд без принуждения;<br>Право на получение гражданства ЗА;<br>ЗА обязуется принимать все возможные меры к тому, чтобы данные неотъемлемые права каждого человека соблюдались в каждой точке вселенной, где существуют представители человеческого рода.<br> <br>Статья 3. Гражданство Земного Альянса<br>Гражданами Земного Альянса считаются те представители человеческого рода, которые признают существование Земного Альянса, постоянно проживают на подконтрольной органам власти Альянса территории, признают верховенство его законов в повседневной, политической и экономической деятельности, формально зарегистрированы как граждане. <br>Любой представитель человеческого рода, родившийся на подконтрольной органам власти Альянса территории, автоматически получает гражданство Земного Альянса.<br>Принудительное лишение гражданства и гражданских прав невозможно, однако от гражданства ЗА можно отказаться, приняв гражданство другой цивилизации<br>В порядке, установленном органами власти Земного Альянса любой представитель человеческого рода, не являющийся гражданином Земного Альянса, может подать прошение о присвоении ему статуса гражданина.<br> <br>Статья 4. Гражданские права<br>Граждане Земного Альянса обладают набором гражданских прав, таких как:<br>Право на справедливый суд и равенство перед законом;<br>Право на начальное и среднее бесплатное образование;<br>Право на медицинское обслуживание;<br>Право избираться и быть избранным в органы муниципального управления и органы власти Земного Альянса;<br>Право на свободное владение и распоряжение собственностью<br>Право защищать свою свободу и достоинство, и благополучие Земного Альянса с оружием в руках;<br>Право на обеспечение минимального материального благополучия<br>ЗА обязуется принимать все возможные меры к тому, чтобы данные неотъемлемые права каждого гражданина соблюдались на всей территории, подконтрольной органам власти Земного Альянса<br><br>Статья 5. Ограничение гражданских прав<br>Представители человеческого рода, не являющиеся гражданами, жители зон с особым порядком применения законности и граждане Земного Альянса, осужденные судебными органами Земного Альянса могут быть в установленном порядке лишены отдельных прав, упомянутых в статьях 2 и 4 настоящей Конституции. <br>Граждане Земного Альянса, проходящие службу в вооруженных силах Земного Альянса лишаются права избираться и быть избранными в органы власти Земного Альянса на все время прохождения службы.<br>Статья 5а (поправка от 2161 года) Акт Юма<br>Граждане Земного Альянса, с метансенсорными способностями не имеют права избираться или быть избранными в органы муниципального управления и органы государственной власти ЗА<br>Статья 5б (поправка от 2161 года). Акт Юма<br>Люди с обнаруженными телепатическими способностями автоматически попадают под действие статьи 5 настоящей конституции. Их права и свободы регулируются Уставом Пси-корпуса и отдельными нормативными актами. В Сенате образуется комитет по делам граждан обладающих метасенсорными способностями.<br>Статья 5г (поправка от 2252 года). Акт Семенова<br>Разумное существо, признанное в таковом статусе научной экспертизой, инициированной органами власти Земного Альянса, и не являющееся представителем человеческого рода, может получить статус гражданина Земного Альянса, и все гражданские и личные права за исключением права на признание о принадлежности к человеческому роду. При этом долженствование, прописанное в статье 6 раздела 1 настоящей конституции, не распространяется, решение оставляется на усмотрение органов власти Земного Альянса.<br>...<br> Раздел II. Территориальное устройство Земного Альянса.<br>...<br>Статья 11. Территориальное деление Земного Альянса<br>Земной Альянс является унитарным государством. Любое территориальное деление Земного Альянса является административным, а не политическим.<br>Территориально Земной Альянс делится на метрополию (планета Земля Солнечной Системы и спутник Земли - Луна), Колонии Внутреннего круга (колонии для доступа к которым не нужны Вортекс-Генераторы Джорджа-Вильямса) и удаленные колонии (для доступа к которым требуется Вортекс Генератор).<br>Административно Земной Альянс делится на Консорциумы, Союзы и Директории, которые в свою очередь делятся на муниципальные образования.<br>Административные единицы выделяются по принципу общности языка, культуры, сложившихся экономических культурных, логистических и иных связей. <br>Статус всех существующих территориальных и административных единиц, закрепляется в настоящей Конституции, специальными Актами Сената Земного Альянса<br>Статья 11а (поправка от 2164 года). Акт Шпенглера<br>Все колонии, основанные представителями человеческого рода, за пределами орбиты Луны, выделяются в отдельные территориальные единицы по принципу «одна колония – одна единица». <br>Статья 11б (поправка от 2230 года).  Акт Франклина<br>Космические станции, находящиеся в системах, где имеются планетарные колонии, признаются частью планетарных колоний.<br>Космические станции, находящиеся в системах, где нет планетарных колоний, выделяются в отдельные территориальные единицы, но при этом являются зонами с особым порядком применения законности.<br>Статья 11в (поправка от 2252 года). Акт Семенова<br>Признается возможным существование территориальных единиц, находящихся под временным управлением органов власти Земного Альянса, и заселенных представителями разумных видов, иных, нежели человеческий род. В этом случае на население данной территории распространяются положения статей 1 и 2 настоящей конституции.<br>Статья 11г (поправка от 2252 года). Акт Семенова<br>Признается возможным существование территориальных единиц, находящихся под совместным управлением органов власти Земного Альянса и представителей иных государственных образований. В этом случае все особенности управления территорией оговариваются в отдельном договоре, с точным указанием полномочий всех заинтересованных сторон. Договор проходит обязательную процедуру ратификации в Земном Сенате.<br>....<br>Статья 13. Управление территориально-административными единицами<br>Территориальные и административные единицы Земного Альянса управляются в соответствии с их обычаями и собственными правовыми нормами, которые не могут противоречить законодательным актам Сената ЗА, и прочим нормативным документам, принимаемый центральными органами власти ЗА.<br>Административная единица Земного Альянса может иметь представительство в Сенате Земного Альянса, чтобы участвовать в управлении Альянсом.<br>Граждане проживающие в административных единицах имеют право избирать и быть избранными в органы власти территориально-административных единиц и органы муниципального управления.<br>В случае территориально-административных единиц, описанных в статье 16, управляющие органы создаются и/или назначаются органами власти Земного Альянса или представителями вооруженных сил Земного Альянса.<br><br>Статья 14. Союзы<br>Под союзами для целей настоящей Конституции понимаются территориально-административные единицы, управляемые на принципах  прямой представительной демократией, в избирательную систему которых заложен принцип избрания выборщиков, в зависимости, от количества населения Союза.<br><br>Статья 15. Консорциумы<br>Под Консорциумами для целей настоящей Конституции понимаются Территориально-административные единицы, управление в которых построено по принципам присущим корпоративным государствам. <br>У консорциума есть уставной капитал, а создатели и инвесторы консорциума являются его пайщиками. <br>Вложивший наибольшее количество инвестиций пайщик получает больший пай, иждивенцы совсем не имеют пая в Консорциуме. <br>Выборщиками являются только граждане, чей пай и личное имущество превышают в сумме избирательный ценз. <br>Консорциумы создаются на территориях, отданных в оперативное управление и для инвестирования и развития инфраструктуры зарегистрированным Корпорациям Земного Альянса.<br>Пайщики Консорциума принимают участие в выборах Сената Земного Альянса и в выборах Президента Земного Альянса.<br>Все политические решения в консорциуме принимаются пайщиками, по установленным в Консорциуме правилам, если те не противоречат законам ЗА.<br>В Консорциумы, находящиеся за пределами орбиты Луны, Президентом Земного Альянса назначаются военные губернаторы Земного Альянса, для соблюдения прав и свобод граждан Земного Альянса, обеспечения порядка на территории консорциума, и его обороны от внешнего противника.<br><br>Статья 16. Директории или зоны с особым порядком применением законности <br>Зонами с особым порядком применения законности (Директориями) именуются территориальные единицы:<br>Объекты, находящиеся под полным контролем вооруженных сил Земного Альянса или его специальных служб, объекты и территории под контролем Корпуса-Пси.<br>Колонии и космические станции на начальном этапе заселения.<br>Космические объекты, колонии, либо сектора пространства, включенные специальным Актом Сената Земного Альянса в перечень стратегически важных для выживания человеческого рода территорий.<br>Директорию в Сенате Земного Альянса представляет военный губернатор, назначаемый Президентом по согласованию с сенатским Комитетом по делам Колоний и Комитетом Обороны.<br>...<br>Статья 19. Особый порядок применения законности<br>Под особым порядком применения законности понимается специальный режим ограничения гражданских и личных прав, характерных для конкретной Директории.<br>Режим ограничения прав вводится указом Президента Земного Альянса, по представлению компетентных органов и/или согласно рекомендациям профильных комитетов Сената ЗА.<br>Президент может ввести режим ограничения следующих прав:<br>Право на свободу передвижения. Режим доступа к объектам Директории и перемещения по ней вводится Уставом Директории. Может быть ограничено право доступа к определенным территориям, право на выезд с территории Директории (не более чем на 5 лет).<br>Право на доступ к информации и ее распространение.<br>Право на самозащиту. Право на владение оружием.<br>Право на защиту конфиденциальной и личной информации, может быть ограничено право на тайну переписки.<br>Власти Директории могут ввести режим чрезвычайного положения на территории директории своим прямым распоряжением, либо по приказанию Президента ЗА, не дожидаясь одобрения Сената.<br>...<br>Раздел III. Политическое устройство Земного Альянса<br>...<br>Статья 23. Политическое устройство<br>Земной Альянс является республикой, с демократическим политическим режимом.<br>Источником власти в Земном Альянсе являются граждане земного Альянса, правящие посредством представительных органов власти и должностных лиц, избираемых на определенный срок, демократическим путем. <br>Выборное должностное лицо, не может занимать одну и ту же должность более двух сроков подряд.<br>Статья 23а. (поправка от 1178 года) Акт Хитоширо<br>Срок, на который избирается представительный орган власти в Земном Альянсе или должностное лицо ЗА, не может превышать 7-ми земных лет,<br>Два выборных срока, это также и максимально количество сроков для гражданина Земного Альянса в течении которых он имеет право занимать одну и ту же выборную должность.<br><br>Статья 24. Органы власти и представительные органы Земного Альянса<br>Под органами власти земного альянса для целей данной Конституции понимаются:<br>Президент Земного Альянса - высшее выборное должностное лицо Земного Альянса.<br>Сенат Земного Альянса - высший орган представительной власти Земного Альянса.<br>Вице-президент Земного Альянса, высшее должностное лицо Земного Альянса, являющееся прямым заместителем Президента ЗА.<br>Должностные лица Земного Альянса, назначаемые непосредственно Президентом и Сенатом Земного Альянса.<br>Представительные органы власти территориально-административных единиц (ТАЕ) - если такие органы предусмотрены их уставными документами.<br>Выборные должностные лица территориально-административных единиц, если эти должности предусмотрены их уставными документами.<br><br>Статья 25. Выборы высших должностных лиц и выборы в представительные органы власти Земного Альянса<br>Представительные органы власти и должностные лица Земного Альянса выбираются явным голосованием выборщиков, избираемых тайным голосованием от каждой территориальной единицы Земного Альянса согласно квотам.<br>Союзы представляют выборщиков в расчете 1 выборщик на 100 000 населения.<br>Консорциумы представляют выборщиков в расчете 1 выборщик на  каждый платеж в бюджет Земного Альянса, составляющий не менее 1 000 000 000 земных кредитов.<br>Директории не предоставляют выборщиков и не участвуют в выборах в органы власти, выборах должностных лиц и выборах в органы местного самоуправления. <br>При выборах на должность Президента ЗА выборщики голосуют сразу за двух граждан, претендующих на выборные должности - Президента и Вице Президента ЗА. <br><br>Статья 26.  Президент Земного Альянса<br>Президентом Земного Альянса (далее – Президентом) может стать гражданин Земного Альянса, достигший возраста 33 земных года, не имевший в анамнезе психических заболеваний, не имеющий метасенсорных способностей, не осужденный в прошлом за тяжкие или особо тяжкие преступления, являющийся полностью дееспособным. <br>Кандидат в Президенты Земного Альянса обязан не менее 10 лет до своего выдвижения работать в государственных органах Земного Альянса, служить в  Вооруженных Силах ЗА, или специальных службах ЗА, или на тот же срок занимать должность Судьи ЗА., а также, хотя-бы единожды быть избранным в любой представительный орган или на любую выборную должность в органах власти Земного Альянса. <br>Президент избирается на срок в 7 лет.<br><br>Статья 27. Полномочия Президента Земного Альянса <br>Президент Земного Альянса осуществляя свои полномочия, имеет право законодательной инициативы, может выпускать приказы и распоряжения ведомствам ЗА, подчиняющимся напрямую Президенту.<br>Президент руководит Администрацией Президента.<br>Президент, во время ведения военных действий против внешнего противника, или во время объявления Чрезвычайного или Военного положения на территории Земного Альянса становится Главнокомандующим Вооруженных Сил Земного Альянса.<br>Президент назначает и снимает с должности военных губернаторов колоний Земного Альянса, по согласованию с Сенатским комитетом по Обороне.<br>Президент, по согласованию с сенатской комиссией по Контакту, назначает и снимает с должности послов Земного Альянса. Президент своим распоряжением определяет место службы послов ЗА. <br>Президент, по согласованию с Сенатским комитетом по метасенсорике, дает рекомендации Совету Корпуса по назначению директора Пси-корпуса.<br>Президент, по согласованию с Сенатским комитетом по обороне назначает и снимает с должности членов Объединенного Комитета начальников штабов.<br>Президент имеет право Вето на решения Сената ЗА, которое может быть преодолено только 61%  голосов от действующего состава сената. <br>Президент, по представлению Сенатского комитета по соблюдению законности назначает судей Земного Альянса, однако не может снимать их с должности, кроме случаев, когда судья осужден за совершения преступления. <br>Президент назначает и снимает с должности главу Службы Безопасности Земного Альянса и его заместителей. <br>Президент, по согласованию с сенатским комитетом по глобальной аналитике, может формировать и расформировывать специальные службы Земного Альянса, своими указами определяя сферу их компетенции, назначая и смещая их руководителей.<br>Президент, находясь в Сенате, председательствует на заседаниях Сената. Президент имеет право голоса на заседаниях Сената ЗА, который приравнивается к голосу сенатора. Президент имеет право созыва Сената ЗА.<br>Указы Президента являются законодательными актами, равнозначными Законам Сената в рамках его компетенции. <br>Президент имеет полный юридический иммунитет, пока занимает свою должность, в отношении него не применим арест, следственные процедуры, обыск, его жилище или место пребывания неприкосновенно и экстерриториально, в его отношении запрещено телепатическое сканирование.<br>Президент обязан по решению суда, или комиссии сената явиться на заседание в качестве свидетеля, если это потребуется.<br>Президент обладает правом помилования, и может выдать юридический иммунитет, гражданину, совершившему преступление, в обмен на сотрудничество с властями ЗА.<br>Президент может инициировать процесс отставки Сенатора Сената ЗА, путем подачи соответствующего указа для утверждения Сената.<br>Президент, после своей отставки имеет право на пожизненное обращение “Господин (госпожа) Президент”.<br><br>Статья 28. Отрешение от должности Президента Земного Альянса <br>Президент может быть отрешен от должности в ходе проведения процедуры импичмента.<br>Для того чтобы реализовать право на процедуру Импичмента необходимо собрать подписи не менее 30% сенаторов, от действующего состава Сената.<br>В проекте Акта об импичменте должно содержаться законное основание для отрешения от должности Президента, как-то:<br>Совершение Президентом уголовного или должностного преступления. Доказательства вины Президента, рассматриваются Сенатским комитетом по соблюдению законности, который делает заключение о состоятельности обвинений, и представляет доказательства Сенату.<br>Принятие президентом политических решений, ставящих под угрозу международную безопасность Земного Альянса, или способных вызвать вооруженное восстание внутри Земного Альянса<br>Неспособность Президента исполнять свои обязанности, в силу стойкого расстройства здоровья, вызванного обострением хронического заболевания или заболеванием психики, если президент отказывается добровольно уходить в отставку или не в состоянии этого сделать. В этом случае рекомендации Сенату, после объявления процедуры Импичмента вносит комиссия Сената по здравоохранению<br>Процедура импичмента считается завершенной, если за неё проголосовал 61%   сенаторов, от действующего состава Сената, без учета голосов президента и Вице Президента.<br>Если импичмент отклонен, он не может быть вновь инициирован по тем же обстоятельствам.<br>В случае невозможности исполнения Президентом его обязанностей по причине явной недееспособности, стойкого расстройства здоровья или психики, смерти Президента, президент может самостоятельно уйти в отставку. В этом случае должность Президента замещает Вице Президент, который исполняет обязанности Президента до очередных выборов Президента. Замещение должности Вице Президента осуществляется новым Президентом, по согласованию с главами фракций Сената. <br>Статья 28а. (поправка от 2254 года) Акт Кейн. Правовые последствия процедуры импичмента<br>В случае успешной процедуры импичмента, в дополнение отрешения от должности президента, от должности также отрешается избранный вместе с ним Вице Президент Земного Альянса.<br>Сенат Земного Альянса назначает досрочные выборы президента Земного Альянса.<br>Ни Президент ни Вице президент, отрешенные от должности в результате импичмента не могут вновь претендовать на эти должности, или на место в Сенате Земного Альянса.<br>...<br>Статья 29. Вице-Президент Земного Альянса <br>Должность Вице-президента замещает кандидатура, предложенная на эту должность кандидатом в Президенты, на этапе предварительных выборов, в случае победы этого кандидата.<br>Вице Президентом Земного Альянса может стать гражданин Земного Альянса, достигший возраста 33 земных года, не имевший в анамнезе психических заболеваний, не имеющий метасенсорных способностей, не осужденный в прошлом за тяжкие или особо тяжкие преступления, являющийся полностью дееспособным. Кандидат в вице-президенты Президенты Земного Альянса обязан не менее 10 лет до своего выдвижения работать в государственных органах Земного Альянса, служить в  Вооруженных Силах ЗА, или специальных службах ЗА, или на тот же срок занимать должность Судьи ЗА. Вице президент сохраняет свои полномочия на весь срок полномочий избранного Президента.<br><br>Статья 30. Полномочия Вице Президента Земного Альянса <br>Вице-президент Земного Альянса обладает всеми правами и полномочиями Сенатора Сената Земного Альянса, и по согласованию с лидерами фракций Сената, в обязательном порядке замещает должность председателя одного из комитетов Сената ЗА.<br>Вице Президент не может быть членом или руководителем ни одной из фракций Сената ЗА.<br>Вице Президент не входит в Администрацию Президента.<br>Вице президент обладает правом экстренного созыва Сената ЗА.<br>Вице-президент не имеет права инициировать процедуру Импичмента Президента, голосовать за проведение процедуры, или во время принятия решения по процедуре импичмента.<br>В случае неспособности исполнять свои обязанности или в случае смерти Вице-Президента, должность Вице Президента может замещать Сенатор Сената Земного Альянса, или должностное лицо Земного Альянса в ранге руководителя ведомства Земного Альянса. Директор Корпуса-Пси не может замещать должность Вице Президента. Замещение должности Вице Президента осуществляется Президентом, по согласованию с главами фракций Сената.<br>…<br>Статья 34. Сенат Земного Альянса<br>Сенат Земного Альянса (Сенат) является высшим органом представительной власти в Земном Альянсе.<br>Сенат осуществляет свои полномочия в виде издания Актов - правовых документов общеобязательных для исполнения на всей территории Земного Альянса.<br>Комитеты сената. Сенат является правительством Земного Альянса, где соответствующими ведомствами руководят комитеты Сената. Только Сенатор и Вице Президент может возглавлять Комитет Сената.<br>Вне подчинения комитетов Сената находятся Объединенный Комитет начальников штабов, специальные службы, Служба Безопасности, Пси-Корпус ЗА. Профильные комитеты могут издавать рекомендации для этих ведомств, дают экспертные оценки Сенату и Президенту, по поводу их работы имеют право на доступ к любой информации  по работе указанных ведомств, и расследуют все случаи нарушения законности руководителями и заместителями руководителей указанных ведомств. Указанные ведомства подчиняются Президенту ЗА, выполняя его политические указания и прямые приказы, в рамках определенных законами ЗА.<br>Комиссия Сената. Для осуществления оперативных полномочий сената, или расследования обстоятельств относящихся к смежной компетенции Комитетов, может быть созвана Комиссия Сената, временно получающая полномочия Комитета Сената по конкретному вопросу. После принятия решения, комиссия Сената распускается. Сенатор не может совмещать должности председателя Комиссии Сената и председателя Комитета Сената. К участию в деятельности Комиссии Сената могут быть привлечены военные губернаторы, представители консорциумов и директорий, руководители ведомств и департаментов исполнительной власти ЗА и их заместители. Все перечисленные лица могут быть избраны на должность председателя Комиссии Сената на время ее деятельности.<br>Статья 35а. (поправка от 2256 года) Акт Семенова-Сантьяго<br>В случае обсуждения важных вопросов, касающихся жизнедеятельности всего альянса, Сенат может заседать в расширенном составе, для чего созывается Конгресс. Инициировать созыв Конгресса могут Президент ЗА, и лидеры фракций сената.<br>В конгрессе могут принимать участие и иметь право решающего голоса представители Консорциумов, корпораций, директорий, профильных ведомств Земного Альянса.<br>...<br>Статья 36. Формирование и состав Сената Земного Альянса<br>Каждая Территориально административная единица в пределах орбиты луны, имеет право на представительство в Сенате Земного Альянса, согласно квотам, установленным Сенатом. <br>В метрополии количество Сенаторов от Союзов устанавливается пропорционально населению Союза, количество Сенаторов от консорциумов устанавливается пропорционально отчислениям Консорциума в Бюджет Земного Альянса.<br>Колонии Внутреннего круга - внутри Солнечной Системы могут делегировать одного сенатора от союза и одного от консорциума.<br>Колонии внешнего круга (для доступа к которым требуется вортекс генератор), не могут иметь полноценного представительства в Сенате, вне зависимости от формы территориально-административного устройства колонии. Интересы колоний внешнего круга отстаиваются в Сенате военными губернаторами колоний.<br>Сенаторы избираются сроком на 7 лет. Выборы в Сенат (кроме довыборов или повторных выборов Сенаторов) не могут происходить в тот же год, что и выборы Президента Земного Альянса.<br>Статья 36а. (поправка от 2256 года) Акт Сантьяго<br>Представители колониальных Консорциумов Земного Альянса, имеют право голосовать в при созыве Конгресса Сенатом Земного Альянса, по вопросам связанным с делами их колоний, или по делам, касающимся всех колоний Земного Альянса. В прочих случаях у представителей Консорциумов есть право совещательного голоса в Сенате. Представитель Консорциума не может быть членом Комитета Сената.<br>Консорциумы Земного Альянса сами определяют процедуру выбора представителей в Сенат.<br>Квоты на количество представителей для Консорциумов определяются специальным Актом Сената и утверждаются Президентом.<br>Статья 36б. (поправка от 2256 года) Акт Кларка<br>Гражданин замещающий должность Директора Корпуса-Пси, или уполномоченный член Совета Корпуса-Пси, может голосовать на заседаниях Сената и его голос учитывается, как голос сенатора, по вопросам, связанным с правами граждан обладающих метасенсорными способностями. Его присутствие на заседаниях Сената, где обсуждаются такие вопросы обязательно. Однако он не может ни входить в комитеты Сената ни возглавлять их и не имеет юридического иммунитета Сенаторов.<br>Статья 36в. (поправка от 2257 года) Акт Кейн<br>Все военные губернаторы любых территорий могут голосовать на заседаниях Конгресса и их голос учитывается, как голос сенатора, однако губернаторы не могут ни входить в комитеты Сената ни возглавлять их и не имеют юридического иммунитета Сенаторов.<br><br>Статья 37. Полномочия Сената Земного Альянса<br>Исключительные полномочия Сената<br>На решения, находящиеся в исключительной компетенции Сената не распространяется право Вето Президента.<br>Сенат обладает исключительным правом объявлять войну иным цивилизациям от имени Земного Альянса. <br>Только Сенат в расширенном составе (Конгресс) может вносить изменения в настоящую Конституцию<br>Сенат имеет исключительное право формировать новые комитеты, или создавать комиссии Сената<br>Сенат распоряжается бюджетными средствами Земного Альянса, принимая трехлетний бюджет специальным Актом Сената. <br>Неисключительные полномочия Сената<br>Сенат дает разрешение на боевое применение Вооруженных Сил Земного Альянса, в составе не менее одного оперативно-тактического подразделения Звездного Флота или Наземных Сил, за пределами территории Земного Альянса. Одиночные корабли с миротворческими и дипломатическими целями могут быть отправлены ОКНШ по приказу Президента, без согласования с Комитетом Обороны<br>Сенат ратифицирует все межцивилизационные соглашения, заключенные правительством ЗА с правительствами иных цивилизаций<br>Сенат может приостановить или отменить действие Указа Президента, если за такое решение проголосует не менее 61% от действующего состава Сената.<br> …<br>Статья 39. Сенатор Земного Альянса<br>Сенатором Сената Земного Альянса (далее – Сенатором, Сената) может стать любой гражданин Земного Альянса, достигший возраста 33 земных года, не имевший в анамнезе психических заболеваний, не имеющий метасенсорных способностей, не осужденный в прошлом за тяжкие или особо тяжкие преступления, являющийся полностью дееспособным. Кандидат в Сенаторы Сената Земного Альянса обязан не менее 10 лет до своего выдвижения работать в государственных органах Земного Альянса,  либо тот же срок служить в  Вооруженных Силах ЗА, либо специальных службах ЗА, или на тот же срок занимать должность Судьи ЗА.<br><br>Статья 40. Полномочия Сенатора Сената Земного Альянса<br>Сенатор обладает правом законодательной инициативы (может предлагать Сенату те или иные законы, которые могут быть утверждены или не утверждены Сенатом). <br>Сенатор может присоединться к одной фракций Сената, или зарегистрировать свою фракцию, или оставаться вне фракций Сената.<br>Сенатор может входить в комитет Сената или быть избранным его председателем. Председателей комитетов утверждает Президент по согласованному представлению лидеров фракций Сената.<br>Также председателя комитета может назначить сенат квалифицированным (61%) голосованием. В этом случае согласия Президента не требуется.<br>Сенатор, входящий в профильный комитет, имеет право требовать отчет от любого органа исполнительной власти Земного Альянса об исполнении данным органом своих обязанностей, трате государственных средств, ходе особых проектов.<br>Сенатор имеет право выезжать в действующую армию и имеют доступ на любые объекты вооруженных сил Земного Альянса и его специальных служб, при этом руководители вооруженных сил и специальных служб должны оказывать Сенатором всю потребную поддержку, но не обязаны исполнять приказы, непосредственно касающиеся их служебных обязанностей.<br>Сенатор имеет право голоса на заседаниях Сената ЗА, подавая его ЗА или ПРОТИВ предложенных законодательных инициатив. Голоса всех сенаторов равнозначны<br>Сенатор имеет полный юридический иммунитет, на весь период избрания, в отношении него не применим арест, следственные процедуры, обыск, его жилище или место пребывания неприкосновенно и экстерриториально, в его отношении запрещено телепатическое сканирование. Сенатор может быть помещен под домашний арест по требованию СБ решением Сената, на время проведения следствия.<br>Сенатор обязан по решению суда, или комиссии сената явиться на заседание в качестве свидетеля, если это потребуется.<br>Процедура отставки Сенатора может быть инициирована любым Сенатором, Президентом, Вице Президентом. Решение принимается квалифицированным (61%) большинством. <br>Полномочия Сенатора могут быть приостановлены или прекращены в случае стойкого расстройства здоровья, установленного на основании врачебного заключения. Сенатор, не может отказаться от осмотра у соответствующего специалиста, если он демонстрирует видимые симптомы заболевания. В случае если врачебное заключение дает благоприятный прогноз на излечение, в течении не более полугода, полномочия приостанавливаются. В случае если прогноз на излечения более полугода, полномочия Сенатора прекращаются<br>В случае невозможности исполнения Сенатором его обязанностей по причине стойкого расстройства здоровья, недееспособности, смерти или отрешения от должности, территориальная единица избирает нового Сенатора, полномочия которого длятся до окончания срока полномочий текущего состава Сената.<br>…<br>Статья 89. Чрезвычайное положение<br>Чрезвычайное положение может быть введено актом Сената или Указом Президента или приказом Военного губернатора (в директориях). Также чрезвычайное положение в удаленных колониях вводится военным губернатором по согласованию с представительным органом власти колонии, или по согласованию с Президентом. <br>Чрезвычайное положение автоматически вводит на территории на которой оно объявлено, режим зоны с особым применением законности (см. ст. 19 настоящей Конституции),  без смены правового статуса ТАЕ. Такое ограничение вводится временно.<br>В нормативном положении, регламентирующем введение чрезвычайного положения должны быть перечислены конкретные ограничения прав личности и гражданских прав действующие на время чрезвычайного положения, причины введения чрезвычайного положения, и срок на который вводится чрезвычайное положение.<br>Чрезвычайное положение не может вводится на срок более чем полгода.<br>Только Президент своим указом, по согласованием с Сенатом может ввести чрезвычайное положение на территории Земных ТАЕ или всего Земного Альянса.  В случае отсутствия Президента на Земле, такой указ может выпустить Вице Президент.<br>Чрезвычайное положение может вводится в ТАЕ в случаях:<br>массовых актов гражданского неповиновения, приведших к значительным человеческим жертвам<br>в случаях бунтов или случаях неподчинения приказам в военных частях, на отдельных кораблях ЗФ ВС ЗА<br>покушениях на первых лиц государства, сенаторов, руководителей ведомств ЗА<br>террористической и экстремистской деятельности на определенной территории, с которой не могут справиться местные органы правопорядка<br>забастовок, угрожающих работе стратегически важных для Земного Альянса или жизнедеятельности колоний предприятий<br>стихийных бедствий, катастроф и катаклизмов, эпидемий приведших к значительным разрушениям инфраструктуры, человеческим жертвам или гуманитарной катастрофе<br><br>Статья 90. Военное положение<br>Военное положение вводится специальным Актом Сената, указом Президента или приказом военного губернатора (для директорий).<br>Военное положение вводится на  всей территории Земного Альянса, или в его отдельных ТАЕ, в случае принятия Сенатом Акта о войне.<br>В случае принятия Сенатом решения об использовании Вооруженных Сил Земного Альянса за пределами территории Земного Альянса военное положение вводится указом Президента на территориях колоний, ближайших по направлению движения по лучам навигационных пар (гиперпространственных навигационных маяков) к месту использования вооруженных сил.<br>В случае угрозы войны, или ведения боевых действий другими цивилизациями, во всех колониях ближайших по направлению движения по лучам навигационных пар (гиперпространственных навигационных маяков) к месту конфликта может быть введено военное положение.<br>В случае введения военного положения, на территориях, на которых оно вводится действует режим   режим зоны с особым применением законности (см. ст. 19 настоящей Конституции),  без смены правового статуса ТАЕ.<br>На территориях, на которых введено военное положение не работают суды Земного Альянса, их заменяют военные трибуналы.<br>Все гражданские органы управления, местные полицейские силы и силы самообороны напрямую подчиняются старшему по званию воинскому начальнику на территории ВП. Представительные органы государственной власти и муниципального управления распускаются. На старшем по званию воинском начальнике лежит обязанность по поддержанию правопорядка и дисциплины на указанной территории.<br>Службы Безопасности и специальные службы Земного Альянса получает права ареста обыска  досмотра, любых подозрительных лиц, осмотра жилищ, доступа к любой конфиденциальной и личной информации граждан ЗА. К своей работе они могут привлекать военнослужащих ЗА<br>Некоторые категории лиц, находящиеся в списках подозреваемых в совершении преступлений, в шпионаже, подрывной деятельности, в группах социального риска, иностранные граждане, не граждане Земного Альянса могут быть превентивно интернированы на территориях ВП. Для их содержания должны быть оборудованы специальные зоны интернирования. Эти лица, с их согласия могут привлекаться для общественных работ, работ по укреплению обороноспособности ЗА - за плату, выделяемую из бюджета ЗА.<br>Указы президента, на территории в которой введено военное положение, имеют приоритетную юридическую силу перед любыми другими распоряжениями. Исключение составляют акты Сената принимаемые для регулирования общественных отношений во время военного положения."');

select data.set_attribute_value(data.get_object_id('library_document19'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document19'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document19'), data.get_attribute_id('name'), null, jsonb '"Законы, принятые Сенатом и действующие на территории ЗА"');
select data.set_attribute_value(data.get_object_id('library_document19'), data.get_attribute_id('document_title'), null, jsonb '"Законы, принятые Сенатом и действующие на территории ЗА"');
select data.set_attribute_value(data.get_object_id('library_document19'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document19'), data.get_attribute_id('content'), null, jsonb '"1. Акт Раша - при любом неповиновении населения в колониях - разрешается применение военной силы, в том числе ВС ЗА разрешено открывать огонь на поражение. Также этот акт распространяется на участников любой незаконной забастовки, проводимой в директориях в нарушение контрактов.<br>Разрешается применений НС ЗА и ЗФ ЗА при описанных событиях в колониях, директориях, за пределами орбиты луны. Беспорядками на территории Земли и Луны занимается СБ ЗА и муниципальная полиция.<br>2. Акт ЮМА. Граждане Земного Альянса, с метансенсорными способностями не имеют права избираться или быть избранными в органы муниципального управления и органы государственной власти ЗА.<br>Люди с обнаруженными телепатическими способностями автоматически лишаются гражданских прав (но не личных). Их гражданские права и свободы регулируются Уставом Пси-корпуса и отдельными нормативными актами. В Сенате образуется комитет по делам граждан обладающих метасенсорными способностями.<br>3. АКТ Тейлора Правительство Земного альянса в лице президента Георга Тейлора, и Сената Земного альянса гарантирует всем зарегистрированным корпорациям Земного Альянса, их акционерам и частным лицам, инвестирующим свои средства, возврат инвестиций, вложенных ими при освоении колоний Земного Альянса. Для этого правительство выпускает государственные “Колониальные облигации”. Номинал Колониальных облигаций, переданных конкретной корпорации равен инвестициям, вложенным владельцем облигаций средствам. Инвестиции гасятся по мере получения лицом или корпорацией прибыли от колониальной экономической деятельности. погашение долга рассчитывается из налогов платящих в колонии, в пропорции 1 к 10 один кред налога гасит 10 кредов долга. Облигации бессрочные. <br>4. АКТ Кейн (с дополнением - Акт Неймана) - на территории Земного Альянса запрещается:  Провозить на территорию ЗА компоненты, части и технологии позволяющие исследовать или создавать “искусственный интеллект”.  Запрещены любые исследования или действия - которые могут привести к созданию искусственного интеллекта. На промышленных объектах, в вооруженных силах ЗА, в правительственных структурах, компаниях - провайдерах, вещательных компаниях запрещено объединение в сеть устройств в количестве превышающем “порог Зорга”. Наказание за нарушение этого закона ссылка на рудники Титана - 10 лет. Те же деяния совершенные в сговоре с представителями иных цивилизаций наказываются стиранием личности.<br>Все имеющиеся на территории ЗА  компоненты, части и технологии позволяющие исследовать или создавать “искусственный интеллект” и любые его действующие образцы подлежат утилизации. <br>5. Акт Ларсена (2153 год) - О создании консорциумов Земли и колоний. Все корпорации и частные лица, осваивающие за свои средства заражённые территории Земли и территории дальних колоний получают объекты инфраструктур, созданные за счёт их инвестиций, и земельные участки под ними в своё вечное частное владение. Такие объекты называются “паями консорциума”.<br>6. Акт Франклина 2215 - Настоящим устанавливают торговые ограничения для всех корпораций Земного Альянса: корпорациям ЗА запрещается создание совместных предприятий для разработки ресурсов Квантум и Инфокристаллы с иными цивилизациями на территории ЗА. <br>Запрещается продажа технологий военного или двойного назначения (согласовать с ЗКО). <br>Запрещается создание совместных медицинских центров с иными цивилизациями.<br>Запрещается покупать и продавать военную технику частным лицам или корпорация, владение военной техникой является прямой прерогативой ОКНШ ЗА. <br>Запрещается участие (акционирвоание) иных цивилизаций в любых корпорациях ЗА занимающихся разработкой систем связи или вещанием в тахионном диапазоне, включая СМИ.<br>Запрещается участие (акционирование) иных цивилизаций в любых корпорациях ЗА занимающихся медицинскими или научными исследованиями физиологии или психологии человека человеческого рода.<br>Запрещается участие иных цивилизаций в любых корпорациях ЗА занимающихся разработкой и производством вортекс-генераторов Джорджа-Вильямса.<br>7. Выдержки из УК ЗА - Стирание личности полагается за следующие преступления: Убийство. Опыты над людьми и иными разумными существами - приведшее к их смерти. Военная измена. Терроризм - с человеческими жертвами.  Сабботаж, приведших к серьезным последствиям, или человеческим жертвам.<br>Заключение на рудниках Титана - срок от 7 до 15 лет. похищение людей и иных разумных существ, торговля людьми и иными разумными существами, пытки людей и иных разумных существ, без судебного решения, медицинские и научные опыты над людьми и иными разумными существами, торговля в нарушение Акта Франклина, экстремистская деятельность не приведшая к человеческим жертвам, участие в экстремистских организациях, торговля не прошедшими контроль и сертификацию Комитета по здравоохранению препаратами, распространение наркотиков (список СКЗ  ЗА),  нападения с причинением тяжкого вреда здоровью, личное (не корпоративное) владение любыми ксеноартефактами. Сабботаж, не приведших к серьезным последствиям или человеческим жертвам. Незаконное владение или пользование военной техникой, средствами космической транспортировки, средствами космической связи."');

select data.set_attribute_value(data.get_object_id('library_document20'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document20'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document20'), data.get_attribute_id('name'), null, jsonb '"Последние решения трибунала Корпуса-Пси"');
select data.set_attribute_value(data.get_object_id('library_document20'), data.get_attribute_id('document_title'), null, jsonb '"Последние решения трибунала Корпуса-Пси"');
select data.set_attribute_value(data.get_object_id('library_document20'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document20'), data.get_attribute_id('content'), null, jsonb '"Корпус ᴪ <br>Земля, Женева <br>23.11.2258 <br>Решение заседания специального комиссии, в составе трибунала Корпуса ᴪ и сенатского комитета по метасенсорике. <br>По результатам расследования событий, известных как «мятеж группы телепатов под руководством бывшего директора Пси Корпуса Рикардо Дель Густо», специальная комиссия установила: <br>По результатам анализа списков членов Пси Корпуса, комиссия может сделать вывод, что количество телепатов отправившихся в так называемую «колонию телепатов на Юкасе» составляет не более 6% от общего состава Пси Корпуса, всего около 550 000 человек. <br>Их состав чрезвычайно неоднороден, подавляющее большинство составляют телепаты с низким Пси рейтингом, не состоящие в структурах управления Пси Корпуса. Тем не менее руководство мятежом осуществляли люди входящие в руководство Пси Корпуса, прежде всего директор Пси Корпуса Рикардо Дель Густо, а так же Хенгист Кербер. <br>Исходя из результатов расследования, руководствуясь УК ЗА и кодексом Корпуса ᴪ, комиссия постановила: <br>Создать в территориальных образованиях Пси Корпуса фильтрационные центры под руководством сотрудников Пси Надзора. <br>Принять меры к задержанию и доставке в фильтрационные центры людей, находящихся в списках участников так называемого «мятежа группы телепатов под руководством бывшего директора Пси Корпуса Рикардо Дель Густо». В качестве обеспечительной меры при задержании и доставке, использовать нейролептические и нейроошейники. <br>Подвергнуть всех задержанных глубинному сканированию памяти, для выявлении степени индивидуального участия в событиях связанных с мятежом. <br>По итогам сканирования и материалов расследования, отнести задержанного к одному из трех разрядов: <br>1) Третий разряд - люди, не принимавшие участия в организационных структурах так называемого «анклава телепатов Юкас», поехавшие туда поддавшись ложным увещеваниям руководителей мятежа. Эта категория подлежит полной амнистии, но с лишением возможности работать в структурах Пси корпуса и соответственно с ограничениям исходящими из пунктов 3.6 устава Корпуса Пси. Телепаты из этой категории имеют право становиться Ассоциированными членами Пси Корпуса. <br>2) Второй разряд - люди, состоявшие в организационных структурах так называемого «анклава телепатов Юкас», но не совершившие экстремистских действий, направленных на подрыв целостности и обороноспособности ЗА. Эта категория подлежит применению к ней пунктов 3.6.4 устава Корпуса Пси. <br>3) Первый разряд - люди, совершившие экстремистские действия, направленные на подрыв целостности и обороноспособности ЗА. Эта категория подлежит применению к ней высшей меры наказания, предусмотренной УК ЗА, а именно стиранию личности. <br>По итогам расследования событий мятежа на Юкасе, передать все имеющиеся материалы в сенатский комитет по метасенсорике. <br>Председательствовали: <br>Сенатор Луис Сантьяго, И.О. директора Пси Корпуса Теодор Бетте<br><br>Корпус ᴪ <br>Женева, Земля, ЗемнойАльянс <br>19.01.2258 <br><br>Решение специального трибунала Корпуса ᴪ № 2258-19 <br>Специальный трибунал Корпуса ᴪ по результатам предварительного заочного рассмотрения дела Хенгиста Кербера, участвовавшего в мятеже группы телепатов под руководством бывшего директора Пси Корпуса Рикардо Дель Густо, постановил: <br>1) Освободить Хенгиста Кербера от занимаемой им должности руководителя Пси Надзора. <br>2) Доставить Хенгиста Кербера в центральное управление Пси Корпуса в Женеву, Земля, для проведения очного трибунала по делу о мятеже группы телепатов под руководством бывшего директора Пси Корпуса Рикардо Дель Густо. <br>3) Ввиду чрезвычайной опасности со стороны Хенгиста Кребера по отношению ко всем жителям ЗА, постановляем использовать в качестве мер обеспечения при его задержании и транспортировки, обеспечение режима постоянного приема нейролептических препаратов, либо использование нейроошейника, а так же усиленную охрану. Данные указания обязательны к исполнению всем сотрудникам Корпуса ᴪ и силовых структур ЗА. <br>4) Ввиду особой общественной опасности действий совершенных в процессе мятежа группы телепатов под руководством бывшего директора Пси Корпуса Рикардо Дель Густо, для целостности ЗА, специальный трибунал Пси Корпуса считает необходимым ознакомление с материалами расследования в отношении Хенгиста Кербера сенатского комитета по метасенсорике."');

select data.set_attribute_value(data.get_object_id('library_document21'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document21'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document21'), data.get_attribute_id('name'), null, jsonb '"Выдержки из Уставов ЗА"');
select data.set_attribute_value(data.get_object_id('library_document21'), data.get_attribute_id('document_title'), null, jsonb '"Выдержки из Уставов ЗА"');
select data.set_attribute_value(data.get_object_id('library_document21'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document21'), data.get_attribute_id('content'), null, jsonb '"Выдержки из уставов Earthforce.<br>Положения Устава внутренней службы.<br>Настоящий Устав определяет права и обязанности военнослужащих Вооруженных Сил Земного Альянса (далее - EF) и взаимоотношения между ними, обязанности основных должностных лиц полка и его подразделений, а также правила внутреннего порядка. Настоящим Уставом руководствуются военнослужащие органов военного управления, воинских частей, кораблей, предприятий, организации EF, в том числе военных образовательных учреждений профессионального образования Военного министерства EF (далее - воинские части), и лица гражданского персонала, замещающие воинские должности. <br>Положения Устава, в том числе обязанности основных должностных лиц полка и его подразделений, в равной степени относятся к военнослужащим всех воинских частей и подразделений. Обязанности должностных лиц, не указанных в Уставе, определяются соответствующими положениями, наставлениями, инструкциями и руководствами. Действие настоящего Устава распространяется на военнослужащих других войск, воинских формирований. <br>На кораблях Космофлота внутренняя служба и обязанности должностных лиц дополнительно определяются Корабельным уставом Космофлота. В мирное и военное время на занятиях и учениях по обучению военнослужащих действиям в бою, а также в ходе выполнения задач в условиях чрезвычайного положения или вооруженных конфликтов внутренняя служба определяется боевыми уставами, наставлениями по обеспечению боевых действий, а также настоящим Уставом.<br>Из раздела «Общие положения»:<br>П. 2 «Внутренняя служба требует организованных действий военнослужащих независимо от их желаний. Выполнение требований внутренней службы развивает у военнослужащих чувство ответственности, самостоятельность, аккуратность и добросовестность. Взаимопонимание, доброжелательность и готовность помочь друг другу способствуют укреплению войскового товарищества и сплочению воинских коллективов, позволяют не только выполнять задачи в повседневной деятельности, но и выдерживать тяжелые испытания в боевой обстановке.»<br>П. 4 Руководство внутренней службой в воинской части осуществляет командир воинской части, а в расположении подразделения - командир подразделения. <br>При размещении в одном помещении нескольких подразделений, командиры которых не имеют общего непосредственного начальника, приказом командира воинской части руководство внутренней службой возлагается на командира одного из этих подразделений. <br>Непосредственным организатором внутренней службы в воинской части является начальник штаба, а в расположении роты - старшина роты. <br>Ответственность за состояние внутренней службы в подчиненных войсках возлагается на всех прямых начальников. Они обязаны оказывать подчиненным воинским частям и подразделениям помощь в организации и обеспечении выполнения требований внутренней службы и систематически проверять ее состояние.<br>Приложение 1 «Структура EF».<br>Вооружённые силы Земного Альянса или Earthforce включают в себя:<br>- Звездный Флот (Earthforce Space Corps);<br>- Десантный корпус (Earthforce Marine Corps);<br>- Медицинский корпус (Earthforce Medical Corps);<br>- Корпус Безопасности и Охраны правопорядка (Earthforce Security Corps).<br>Также в состав EF включены:<br>- Академия Вооружённых Сил и её филиалы (Earthforce Academy);<br>- Почтовая служба EF (Earthforce Postal Service);<br>- Отдел научных и инженерных исследований и внедрения (Earthforce Research & Development Division);<br>- Отдел внутренней безопасности (Earthforce Internal Affairs Division), носящий неофициальное название «Око»;<br>- Разведовательное управление (Earthforce Intelligence Gathering Division);<br>- Специальное разведывательное управление (Earthforce Special Intelligence Division);<br>- Отдел биологических вооружений (Earthforce Bio-weapons Division);<br>- Отдел новых технологий (Earthforce New Technologies Division).<br><br>Командование ветвями и отделами EF осуществляют главнокомандующие и шефы отделов (Chiefs of Service и Chiefs of Division) , которые формируют Объединённый Комитет Начальников Штабов (Joint Chief of Staff), подчиняющийся непосредственно Президенту Земного Альянса, который во время военных действий носит звание Верховного Главнокомандующего EF.<br>Из главы первой «Права, обязанности и ответственность военнослужащих».<br>П. 5 Защита членов и граждан Альянса является долгом и обязанностью военнослужащего EF<br>П. 6 … к военнослужащим относятся офицеры, уоррант-офицеры и мичманы, курсанты военных образовательных учреждений профессионального образования, сержанты и старшины, рядовые, проходящие военную службу по контракту, принёсшие присягу  EF и Земному Альянсу, а также офицеры, призванные на военную службу в соответствии со  специальным указом Президента Земного Альянса; сержанты и старшины, рядовые, проходящие военную службу по призыву, в случае объявления такового Сенатом Земного Альянса. <br>Каждому военнослужащему присваивается соответствующее воинское звание. В силах EF действует унифицированная система воинских званий.<br>Приложение 2 «Воинские звания EF»<br><br>Командный состав:<br> <br>- Верховный Главнокомандующий – президент Земного Альянса.<br>- Главнокомандующий (Joint Chief of Staff) – командующий ветвью EF, член ОКНШ.<br>- Адмирал – высший офицер флота, рангом равный генералу. В EF звание адмирала обычно присваивается офицерам, осуществляющим командование большими стратегическими флотами, например флотом сектора.<br>- Генерал – высший офицер, рангом равный адмиралу. Обычно осуществляют командование тактическими флотами или соединениями или пехотными дивизиями.<br>- Вице-адмирал (Vice Admiral) – высший офицер, рангом равный генерал-лейтенанту. Осуществляют командование оперативными эскадрами.<br>- Генерал-лейтенант (Lieutenant General)  - высший офицер, рангом равный вице-адмиралу. Обычно выполняют функции начальника штаба или помкомандира при генералах.<br> Контр-Адмирал <br>- Полковник (Colonel) – высший офицер, обычно выполняют функции командиров баз или станций.<br>- Подполковник (Lieutenant Colonel)<br>- Капитан (Captain) – командир корабля, базы или космической станции.<br>- Командор (Commander) – обычно выполняет функции помкомандира или начштаба при вице-адмирале, или осуществляет командование малыми базами или станциями.<br>- Майор (Major)<br>- Лейтенант (Lieutenant)<br>- Младший лейтенант (Lieutenant Junior Grade)<br>- Энсин (Ensign)<br>Низшие чины:<br>- Старшина (Chief Warrant Officer)<br>- Старший сержант (Sergeant Major)<br>- Сержант (Sergeant)<br>- Рядовой обученный (Private First Class)<br>- Рядовой (Private)<br>П. 7 Вступить в ряды EF может любой совершеннолетний дееспособный гражданин Альянса, независимо от пола, вероисповедания, культуры и личных убеждений, за исключением лиц, обладающих метасенсорными способностями (далее – телепаты).  Военнослужащие обладают правами и свободами человека и гражданина с некоторыми ограничениями, установленными конституцией Альянса и законами членов Альянса…<br>П. 8 В соответствии с законодательством Земного Альянса содержание и объем прав, обязанностей и ответственности военнослужащих зависят от того, находятся ли они при исполнении обязанностей военной службы или нет. Военнослужащий считается исполняющим обязанности военной службы в случаях:<br>а) участия в боевых действиях, выполнения задач в условиях чрезвычайного положения и военного положения, а также в условиях вооруженных конфликтов;<br> б) исполнения должностных обязанностей;<br>в) несения боевого дежурства, боевой службы, службы в гарнизонном наряде, исполнения обязанностей в составе суточного наряда;<br>г) участия в учениях или походах кораблей;<br>д) выполнения приказа (приказания) или распоряжения, отданного командиром (начальником); е) нахождения на территории воинской части в течение установленного распорядком дня (регламентом) служебного времени или в другое время, если это вызвано служебной необходимостью;<br>ж) нахождения в служебной командировке;<br>з) нахождения на лечении, следования к месту лечения и обратно;<br>и) следования к месту военной службы и обратно;<br>к) нахождения в плену (за исключением случаев добровольной сдачи в плен), в положении заложника или интернированного;<br>л) безвестного отсутствия - до признания военнослужащего в установленном законом порядке безвестно отсутствующим или объявления его умершим;<br>м) защиты жизни, здоровья, чести и достоинства личности;<br>н) участия в предотвращении и ликвидации чрезвычайных ситуаций природного и техногенного характера, осуществляемых без введения чрезвычайного положения;<br>о) совершения иных действий, признанных судом или специальной комиссией Сената совершенными в интересах личности, общества и государства.<br>При необходимости военнослужащий по приказу командира (начальника) обязан приступить к исполнению обязанностей военной службы в любое время. Военнослужащий не признается погибшим (умершим), получившим увечье (ранение, травму, контузию) или заболевание при исполнении обязанностей военной службы, если это явилось следствием: самовольного нахождения вне расположения воинской части или установленного за пределами воинской части места военной службы, за исключением случаев, предусмотренных пунктами «к», «л», «м», «н», «о» настоящей статьи; добровольного приведения себя в состояние наркотического или алкогольного опьянения; совершения им деяния, признанного в установленном порядке общественно опасным.<br>П. 9 Военнослужащие находятся под защитой Альянса… Никто не вправе ограничивать военнослужащих в правах и свободах, гарантированных Конституцией Альянса, конституционными законами членов Альянса,  а также вмешиваться в их служебную деятельность, за исключением лиц, уполномоченных на то конституционными законами, законами Альянса, общевоинскими уставами EF и иными нормативными правовыми актами Альянса.<br>П. 11 Военнослужащий до приведения к Военной присяге (принесения обязательства) не может привлекаться к выполнению боевых задач (участию в боевых действиях, несению боевого дежурства, боевой службы, караульной службы) и задач при введении режима чрезвычайного положения и в условиях вооруженных конфликтов; за военнослужащим не могут закрепляться вооружение и военная техника, к военнослужащему не может быть применен дисциплинарный арест.<br>П. 13 Военнослужащие при исполнении обязанностей военной службы, а при необходимости и во внеслужебное время, в соответствии с законодательством Альянса имеют право на хранение, ношение, применение и использование оружия…<br>Военнослужащие в соответствии с законодательством Альянса могут применять оружие лично, а командиры (начальники) приказать подчиненным применить оружие для защиты жизни, здоровья и собственности в состоянии необходимой обороны или крайней необходимости в следующих случаях: для отражения вооруженного либо группового нападения на охраняемые государственные и военные объекты, а также на расположения воинских частей и подразделений, здания и сооружения воинских частей, колонны машин, единичные транспортные средства и караулы, если иными способами и средствами их защитить невозможно; для пресечения попытки насильственного завладения вооружением и военной техникой, если иными способами и средствами их защитить невозможно; для защиты военнослужащих и гражданских лиц от нападения, угрожающего их жизни или здоровью, если иными способами и средствами защитить их невозможно; для задержания лица, совершившего противоправные действия и оказывающего вооруженное сопротивление, а также вооруженного лица, отказывающегося выполнить законные требования о сдаче оружия, если иными способами и средствами подавить сопротивление, задержать данное лицо или изъять у него оружие невозможно. Командир (начальник), кроме того, имеет право применить оружие лично или приказать применить оружие для восстановления дисциплины и порядка в случае открытого неповиновения подчиненного в боевых условиях, когда действия неповинующегося явно направлены на государственную измену или срыв выполнения боевой задачи, а также при выполнении задач в условиях чрезвычайного положения.<br>П. 15 Обо всех случаях хищения, утраты, порчи или выхода из строя оружия или иной военной техники военнослужащие обязаны докладывать своему непосредственному начальнику.<br>П. 16 Военнослужащий в служебной деятельности руководствуется Конституцией Альянса, конституционными законами членов Альянса, федеральными законами, общевоинскими уставами и иными нормативными правовыми актами Альянса. Защита государственного суверенитета и территориальной целостности Альянса, обеспечение безопасности государства, отражение вооруженного нападения, а также выполнение задач в соответствии с международными обязательствами Альянса составляют существо воинского долга, который обязывает военнослужащего: быть верным Военной присяге (обязательству), служить народу и Сенату Альянса, мужественно и умело защищать Альянс; строго соблюдать Конституцию Альянса и законы Альянса, требования общевоинских уставов, беспрекословно выполнять приказы командиров (начальников); совершенствовать воинское мастерство, содержать в постоянной готовности к применению вооружение и военную технику, беречь военное имущество; быть дисциплинированным, бдительным, хранить государственную тайну; дорожить воинской честью и боевой славой EF, своей воинской части, честью своего воинского звания и войсковым товариществом; соблюдать общепризнанные принципы и нормы международного права и международные договоры Альянса.<br>П. 21 По служебным вопросам военнослужащий должен обращаться к своему непосредственному начальнику, а при необходимости с разрешения непосредственного начальника - к старшему начальнику. По личным вопросам военнослужащий также должен обращаться к непосредственному начальнику, а в случае особой необходимости - к старшему начальнику.<br>П. 22 Военнослужащий обязан знать и соблюдать нормы международного гуманитарного права, правила обращения с ранеными, больными, лицами, потерпевшими кораблекрушение, медицинским персоналом, духовными лицами, гражданским населением в районе боевых действий, а также с военнопленными.<br>П. 23 Военнослужащий в ходе боевых действий, даже находясь в отрыве от своей воинской части (подразделения) и в полном окружении, должен оказывать решительное сопротивление противнику, избегая захвата в плен. В бою он обязан с честью выполнить свой воинский долг. Если военнослужащий, находясь в беспомощном состоянии, в том числе вследствие тяжелого ранения или контузии, будет захвачен противником в плен, он должен искать и использовать любую возможность для своего освобождения и освобождения своих товарищей из плена и возвращения в свою воинскую часть. Военнослужащий, захваченный противником в плен, при допросе имеет право сообщить только свою фамилию, имя, воинское звание, дату рождения и личный номер. Он обязан сохранять честь и достоинство, не разглашать государственную тайну, проявлять стойкость и мужество, помогать другим военнослужащим, находящимся в плену, удерживать их от пособничества противнику, отвергать попытки противника использовать военнослужащего для нанесения ущерба Альянсу  и  EF. За военнослужащими, захваченными в плен или в качестве заложников, а также за интернированными в нейтральных государствах сохраняется статус военнослужащих. Командиры (начальники) обязаны принимать меры по освобождению указанных военнослужащих в соответствии с нормами международного гуманитарного права.<br>П. 24 Каждый военнослужащий, назначенный на воинскую должность, имеет должностные обязанности, которые определяют его полномочия, а также объем выполняемых им в соответствии с занимаемой воинской должностью задач. Должностные обязанности исполняются только в интересах военной службы.<br>Для исполнения специальных обязанностей военнослужащие могут наделяться дополни- тельными правами (на применение оружия, специальных средств, физической силы, предъявление требований, обязательных для исполнения, подчинение строго определенным лицам и другими правами).<br>П. 26 Военнослужащие независимо от воинского звания и воинской должности равны перед законом и могут привлекаться к дисциплинарной, административной, материальной и уголовной ответственности в зависимости от характера и тяжести совершенного ими правонарушения.<br>П. 27 К дисциплинарной ответственности военнослужащие привлекаются за дисциплинарные проступки, то есть за противоправные, виновные действия (бездействие), выражающиеся в нарушении воинской дисциплины, которые в соответствии с законодательством Альянса не влекут за собой уголовной или административной ответственности.<br>П. 28 За административные правонарушения военнослужащие несут дисциплинарную ответственность в соответствии с Дисциплинарным уставом EF, за исключением административных правонарушений, за которые они несут ответственность на общих основаниях. При этом к военнослужащим не могут быть применены административные наказания в виде административного ареста, исправительных работ, а к сержантам, старшинам и рядовым, проходящим военную службу по призыву, курсантам военных образовательных учреждений профессионального образования до заключения с ними контракта о прохождении военной службы - также в виде административного штрафа.<br>П. 29 К материальной ответственности военнослужащие привлекаются за материальный ущерб, причиненный по их вине государству при исполнении обязанностей военной службы, в соответствии с законодательством Альянса.<br>П. 30 К гражданско-правовой ответственности военнослужащие привлекаются за невыполнение или ненадлежащее исполнение предусмотренных законами Альянса и иными нормативными правовыми актами Альянса обязательств, за убытки и моральный вред, причиненные военнослужащими, не находящимися при исполнении обязанностей военной службы, государству, физическим и юридическим лицам, и в других случаях.<br>П. 31 К уголовной ответственности военнослужащие привлекаются за совершение преступления, предусмотренного уголовным законодательством Альянса<br>П. 32 Военнослужащие, подвергнутые дисциплинарному или административному взысканию в связи с совершением правонарушения, не освобождаются от уголовной ответственности за это правонарушение. В случае совершения правонарушения, связанного с причинением государству материального ущерба, военнослужащие возмещают ущерб независимо от привлечения к дисциплинарной, административной или уголовной ответственности за действия (бездействие), которыми причинен ущерб. При привлечении военнослужащих к ответственности недопустимо ущемление их чести и достоинства.<br>П. 33 Виновность и степень вины военнослужащего, заключившего контракт о прохождении военной службы и принёсшего присягу определяет военный трибунал.<br>Приложение 3 «Из положения о военных трибуналах».<br>Военный трибунал формируется для определения виновности и степени вины военнослужащего.<br>В случаях, если подсудимый принадлежит к низшим чинам, трибунал формируется из командира части и минимум двух офицеров части, исключая непосредственного начальника подсудимого. В трибунал по делу офицера назначается не менее трёх равных подсудимому или старших его по рангу офицеров в чине не ниже майора.  Трибунал назначает обвинителя по делу и назначает подсудимому защитника из числа офицеров части. Также в случае необходимости трибунал формирует следственную группу, если таковая не была сформирована представителями Корпуса Безопасности или Отделом внутренней безопасности.  Трибунал имеет право: опрашивать обвинителя и защитника, равно как и самого подсудимого, вызывать и опрашивать свидетелей по делу, выносить вердикт о виновности или невиновности подсудимого, выносить приговор. За исключением  случаев военно-полевого суда, приговор трибунала утверждается Военным судом округа или сектора и может быть обжалован там же в установленные законом сроки. Вердикт и приговор Военного суда округа или сектора может быть обжалован только в Высшем военном суде на Земле. Трибунал вправе назначать следующие наказания:<br>- предупреждение, порицание;<br>- заключение под стражу, лишение свободы на определённый срок на гауптвахте или в военной тюрьме;<br>- материальное взыскание;<br>- исправительные работы, в том числе сопровождающиеся лишением свободы на определённый срок;<br>- временное или постоянное понижение в звании;<br>- отставка из рядов EF с сохранением наград и званий, разжалование, разжалование с передачей дела в суды гражданской юрисдикции;<br>- смертная казнь.<br>Смертная казнь предусматривается только за совершение измены и в обязательном порядке утверждается в Высшем военном суде, за исключением вынесение приговора военно-полевым судом в условиях ведения боевых действий.<br>Трибунал созывается:<br>- по представлению офицера или офицеров части;<br>- по представлению гражданских судов, в случае если подсудимый является военнослужащим или являлся таковым на момент совершения правонарушения;<br>- по представлению следственной комиссии Отдела внутренней безопасности по результатам расследования.<br>Военный трибунал не может рассматривать преступления гражданских лиц. Деятельность военных трибуналов может быть расследована специальной комиссией Сената. Также Сенат может потребовать от трибунала любого уровня допустить членов специальной комиссии на любом заседании трибунала."');

select data.set_attribute_value(data.get_object_id('library_document22'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document22'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document22'), data.get_attribute_id('name'), null, jsonb '"Устав Пси-Корпуса"');
select data.set_attribute_value(data.get_object_id('library_document22'), data.get_attribute_id('document_title'), null, jsonb '"Устав Пси-Корпуса"');
select data.set_attribute_value(data.get_object_id('library_document22'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document22'), data.get_attribute_id('content'), null, jsonb '"Устав Управления по делам метасенсорики «Корпуса ᴪ»<br><br>Часть I. Цели и задачи корпуса<br>Гуманитарная миссия<br>Часть II. Структура организации<br>Внешняя субординация<br>Внутренняя субординация<br>Центр тестирования<br>Центр образования<br>Центр реабилитации<br>Пси–надзор<br>Военный отдел<br>Медико-исследовательский отдел<br>Смешанный отдел<br>Система иерархии<br>Часть III. Обязанности телепатов, ограничения для телепатов<br>Общие положения<br>Обязанности перед Корпусом ᴪ<br>Ограничения, связанные с государственной службой<br>Запрет незаконного метасенсорного воздействия<br>Часть IV. Условия вступления<br>Генетический тест<br>Психологическая экспертиза<br>Выход из Управления<br>Часть V. Привилегии телепатов<br>Предоставление защиты<br> <br>“Корпус – Мать! Корпус – отец!”<br>Введение<br> <br>Настоящий устав регламентирует:<br>1.  отношения между структурными организациями Земного Альянса и Управлением по делам метасенсорики - Корпуса ᴪ<br>2.  отношения между управлением по делам метасенсорики  и людьми, обладающими метасенсорными способностями<br>3.  отношения между людьми, обладающим метасенсорными способностями, с одной стороны, и людьми, не обладающими метасенсорными способностями, с другой,<br>4.  отношения между людьми, обладающим метасенсорными способностями.<br>Часть I. Цели и задачи корпуса<br>Гуманитарная миссия Корпуса ᴪ<br>1-1. Обоснования.<br>Начавшиеся в октябре 2115 года беспорядки и противозаконные действия в отношении людей, попавших под подозрение в обладании метасенсорными способностями, определили необходимость создания структурного отделения Земного Альянса (далее - ЗA), которые будет регулировать отношения между людьми, обладающими метасенсорными способностями (далее - телепаты) и не-телепатами.<br>1-2. Социализация.<br>Управление по делам метасенсорики (далее – Корпус ᴪ) занимается предоставлением телепатам возможности безболезненной и адекватной социализации в обществе. Телепаты - полноправные граждане ЗА, и их метасенсорные способности не должны быть причиной для ограничения или расширения их прав и свобод, установленных конституцией ЗA.<br>1-3. Психическое здоровье.<br>Многие телепаты, начинающие ощущать свои метасенсорные способности, не могут адекватно и безболезненно для психического здоровья их принимать и использовать. Корпус ᴪ занимается реабилитацией и воспитанием здоровой личности телепата.<br>1-4. Развитие.<br>Телепатия - новый шаг в эволюционном процессе человечества, и долг нашей цивилизации - принять этот шаг и разумно воспользоваться его возможностями. Задачей Корпуса ᴪ является сохранение и развитие возможностей человека, которые предоставляют ему метасенсорные способности.<br> <br>Часть II. Структура организации<br> <br>Внешняя субординация Корпуса ᴪ<br>2-1. Директор Корпуса ᴪ<br>Директор Корпуса ᴪ обладает полной исполнительной властью внутри Корпуса ᴪ.<br>2-2. Назначение Директора Управления ДМ - Корпуса ᴪ.<br>Директор Управления ДМ - Корпуса ᴪ назначается и увольняется сенатским комитетом по Метасенсорному Регулированию, по согласованию с Президентом ЗА.<br>2-3. Субординация.<br>Директор Управления подчиняется только Президенту ЗА и не связан регламентирующими актами с другими подразделениями, министерствами и агентствами ЗА.<br>Внутренняя субординация Корпуса ᴪ<br>2-4. Совет Корпуса ᴪ<br>Оперативное руководство Корпусом ᴪ осуществляется внутренним советом, состоящим из глав всех центров Корпуса ᴪ, и глав всех отделов Управления - Корпуса ᴪ:<br>Центры Корпуса ᴪ<br>1.  Центр тестирования<br>2.  Центр образования<br>3.  Центр реабилитации<br>Отделы Корпуса ᴪ<br>1. медико-исследовательский отдел<br>2.  Военный отдел<br>3.  коммерческий отдел<br>4.  смешанный отдел<br>5.  Пси-надзор<br>2-5. Законотворческая деятельность.<br>Совет Корпуса ᴪ создает административные и дисциплинарные акты, распространяющиеся на всех членов Корпуса ᴪ, а также обладает правом законодательной инициативы, для внесения законодательных актов, касающихся людей с метасенсорными способностями в Сенат ЗА. Также совет Корпуса ᴪ получает на экспертизу все законопроекты, касающиеся людей с метасенсорными способностями, выдвинутые другими субъектами законодательной инициативы, и обязан выдать свое заключение по представленным законопроектам вкупе с поправками и рекомендациями Сенату ЗА.<br>2-6. Судебная деятельность.<br>Совет Управления - Корпуса ᴪ формирует специальный Трибунал Корпуса, все сотрудники которого должны быть лицензированными телепатами. Трибунал осуществляет разбирательство в дисциплинарных и уголовных делах в отношении телепатов. Судебный процесс проходит в соответствии с УПК ЗА, а приговор выносится согласно УК ЗА.<br>2-7. Территориальное подчинение<br>Совет Корпуса - Управление организует и лицензирует территориальные отделения своих Центров и Отделов, на территории Земного Альянса. Отделения Управления должны присутствовать во всех консорциумах, союзах, директориях, и иных федеральных субъектах Земного Альянса. Отделения могут формировать более мелкие территориальные подразделения, в муниципальных образованиях федеральных субъектов ЗА. Руководство территориальными отделениями осуществляется, непосредственно руководителями отделений, под началом глав Центров и Отделов Управления.<br>2-8.Субординация.<br>Совет Корпуса ᴪ не подчиняется напрямую Директору Корпуса ᴪ, однако Директор Корпуса ᴪ имеет право снять с должности любого члена Совета Корпуса ᴪ. Совет Корпуса ᴪ может предложить сенатскому комитету по Метасенсорному Регулированию снять с должности Директора Корпуса ᴪ.<br>Центр тестирования<br>2-8. Основные положения.<br>Центр тестирования занимается тестированием людей на предмет обладания ими метасенсорных способностей.<br>2-9. Обязательность тестирования.<br>Каждый гражданин Земного Альянса обязан пройти тест на обладание метасенсорных способностей в возрасте от пяти до восьми лет.<br>2-10. Повторное тестирование.<br>Центр тестирования имеет право осуществить повторное тестирование гражданина ЗА. При необходимости сотрудники центра Тестирования имеют право запросить поддержки у местных полицейских сил, службы безопасности. Такого рода поддержка является для силовых структур задачей номер один (за исключением статуса ведения активных боевых действий, военного положения или чрезвычайной ситуации).<br>2-11. Результаты тестирования.<br>При положительном результате тестирования человек автоматически зачисляется в Корпус ᴪ, и на него начинают распространяться все нормы, установленные настоящим уставом, а также иные законодательные акты Корпуса ᴪ, специальные акты по Метасенсорному Регулированию, принятые Сенатом ЗА.<br>2-12. Определение потенциала.<br>2-12-1. Центр тестирования обязан установить потенциал метасенсорных способностей телепатов, прошедших тестирование и присвоить телепату П-рейтинг, согласно регламенту. Для этого должны быть проведены дополнительные тесты и испытания.<br>2-12-2. П-рейтинг – врожденный уровень способностей телепата. Новый (более низкий) рейтинг может быть присвоен телепату получившему неизлечимую метасенсорную травму, или же, более высокий, только в том случае, если при тестировании произошла ошибка.<br>- Устанавливается следующая градация потенциала телепатов, в дальнейшем именуемая П-рейтингом:<br>2-12-2-1. П-рейтинг П1-П2. Телепатические способности минимальны и проявляются спорадически, посредственная эмпатия и некоторые способности к блокированию сканирования. Телепаты с этим рейтингом могут не вступать в Пси-Корпус, однако обязаны встать на учет в Пси-надзоре, и информировать отделение Пси-надзора, по месту жительства о смене места жительства, заключаемых браках, и рождении детей.<br>2-12-2-2. П-рейтинг П3-П4. Устойчивые метасенсорные способности. Конкретный список способностей определяется внутренними регламентами Центра тестирования. Вступление в Корпус для прохождения обучения – обязательно. Могут претендовать на исполнительные должности, работать в Центрах и Отделах на административно-хозяйственных и распорядительных должностях.<br>2-12-2-3. П-рейтинг П5-П6. Устойчивые метасенсорные способности. Конкретный список способностей определяется внутренними регламентами Центра тестирования. Вступление в Корпус для прохождения обучения – обязательно. Телепаты с этим рейтингом могут получить ассоциированное членство в Корпусе и лицензию на коммерческую деятельность, после прохождения подготовки в Центре Образования. Могут претендовать на руководящие должности среднего звена, или работать в Центрах и Отделах на административно-хозяйственных и распорядительных должностях.<br>2-12-2-4. П-рейтинг П7-П9 Устойчивые метасенсорные способности. Конкретный список способностей определяется внутренними регламентами Центра тестирования. Вступление в Корпус для прохождения обучения – обязательно. Телепаты с этим рейтингом не могут получить ассоциированное членство в Корпусе. Телепат с рейтингом П7-П9 может претендовать на руководящие должности Управления, начиная от руководства территориальными отделениями, испытательными и подготовительными центрами и руководство отделом Коммерческой телепатии.<br>2-12-2-5. П- рейтинг П10-П11 Устойчивые метасенсорные способности. Конкретный список способностей определяется внутренними регламентами Центра тестирования. Вступление в Корпус для прохождения обучения – обязательно. Телепаты с этим рейтингом не могут получить ассоциированное членство в Корпусе. Телепат с рейтингом П10-П11 может претендовать на руководящие должности Управления, начиная от руководства Центрами, Отделами или их заместителями. Директор Корпуса и члены совета Корпуса должны иметь рейтинг не менее П-10.<br>2-12-2-6. П-рейтинг П12. Устойчивые метасенсорные способности. Конкретный список способностей определяется внутренними регламентами Центра тестирования. Вступление в Корпус для прохождения обучения – обязательно. Телепаты с этим рейтингом не могут получить ассоциированное членство в Корпусе. Телепаты этого рейтинга обязаны работать только в отделе Пси-надзора.<br>2-13. Субординация.<br>а. Центр тестирования подчиняется только главе Центра тестирования и не связан регламентирующими актами с другими подразделениями, министерствами и агентствами ЗА.<br>б. Назначение главы Центра тестирования осуществляется путём внутреннего голосования всех служащих Центра тестирования. Голосование инициируется Директором Корпуса ᴪ или Советом Корпуса ᴪ.<br>Центр образования<br>2.14. Основные положения.<br>Центр образования занимается предоставлением телепатам полноценного образования, которое не должно уступать в качестве общепринятому образованию ЗА.<br>2.15. Дополнительное образование.<br>Центр образования организует дополнительные курсы, связанные с метасенсорными способностями, задачами которых являются:<br>1.  Раскрытие потенциала телепата.<br>2.  Развитие метасенсорных способностей телепата.<br>3.  Сохранением психического здоровья телепатов<br>2.16. Образовательная нагрузка.<br>Дополнительное образование телепатов не должно вредить базовому образованию гражданина ЗА. В остальном Центр образования самостоятельно регулирует образовательную нагрузку в отношении телепатов.<br>2.17. Субординация.<br>а. Центр образования подчиняется только главе Центра образования и не связан регламентирующими актами с другими подразделениями, министерствами и агентствами ЗА.<br>б. Назначение главы Центра образования осуществляется путём внутреннего голосования всех служащих Центра образования.<br>Центр реабилитации<br>2.18. Основные положения.<br>Центр реабилитации служит для лечения психологических травм телепатов, полученных ими в результате неквалифицированного использования врожденных метасенсорных способностей (далее - метасенсорная травма). Центр реабилитации осуществляет надзор за телепатами, вышедшими из Корпуса ᴪ или не вступившими в Корпус ᴪ, которым назначено ограничение свободы или медикаментозное подавление метасенсорных способностей<br>2.19. Реабилитационные центры.<br>Телепат с метасенсорными травмами должен содержаться в реабилитационном центре. Доставка таких телепатов в реабилитационные центры осуществляется сотрудниками Пси-надзора.<br>2.20. Методы реабилитации.<br>Центр реабилитации обязан использовать наиболее безопасные и безвредные методы для реабилитации телепатов с метасенсорными травмами. В остальном Центр реабилитации самостоятельно определяет курс методы лечения и восстановления.<br>2.21. Определение клинических случаев.<br>Клиническим случаем определяется метасенсорная травма, одновременная являющаяся неизлечимой и несущей опасность для окружающих. Центр реабилитации должен своевременно выявлять телепатов с клиническими случаями и сообщать о них Пси-надзору.<br>2.22. Субординация.<br>а. Центр реабилитации подчиняется только главе Центра реабилитации и не связан регламентирующими актами с другими подразделениями, министерствами и агентствами ЗА.<br>б. Назначение главы Центра реабилитации осуществляется путём внутреннего голосования всех служащих Центра реабилитации.<br>2.23. Правовой статус отделений.<br>Телепаты, покинувшие центр образования, получившие лицензию, и не служащие в центрах Корпуса ᴪ, могут выбрать для себя, стать ассоциированным членом Управления, под надзором смешанного отдела или служить в одном из четырех отделов Корпуса ᴪ.<br>Пси–надзор<br>2-24. Основные положения.<br>2-24-1. Пси-надзор осуществляет деятельность, направленную на обеспечение безопасности граждан ЗА, от необученных телепатов и телепатов с метасенсорными травмами.<br>2-24-2. Пси-надзор исполняет функции службы внутренней безопасности Корпуса ᴪ, и службы исполнения дисциплинарных наказаний для членов Корпуса ᴪ, совершивших дисциплинарные проступки.<br>2-25. Методы и регламент.<br>Сотрудник Пси-надзора во время своей работы обязан следовать регламенту, установленному внутренними актами отделения Пси-надзора. В остальном сотрудник пси-надзора может действовать, самостоятельно принимая решения и избирая необходимые методы для обеспечения безопасности граждан ЗА и Корпуса ᴪ.<br>2-26. Полномочия пси-надзора.<br>2-26-1. Любой представитель пси-надзора имеет право запрашивать и получать информационную и силовую поддержку у исполнительных органов ЗА, для совершения задержания людей с метасенсорными травмами, и передачи их под опеку Центра реабилитации, у органов исполнительной власти, полицейских сил или службы безопасности.<br>2-26-2.  Препятствие законной деятельности сотрудника пси-надзора является уголовным преступлением средней тяжести, а, если таковое препятствие повлекло за собой ущерб имуществу, здоровью граждан ЗА, ущерб здоровью сотрудников Корпуса ᴪ, или совершено должностным лицом ЗА или государства члена ЗА, то преступление переходит в категорию тяжких.<br>2-27. Субординация.<br>2-27-1. Сотрудники пси-надзора подчиняются приказам других сотрудников пси-надзора, имеющих более высокий ранг.<br>2-27-2 Глава Пси-надзора назначается напрямую директором Управления и может быть лишен своей должности им же.<br>Военный Отдел<br>2-28. Основные положения.<br>Данный отдел призван осуществлять специальную поддержку спецслужбам ЗА, полицейским управлениям, службе безопасности и Вооруженным Силам ЗА.<br>2-29. Специальные подразделения.<br>Военный отдел имеет право формировать собственные военизированные подразделения, используя боевую технику ЗА в том числе военно-космическую.<br>2-30. Использование телепатов в полицейских и военных операциях.<br>Военный отдел имеет право предоставлять своих сотрудников для выполнения специальных функций по запросу полицейских служб, служб безопасности, спецслужб или вооруженных сил ЗА.<br>2-31. Субординация.<br>а. Глава военного отдела подчиняется директору Управления.<br>б. Субординация военного отдела определена закрытыми актами отдела.<br>Медико-исследовательский Отдел<br>2-32. Основные положения.<br>Данный отдел призван осуществлять исследование метасенсорных способностей и разрабатывать методы и инструменты их развития, раскрытия, тестирования и инициации.<br>2-33. Методы и инструменты.<br>Методы и инструменты отделения исследований и разработок регламентируются закрытыми актами отдела.<br>2-34. Субординация.<br>а. Глава отдела подчиняется директору Управления.<br>б. Глава отделения исследований и разработок выбирается путём прямого голосования среди высшего руководства отделения.<br>Смешанный отдел<br>2-35. Основные положения.<br>Данный отдел призван регламентировать отношения между телепатами и не-телепатами в областях, не относящихся к областям вышеперечисленных отделов. Также в функции отдела входит лицензирование телепатов, лишение лицензии ассоциированных членов корпуса, и наблюдение за их карьерой.<br>2-36. Ключевые профессиональные области.<br>Телепаты являются особенно ценными сотрудниками и специалистами в:<br>1.  Бизнесе, медицине, профилактике преступности, образовании.<br>2.  Сотрудники отдела или ассоциированные телепаты, могут быть использованы, по решению суда в операции по стиранию личности, или же для допросов с применением сканирования личности, в соответствии с законами ЗА.<br>3.  Сотрудники смешанного отдела могут привлекаться как эксперты к судебным делам, в основе которых лежат события, связанные с людьми, обладающими метасенсорными способностями, или же проводить психиатрическую и психологическую экспертизу для судов и государственных органов ЗА.<br>2-37. Поддержка и помощь.<br>Смешанный отдел помогает ассоциированным телепатам в трудоустройстве и поиске работы в перечисленных выше областях деятельности.<br>2-38. Регламентирование отношений.<br>Постоянные сотрудники смешанного отдела предоставляют юридическую помощь, социальные гарантии и медицинскую страховку для всех членов Управления.<br>2-39. Субординация.<br>а. Глава смешанного отдела подчиняется директору Управления.<br>б. Глава смешанного отдела выбирается путём прямого голосования среди высшего руководства отдела.<br>Система иерархии<br>2-40. Непрямое вертикальное подчинение.<br>а. Сотрудник любого из центров или отделений Корпуса ᴪ подчиняется любому другому сотруднику того же центра или отделения Корпуса ᴪ, имеющему более высокий ранг.<br>б. Сотрудник любого из центров или отделений Корпуса ᴪ не подчиняется никакому сотруднику любого другого центра или отделения Корпуса ᴪ, за исключением сотрудников Пси-надзора, находящихся при исполнении служебных обязанностей.<br>в. Все сотрудники всех центров Корпуса ᴪ подчиняются директору Корпуса ᴪ и решениям Совета Управления.<br>2-41. Содействие сотрудникам Пси-надзора.<br>Сотрудник любого центра или отделения Корпуса ᴪ обязан содействовать деятельности сотрудников Пси-надзора, если это содействие не противоречит данному уставу, законодательным актам Корпуса ᴪ и регламентирующим актам его родительского центра или отдела Корпуса ᴪ.<br>Часть III. Условия членства в Корпусе ᴪ<br>Генетический тест<br>3-1. Открытость.<br>Результаты генетического теста являются открытой информацией, и находятся в открытом доступе на сайте Корпуса ᴪ.<br>3-2. Право на вступление.<br>Каждый человек, имеющий положительные результаты теста, обязан вступить в Корпус ᴪ, для обучения, или, в случае отказа, должен быть подвергнут медикаментозному купированию метасенсорных способностей.<br>Психологическая экспертиза<br>3-3. Обязательная проверка.<br>После вступления, телепат должен пройти обязательную психологическую экспертизу, в Центре тестирования которая позволит определить наличие у него метасенсорных травм.<br>Выход из Корпуса ᴪ<br>3-4. Опасность для граждан ЗА.<br>Корпус ᴪ не может нести ответственность за телепатов, не являющихся сотрудниками Корпуса ᴪ, в связи с чем на таких телепатов распространяются дополнительные ограничения.<br>3-5. Письменное освидетельствование.<br>Телепат, решивший покинуть Корпус ᴪ, обязан письменно подтвердить, что он принял решение покинуть Корпус ᴪ без давления со стороны и не находясь в ситуации, вынуждающей его сделать это.<br>3-6.Телепаты, не являющиеся сотрудниками Корпуса ᴪ<br>Телепат, покинувший, Корпус ᴪ, имеет право на выбор между<br>3-6-1.         Статусом ассоциированного члена Корпуса ᴪ - коммерческого телепата.<br>А) Ассоциированным членом корпуса, называется телепат, прошедший полное обучение в Корпусе ᴪ, имеющий лицензию смешанного отдела Корпуса ᴪ на коммерческую деятельность, имеющий рейтинг метасенсорных способностей не мене П-5 или П-6 и освобожденный от непосредственной службы в Управлении, по его личному заявлению или в силу невозможности для телепата его рейтинга занять место в штатном расписании Корпуса ᴪ.<br>В) Ассоциированному члену Корпуса ᴪ лишенному лицензии, запрещено применять метасенсорные способности, с коммерческими или личными целями, против граждан ЗА.<br>3-6-2. Пожизненным ограничением свободы – содержанием под надзором в Центре Реабилитации, запретом посещения общественных мест.<br>3-6-3.         Регулярным приёмом медицинских препаратов, подавляющих метасенсорные способности человека.<br>3-6-4.         Телепат не пожелавший вступить в Корпус ᴪ для обучения, имеет право выбрать только варианты из пп. 3-6-2 или 3-6-3 данного параграфа Устава.<br>Часть IV. Обязанности телепатов, ограничения для телепатов<br>Общие положения<br>Принимая во внимание факт, что метасенсорные способности были обнаружены в человеке сравнительно недавно и их воздействие на личность человека пока не до конца изучена, такие способности законодательно определяются как специфическое отклонение организма. Учитывая это отклонение, устав определяет некоторые отличия прав и свобод телепата от прав и свобод граждан ЗА не обладающих метасенсорными способностями.<br>Обязанности перед Корпусом ᴪ<br>4-1. Субординация.<br>Телепат обязан подчиняться представителю центра или отдела Корпуса ᴪ, в котором он служит, в соответствии с ранговой системой.<br>4-2. Регламентирующие акты.<br>Телепат обязан следовать всем регламентирующим актам Корпуса ᴪ, а также того центра или отделения, к которому он принадлежит – Родительскому.<br>Общегражданские обязанности телепатов<br>4-3. Специальная служба<br>Телепаты могут быть привлечены к специальной службе, по контракту находящейся вне ведомства Корпуса ᴪ, по согласованию с руководителем родительского центра или отделения Корпуса ᴪ или с директором Корпуса ᴪ. В этом случае телепат подчиняется структуре, которая привлекла его к работе, согласно внутренней иерархии структуры.<br>4-4. Внешние отличия<br>А) Любой телепат, даже не входящий в состав Корпуса, обязан носить на людях нагрудный знак отличия, утвержденный Советом Управления.<br>Б) Каждый телепат обязан носить черные перчатки, для избежания случайного сканирования не телепатов, за исключением случаев, описанных в специальных актах родительского центра или отделения.<br>4-5. Обязанности перед органами исполнительной власти и судебной системой<br>Телепаты обязаны содействовать органам исполнительной власти, сотрудникам правоохранительных органов и подчинятся судебным предписаниям судов ЗА, если это не противоречит Уставу.<br>Ограничения, связанные с политической деятельностью и государственной службой<br>4-6. Запрет на политическую деятельность<br>Телепатам, и Корпусу в целом, как организации запрещается участвовать в деятельности политических организаций, поддерживать средствами, агитацией или применением метасенсорных способностей политические организации или отдельных политиков, влиять на результаты выборов, или плебисцитов. Данный параграф не распространяется на право телепата голосовать на выборах любого уровня во властные и муниципальные структуры ЗА, или на плебисците.<br>4-7. Военная служба.<br>Телепатам запрещено служить в Земных Вооруженных Силах, получать военные звания и занимать любые должности военной службы.<br>4-8. Выборные должности.<br>Телепатам запрещено занимать выборные государственные и муниципальные должности категории А и В, в том числе:<br>1.  Президент ЗA<br>2.  Вице-президент ЗA<br>3.  Сенатор ЗA<br>4.  Губернатор ЗA<br>Также телепатам запрещено занимать должности полномочных представителей и заместителей, перечисленных выше должностей.<br>4-9. Государственная служба<br>Телепатам запрещается занимать государственные должности, в любых службах, министерствах, агентствах и ведомствах EA. Телепаты могут работать в указанных учреждениях по контракту, не занимая государственной должности.<br>Запрет незаконного метасенсорного воздействия<br>4-10. Запрет метасенсорных воздействий на граждан, не обладающих метасенсорными способностями<br>Телепату запрещено любое метасенсорное воздействие на граждан ЗА без их добровольного согласия на такое воздействие.<br>Исключение составляют следующие случаи:<br>4-10-1. метасенсорное воздействие возможно, по решению суда для проведения психологической экспертизы осужденного преступника, или для подготовки осужденного к стиранию личности.<br>4-10-2. по требованию представителей Вооружённых Сил Земли, Службы безопасности, специальных служб ЗА, сканирование может проводится только в отношении сотрудников указанных служб, если такое сканирование предусмотрено Уставом службы, и только в случае, если против сотрудника имеются обоснованные (подкрепленные доказательствами) подозрения в нелояльности.<br>4-10-3. В отношении членов террористических организаций, экстремистов, преступников чьи преступления могут нанести большой общественный вред, может применяться сканирование как часть следственных мероприятий, по решению суда, в случае наличия неоспоримых доказательств общественной опасности задержанного.<br>4-11. Данные, полученные телепатом в результате сканирования личности не могут служить доказательством в суде, но могут быть приняты во внимание для проведения оперативно розыскных мероприятий, и получения допустимых и относимых доказательств преступления.<br> <br>Часть V. Привилегии телепатов<br>Предоставление защиты<br>5-1. Юридическая изолированность.<br>а. Телепаты обязуются подчиняться уголовному, административному, семейному и иным кодексам ЗА наравне с иными гражданами.<br>б. Все телепаты, являются сотрудниками Управления - Корпуса, и в связи с этим на них не распространяются положения пенитенциарные частей статей КоАП, УК и иных кодексов ЗА.<br>в. В случае нарушения телепатом законодательства ЗА, суд над ним производится трибуналом Управления, сформированным Советом Управления. Суд производится в соответствии с УПК ЗА, однако наказание назначается в соответствии с внутренними регламентами Управления, а службой исполнения наказаний являются реабилитационные центры Корпуса. Трибунал формируется исключительно из телепатов, рейтингом не менее П-8, включая адвоката или защитника. Процессы трибунала – закрытые, пресса и посетители не допускаются из соображений безопасности.<br>5-2. Физическая неприкосновенность.<br>а. Телепаты воспринимаются многими не-телепатами как угроза, поэтому любое противоправное действие, совершенное не-телепатом в отношении телепата, является отягчающим обстоятельством при рассмотрении вопроса о тяжести преступления.<br>б. Любой телепат имеет право запросить у исполнительных структур ЗА сопровождения из числа полицейских или службы безопасности, и такое сопровождения обязано быть предоставлено."');

select data.set_attribute_value(data.get_object_id('library_document23'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document23'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document23'), data.get_attribute_id('name'), null, jsonb '"Взаимоотношения между военнослужащими"');
select data.set_attribute_value(data.get_object_id('library_document23'), data.get_attribute_id('document_title'), null, jsonb '"Взаимоотношения между военнослужащими"');
select data.set_attribute_value(data.get_object_id('library_document23'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document23'), data.get_attribute_id('content'), null, jsonb '"П. 33<br>Единоначалие является одним из основных принципов строительства ВС, руководства ими и взаимоотношений между военнослужащими. <br>Единоначалие заключается в наделении командира (начальника) всей полнотой распорядительной власти по отношению к подчиненным и возложении на него персональной ответственности перед государством за все стороны жизни и деятельности воинской части, подразделения и каждого военнослужащего. <br>П. 34 <br>По своему служебному положению и воинскому званию одни военнослужащие по отношению к другим могут быть начальниками или подчиненными. <br>Начальник имеет право отдавать подчиненному приказы и требовать их исполнения. <br>Начальник должен быть для подчиненного примером тактичности, выдержанности и не должен допускать фамильярности и предвзятости по отношению к нему. <br>За действия, унижающие честь и достоинство подчиненного, начальник несет ответственность.<br>Подчиненный обязан беспрекословно выполнять приказы начальника.<br>Лица гражданского персонала Вооруженных Сил, замещающие воинские должности, являются начальниками для подчиненных в соответствии с замещаемой штатной должностью.<br>П. 35 <br>Начальники, которым военнослужащие подчинены по службе, хотя бы и временно, являются прямыми начальниками. <br>Ближайший к подчиненному прямой начальник называется непосредственным начальником.<br>П. 37 <br>Военнослужащие, которые по своему служебному положению и воинскому званию (статьи 35 и 36 настоящего Устава) не являются по отношению к другим военнослужащим их начальниками или подчиненными, могут быть старшими или младшими. Старшинство определяется воинскими званиями военнослужащих.<br>П. 38 <br>При совместном исполнении обязанностей военнослужащими, не подчиненными друг другу, а также принадлежащих к разным родам войск, когда их служебные взаимоотношения не определены командиром (начальником), старший из них по воинской должности, а при равных должностях старший по воинскому званию является начальником.<br>П. 39 <br>Приказ - распоряжение командира (начальника), обращенное к подчиненным и требующее обязательного выполнения определенных действий, соблюдения тех или иных правил или устанавливающее какой-либо порядок, положение. <br>Приказ может быть отдан в письменном виде, устно или по техническим средствам связи одному или группе военнослужащих.<br>Устные приказы имеют право отдавать подчиненным все командиры (начальники). Обсуждение (критика) приказа недопустимо, а неисполнение приказа командира (начальника), отданного в установленном порядке, является преступлением против военной службы.<br>П. 41<br>Приказ (приказание) должен соответствовать законам Альянса, общевоинским уставам и приказам вышестоящих командиров (начальников). <br>Отдавая приказ (приказание), командир (начальник) не должен допускать злоупотребления должностными полномочиями или их превышения. <br>Командирам (начальникам) запрещается отдавать приказы (приказания), не имеющие отношения к исполнению обязанностей военной службы или направленные на нарушение законодательства Альянса. <br>Командиры (начальники), отдавшие такие приказы (приказания), привлекаются к ответственности в соответствии с законодательством Альянса. Приказ формулируется ясно, кратко и четко без употребления формулировок, допускающих различные толкования.<br>П. 43 <br>Приказ командира (начальника) должен быть выполнен беспрекословно, точно и в срок. <br>Военнослужащий, получив приказ, отвечает: «Есть» - и затем выполняет его. <br>Выполнив приказ, военнослужащий, несогласный с приказом, может его обжаловать… О выполнении полученного приказа военнослужащий обязан доложить начальнику, отдавшему приказ, и своему непосредственному начальнику. <br>Подчиненный, не выполнивший приказ командира (начальника), отданный в установленном порядке, привлекается к уголовной ответственности по основаниям, предусмотренным законодательством Альянса.<br>П. 44 <br>Командир (начальник) несет ответственность за отданный приказ (приказание) и его последствия, за соответствие содержания приказа (приказания) требованиям статьи 41 настоящего Устава и за непринятие мер по обеспечению его выполнения. <br>Отменить приказ (приказание) имеет право только командир (начальник), его отдавший, либо вышестоящий прямой начальник.<br>П. 67<br>Военнослужащие должны постоянно служить примером высокой культуры, скромности и выдержанности, свято блюсти воинскую честь, защищать свое достоинство и уважать достоинство других. <br>Они должны помнить, что по их поведению судят не только о них, но и о ВС в целом. <br>Взаимоотношения между военнослужащими строятся на основе взаимного уважения. <br>По вопросам военной службы они должны обращаться друг к другу на «Вы». <br>Начальники и старшие, обращаясь по вопросам службы к подчиненным и младшим, называют их по воинскому званию и фамилии, только по воинскому званию или только по фамилии, добавляя в последнем случае перед фамилией слово «мистер». Например: «Рядовой Шепард», «Мистер Иванов», «Сержант Шеридан», «Старшина».<br><br>Подчиненные и младшие, обращаясь по вопросам службы к начальникам и старшим, называют их по воинскому званию, добавляя после воинского звания слово «сэр» или «мэм». Например: «Лейтенант, сэр», «Командор, мэм», «Контр-адмирал, сэр».<br>Вне строя офицеры могут обращаться друг к другу не только по воинскому званию, но и по имени и фамилии, добавляя слово «мистер». <br>В повседневной жизни офицерам разрешается применять утвердительное выражение «слово офицера» и при прощании друг с другом допускается вместо слов «до свидания» говорить «честь имею».<br>Искажение воинских званий, употребление нецензурных слов, кличек и прозвищ, грубость и фамильярное обращение несовместимы с понятием воинской чести и достоинством военнослужащего.<br>П. 69 <br>При обращении к другому военнослужащему в присутствии командира (начальника) или старшего у него необходимо спросить на это разрешение. Например: «Полковник, сэр. Разрешите обратиться к капитану Ивановой». Когда на вопрос начальника или старшего надо дать утвердительный ответ, военнослужащий отвечает: «Так точно», а когда отрицательный - «Никак нет».<br>П. 71<br>Военнослужащим запрещается держать руки в карманах одежды, сидеть или курить в присутствии начальника (старшего) без его разрешения, а также курить на улицах на ходу и в местах, не отведенных для курения.<br>П. 72 <br>Трезвый образ жизни должен быть повседневной нормой поведения всех военнослужащих. Появление на улицах, в скверах, парках, транспортных средствах общего пользования, других общественных местах в состоянии алкогольного или иного опьянения является дисциплинарным проступком, позорящим честь и достоинство военнослужащего.<br>П. 73 <br>Для военнослужащих устанавливаются военная форма одежды и знаки различия. Право ношения военной формы одежды имеют все военнослужащие, а также граждане, уволенные с военной службы с правом ношения военной формы одежды. <br>Военная форма одежды носится строго в соответствии с правилами ношения военной формы одежды и знаков различия, определенными Комитетом Обороны Сената Земного Альянса. Военнослужащие вправе не носить военную форму одежды во время, свободное от исполнения обязанностей военной службы, - вне расположения воинской части при увольнении или в отпуске.<br>П. 74 <br>Правила воинской вежливости и поведения обязательны также для граждан, уволенных с военной службы, при ношении ими военной формы одежды."');

select data.set_attribute_value(data.get_object_id('library_document24'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document24'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document24'), data.get_attribute_id('name'), null, jsonb '"Указ Президента Земного Альянса"');
select data.set_attribute_value(data.get_object_id('library_document24'), data.get_attribute_id('document_title'), null, jsonb '"Указ Президента Земного Альянса"');
select data.set_attribute_value(data.get_object_id('library_document24'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document24'), data.get_attribute_id('content'), null, jsonb '"В связи с проведением Четвертого колониального Конгресса, пользуясь правом, предоставленным Президенту Земного Альянса статьей 27 Конституции, приказываю:<br>1. Предоставить всем участникам Конгресса юридический иммунитет, на время проведения Конгресса.<br>2. Делегатов конгресса запрещено преследовать за преступления, расследование по которым было открыто до начала Конгресса. Такие следственные действия временно приостанавливаются.<br>3. В отсутствии прямых улик совершения преступления делегатом Конгресса, его запрещается подвергать телепатическому сканированию, аресту или форсированному допросу.<br>4. Решение о достаточности улик принимает военный губернатор директории Эпсилон. Предъявление обвинений и непосредственное руководство следствием осуществляет шеф СБ станции Вавилон-5. К участию в работе следственной группы могут привлекаться представители Пси-Корпуса ЗА или специальных Служб ЗА.<br>5. На время проведения следствия делегат не может быть лишен возможности участия в Конгрессе, обсуждении вопросов и голосовании.<br>Президент Земного Альянса Мари Кейн<br>15 декабря 2258 года<br>Женева. Земля. Земной Альянс."');

select data.set_attribute_value(data.get_object_id('library_document25'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document25'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document25'), data.get_attribute_id('name'), null, jsonb '"Должностные лица Земного Альянса"');
select data.set_attribute_value(data.get_object_id('library_document25'), data.get_attribute_id('document_title'), null, jsonb '"Должностные лица Земного Альянса"');
select data.set_attribute_value(data.get_object_id('library_document25'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document25'), data.get_attribute_id('content'), null, jsonb '"Президент ЗА - Мэри Кейн<br>Вице-президент ЗА - Синклер Нейман<br><br>Сенаторы в порядке старшинства:<br><br>Акио Хитоши - председатель комитета по здравоохранению, лидер фракции корпорантов<br>Луис Сантьяго - председатель комитета по метасенсорике, лидер фракции  либерало<br>Игорь Семенофф - председатель комитета по Контакту <br>Джон Морган - председатель КРЭФ <br>Владимир Емельяненко - председатель комитета глобальной аналитики, лидер фракции неоглобалистов<br>Синклер Нейман (Вице-президент ЗА) - председатель Комитета обороны<br><br>Состав ОКНШ (Объединенного комитета начальников штабов)<br>1. ИО Командующего ЗФ - Вице-Адмирал Герман Паулюс <br>2. Командующий НС - Генерал Эрнст Роммель <br>3. Командующий ШОС (Штаб объединенной разведки) Эрих Кальтербуннер <br>4. Командующий научной частью и отделом биооружия Доктор Йозеф Менгеле полковник НС<br>5. Командующий инженерными войсками и тыловой службой генерал Модест Камноедов<br>Военные Губернаторы и командующие флотами:<br>военный губернатор Проксимы - Ли Вонг, командующий 3, 4 ударным флотом оборонительным флотом Берлин<br>Военный губернатор Вегоса - Мигель Гонсалес -командующий 6 ударным флотом<br>Военный губернатор марса, и спутников Юпитера - Вакантно, <br>Военный губернатор Эпсилон - Джон Шерридан  командующий 11 экспедиционным флотом и оборонным флотом Эпсилон<br>командующий 5 марсианским ударным флотом Джордан Квин<br>командующий 1 лунным и 2 ударным флотом Кертис Александер"');

select data.set_attribute_value(data.get_object_id('library_document26'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document26'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document26'), data.get_attribute_id('name'), null, jsonb '"Приказ вице-адмирала Паулюса"');
select data.set_attribute_value(data.get_object_id('library_document26'), data.get_attribute_id('document_title'), null, jsonb '"Приказ вице-адмирала Паулюса"');
select data.set_attribute_value(data.get_object_id('library_document26'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document26'), data.get_attribute_id('content'), null, jsonb '"ОКНШ, Штаб Командующего Звездного Флота Земного Альянса<br><br>ПРИКАЗ<br>В связи с тяжелым заболеванием генерала Ричарда Франклина, приказываю:<br>1. Восстановить в воинском звании Генерал-Лейтенанта НС ЗА гражданина Джордана Квина.<br>2. Назначить генерала Джордана Квина командующим марсианской ударной флотской группировкой.<br>3. Приказываю Джордану Квину привести вверенные ему войска в состоянии повышенной боевой готовности.<br><br>В связи с обострением международной обстанвки, приказываю:<br><br>1. Капитану Джону Шерридану принять оперативное командование ударным экспедиционным 11-м флотом, в составе разрушителя \"Агарес\" и тяжелого крейсера Геракл, базирующихся на Свободу 21.<br>2. Непосредственное командование группировкой поручается капитану Геракла командеру Александру Миллеру.<br>3. Приказываю Джону Шерридану привести вверенные ему войска в состоянии повышенной боевой готовности.<br><br>ИО Командующего ЗФ ЗА Вице-Адмирал Герман Паулюс<br>29 декабря 2258 года, борт корабля Ификл, лунная орбита, Земной Альянс."');

select data.set_attribute_value(data.get_object_id('library_document27'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document27'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document27'), data.get_attribute_id('name'), null, jsonb '"Приказ военного губернатора директории Эпсилон"');
select data.set_attribute_value(data.get_object_id('library_document27'), data.get_attribute_id('document_title'), null, jsonb '"Приказ военного губернатора директории Эпсилон"');
select data.set_attribute_value(data.get_object_id('library_document27'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document27'), data.get_attribute_id('content'), null, jsonb '"Приказ военного Губернатора директории Эпсилон<br>капитана Джона Шерридана<br><br>Во исполнение Указа президента от 01 декабря 2258 года №УП-213<br>назначить исполняющим обязанности военного губернатора, для целей участия в конгрессе делегации директории Эпсилон командера Николая Сибирского.<br>В целях представительства интересов Корпорации IPX, по просьбе руководства корпорации, разрешить лейтенанту Мишель Ван Дорф, в свободное от службы время, представлять директорию Эпсилон на Конгрессе.<br>Принять верительные грамоты от Чарли Батт, представителя корпорации «Синайская Хризантема», и включить ее в состав делегации.<br><br>Джон Шерридан Военный губернатор директории Эпсилон<br>28 декабря 2258 года. Станция Вавилон-5. Планета Эпсилон-3. Система Эпсилон. Земной Альянс."');

select data.set_attribute_value(data.get_object_id('library_document28'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document28'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document28'), data.get_attribute_id('name'), null, jsonb '"Приказ о розыске Т. Лизбен"');
select data.set_attribute_value(data.get_object_id('library_document28'), data.get_attribute_id('document_title'), null, jsonb '"Приказ о розыске Т. Лизбен"');
select data.set_attribute_value(data.get_object_id('library_document28'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document28'), data.get_attribute_id('content'), null, jsonb '"Приказ командующего ШОС<br>Эриха Кальтербруннера<br>Объявить в розыск на всей территории ЗА д.м. Терезу Лизбен за участие в диверсионной деятельности. Преступник может быть вооружен и очень опасен. В случае неподчинения при задержании разрешено использовать оружие.<br>Укрывательство преступника приравнивается к соучастию в преступлении.<br>29 декабря 2258 года. Женева. Земля. Земной Альянс."');

select data.set_attribute_value(data.get_object_id('library_document29'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document29'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document29'), data.get_attribute_id('name'), null, jsonb '"Кодекс Ассамблеи"');
select data.set_attribute_value(data.get_object_id('library_document29'), data.get_attribute_id('document_title'), null, jsonb '"Кодекс Ассамблеи"');
select data.set_attribute_value(data.get_object_id('library_document29'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_assembly"');
select data.set_attribute_value(data.get_object_id('library_document29'), data.get_attribute_id('content'), null, jsonb '"Преамбула<br>Мы, галактические разумные расы, представители разных цивилизаций, и сообществ, преисполненные решимости избавить грядущие поколения от бедствий войны, и вновь утвердить веру в основные права разумных существ, в равенство прав больших и малых цивилизаций, и чтобы создать условия, при которых могут соблюдаться справедливость и уважение к обязательствам, вытекающим из договоров и других источников галактического права, и содействовать социальному прогрессу и улучшению условий жизни отстающих цивилизаций при большей свободе, и в этих целях проявлять терпимость и жить вместе, в мире друг с другом как добрые соседи, и объединить наши силы для поддержания галактического мира и безопасности, и обеспечить принятием принципов и установлением методов, чтобы вооруженные силы применялись не иначе, как в общих интересах, и использовать галактические контакты для содействия экономическому и социальному прогрессу всех цивилизаций, решили объединить наши усилия для достижения этих целей.<br>Согласно этому наши соответствующие правительства, а именно: Империя Ворлон, в лице посла Коша и посла Коша, правительства Земного Альянса, в лице Президента Луиса Сантьяго, Правительство Минбари, в лице народа Минбари, правительство Республики Центавр, в лице Императора Турхана, правительство Режима Нарна, в лице советника первого круга, члена правящей фамилии ЭАтрана, через своих представителей, предъявивших свои полномочия, найденные в надлежащей форме, решили построить станцию Вавилон, как место где мы можем совместно решать вопросы мира и безопасности галактики, и согласились принять настоящий Кодекс о создании Галактической Ассамблеи Цивилизаций.<br> Глава I. Цели и принципы<br>Статья 1. Цели<br>Галактическая Ассамблея создается с целью:<br>1. Поддерживать галактический мир и безопасность и с этой целью принимать эффективные коллективные меры для предотвращения и устранения угрозы миру и подавления актов агрессии или других нарушений мира и проводить мирными средствами, в согласии с принципами справедливости и галактического права, улаживание или разрешение межцивилизационных споров или ситуаций, которые могут привести к нарушению мира;<br>2. Развивать дружественные отношения между цивилизациями на основе уважения принципа равноправия и самоопределения народов, а также принимать другие соответствующие меры для укрепления всеобщего мира;<br>3. Осуществлять межцивилизационное сотрудничество в разрешении галактических проблем экономического, социального, культурного и гуманитарного характера и в поощрении и развитии уважения к правам разумного существа и основным свободам для всех, без различия вида, пола, языка и религии.<br>4. Быть центром для согласования действий цивилизаций в достижении этих общих целей.<br>Статья 2. Принципы<br>Для достижения Целей, указанных в статье 1, Ассамблея и ее Члены действуют в соответствии со следующими Принципами:<br>1. Ассамблея основана на принципе суверенного равенства всех ее Членов - все Члены Галактической Ассамблеи Цивилизаций добросовестно выполняют принятые на себя по настоящему Кодексу обязательства, чтобы обеспечить им всем в совокупности права и преимущества, вытекающие из принадлежности к составу Членов Ассамблеи<br>2. Все Члены Галактической Ассамблеи Цивилизаций разрешают свои межцивилизационные споры мирными средствами таким образом, чтобы не подвергать угрозе галактический мир и безопасность и справедливость;<br>3. Все Члены Галактической Ассамблеи Цивилизаций воздерживаются в их международных отношениях от угрозы силой или ее применения как против территориальной неприкосновенности или политической независимости любого государства, так и каким-либо другим образом, несовместимым с Целями Ассамблеи;<br>4. Все Члены Галактической Ассамблеи Цивилизаций оказывают ей всемерную помощь во всех действиях, предпринимаемых ею в соответствии с настоящим Уставом, и воздерживаются от оказания помощи любой цивилизации, против которой Ассамблея предпринимает действия превентивного или принудительного характера;<br>5. Ассамблея обеспечивает, чтобы цивилизации, которые не являются ее Членами, действовали в соответствии с этими Принципами, поскольку это может оказаться необходимым для поддержания международного мира и безопасности;<br>6. Настоящий Кодекс ни в коей мере не дает Галактической Ассамблее Цивилизаций права на вмешательство в дела, по существу входящие во внутреннюю компетенцию любого правительства, и не требует от Членов Галактической Ассамблеи Цивилизаций представлять такие дела на разрешение в порядке настоящего Кодекса; однако этот принцип не затрагивает применения принудительных мер на основании Главы VII.<br>Глава II Правоспособность и полномочия<br>Статья 3. Правоспособность Ассамблеи<br>Галактическая Ассамблея Цивилизаций, и ее органы пользуется на территории каждого из своих Членов такой правоспособностью, которая может оказаться необходимой для выполнения ее функций и достижения ее целей, придерживаясь при этом нейтралитета в вопросах, касающихся внутренних дел Члена Ассамблеи.<br>Глава III Члены Ассамблеи<br>Статья 4. Первоначальные члены Ассамблеи<br>Первоначальными Членами Галактической Ассамблеи Цивилизаций являются цивилизации, правительства которых, приняв участие в конференции на станции Вавилон-5, в секторе Эпсилон по созыву Ассамблеи подписали и ратифицировали настоящий Кодекс: Федерация Минбари, Республика Центавр, Земной Альянс, Режим Нарна, Империя Ворлон<br>Первоначальные члены Ассамблеи составляют Консультативный Совет Ассамблеи<br>Статья 5. Прием в членство Ассамблеи<br>Прием в Члены Ассамблеи открыт для всех других миролюбивых цивилизаций, которые примут на себя содержащиеся в настоящем Кодексе обязательства и которые, по суждению Ассамблеи, могут и желают эти обязательства выполнять<br>Прием любой такой цивилизации в Члены Ассамблеи производится постановлением Ассамблеи, или Консультативного Совета Ассамблеи, которое должно быть ратифицировано на ближайшей сессии Ассамблеи.<br>Членство начинается с момента принятия постановления Ассамблеи, или решения Консультативного Совета. <br>Единственным препятствием для получения цивилизацией членства Ассамблеи является ведение цивилизацией агрессивной войны, или ее военный конфликт с действительным членом ассамблеи.<br>Статья 6. Приостановление членства<br>Если против какого-либо Члена Ассамблея были предприняты Консультативным Советом действия превентивного или принудительного характера, Консультативный Совет имеет право, приостанавливать осуществление прав и привилегий, принадлежащих Члену Ассамблеи. Член Ассамблеи тем не менее остается в Ассамблее в статусе наблюдателя. Осуществление прав и привилегий может быть восстановлено Генеральной Ассамблеей, или Консультативным Советом.<br>Статья 7. Лишение членства<br>Член Ассамблеи, систематически нарушающий принципы, содержащиеся в <br>настоящем Кодексе, может быть лишен членства Генеральной Ассамблеей по рекомендации Консультативного Совета.<br>Если Генеральная Ассамблея не ратифицирует решение Консультативного Совета о принятии нового члена Ассамблеи, автоматически прекращает членство в ассамблее<br>Статья 8.  Статус Наблюдателя<br>Цивилизации, подавшие заявку в Секретариат Генеральной Ассамблеи, на членство в Ассамблее, имеют статус цивилизации наблюдателя, и обладают совещательным голосом на сессиях Ассамблеи, и правом выносить вопросы на рассмотрение Генеральной Ассамблеи и Консультативного Совета<br>По желанию цивилизации, подавшей заявку на членство в Ассамблее, статус наблюдателя сохраняется за ней до тех пор, пока цивилизация не решит принять на себя обязательства, цели и принципы, декларируемые настоящим Кодексом, и полномочные представители правительства цивилизации не ратифицируют Кодекс Ассамблеи.<br>Статья 9.  Иммунитеты и привилегии Членов Ассамблеи<br>Галактическая Ассамблея Цивилизаций, ее должностные лица и органы пользуется на территории каждого из своих Членов такими привилегиями и иммунитетами, которые необходимы для достижения ее целей.<br>1. Послы Членов Генеральной Ассамблеи, и аккредитованные сотрудники посольств, включая консулов, советников, атташе, но не включая технический персонал, обладают полным дипломатическим иммунитетом, на территории всех цивилизаций Членов Ассамблеи.<br>2. Представители Членов Ассамблеи и ее должностные лица также пользуются привилегиями и иммунитетами, которые необходимы для самостоятельного выполнения ими своих функций, связанных с деятельностью Ассамблеи и обладают полным дипломатическим иммунитетом, на территории цивилизаций Членов Ассамблеи.<br>3. Генеральная Ассамблея и Консультативный Совет может делать рекомендации для определения деталей применения пунктов 1 и 2 настоящей статьи, а также может предлагать Членам Ассамблеи конвенции для этой цели.<br> Глава IV Органы Галактической Ассамблеи Цивилизаций<br>Статья 8 Главные органы ассамблеи<br>В качестве главных органов Галактической Ассамблеи Цивилизаций учреждаются: <br>Консультативный Совет, Генеральная Ассамблея, комитеты Генеральной Ассамблеи и Секретариат Генеральной Ассамблеи.<br>Статья 9 Должностные лица Ассамблеи<br>Среди должностных лиц Ассамблеи, выделяются следующие лица:<br>1. Член Консультативного совета – посол цивилизации первоначального члена Ассамблеи, имеющего право голосовать на заседаниях Консультативного Совета, по вопросам, входящим в исключительную компетенцию Консультативного Совета. Является членом делегации от своего правительства на Генеральной Ассамблее, и может голосовать на заседаниях Генеральной Ассамблеи.<br>2. Секретарь Генеральной Ассамблеи – должностное лицо, возглавляющее Секретариат Генеральной Ассамблеи, для управления организационной работой сессии Генеральной Ассамблеи,<br>….<br>2.2. Имеет право совещательного голоса в Консультативном Совете и право присутствия на заседаниях Консультативного Совета<br>2.3. Представляет интересы Ассамблеи, ее Членов, и цивилизаций, не являющихся Членами Ассамблеи, но обратившихся к Ассамблее с просьбами или предложениями в Консультативном Совете и на заседаниях Генеральной Ассамблеи.<br>2.4. С помощью аппарата Секретариата Генеральной Ассамблеи организует своевременно оповещение Членов Ассамблеи по вопросам назначения заседаний Генеральной Ассамблеи, повестки дня заседания Ассамблеи проектов решений Ассамблеи и поправок к ним.<br>2.5. Секретарь Генеральной Ассамблеи не может быть членом Консультативного Совета, или членом любого из комитетов Генеральной Ассамблеи, не имеет статуса посла и не голосует на сессии Генеральной Ассамблеи.<br>2.6. Секретарь Генеральной ассамблеи - лицо ведущее текущее заседание Генеральной Ассамблеи, во время Сессии Ассамблеи.<br>2.7. Секретарь Генеральной ассамблеи может быть отрешен от должности либо тайным рейтинговым голосованием Генеральной Ассамблеи, либо голосованием членов Консультативного Совета, в случае если выяснятся обстоятельства, препятствующие ему занимать указанную должность. Секретарь Генеральной Ассамблеи может подать в отставку.<br>3. Председатель комитета Ассамблеи – … Представляет проекты, поправки к проектам решений Ассамблеи, и инициативы комитета в Генеральный Ассамблее и Консультативном Совете.<br>...<br>3.3. Члены Консультативного Совета не могут занимать должность Председателя комитета Ассамблеи.<br>4. Наблюдатели Ассамблеи. Наблюдатели являются прямыми сотрудниками комитета Опеки и обладают полным дипломатическим иммунитетом и неприкосновенностью. Наблюдатели назначаются Консультативным Советом, и могут быть посланы в любые территории подконтрольные Членам Ассамблеи, или находящиеся под Опекой и должны быть допущены туда для осуществления своих полномочий, без причинения им препятствий со стороны Членов Ассамблеи, или любых иных субъектов.<br>5. Исполнительный руководитель Ассамблеи. Исполнительные руководители назначаются КС по согласованию с Секретарем Ассамблеи. Все исполнительные руководители Ассамблеи являются сотрудниками секретариата ассамблеи и подчинятся непосредственно решениям КС или главы соответствующего комитета Ассамблеи. На исполнительных руководителей распространяются те же ограничения и правила, и они имеют те же права и обязанности, которые действуют/есть в отношении Секретаря Генеральной Ассамблеи.<br>5.1. Командир миротворческого флота является Исполнительным руководителем ассамблеи. Общее руководство флотом осуществляется миротворческим Комитетом.<br>Глава V Генеральная Ассамблея<br>….<br>Глава VI Консультативный Совет<br>Статья 21. Состав Консультативного Совета<br>Консультативный Совет состоит из послов цивилизаций - первоначальных членов Ассамблеи, Империи Ворлон, Земного Альянса, Федерации Минбари, Республики Центавр и Режима Нарна.<br>1. Каждая цивилизация - член Консультативного Совета имеет в нем одного представителя, одновременно являющегося представителем цивилизации в президиуме Генеральной Ассамблее.<br>2. Председательствует на заседаниях Консультативного Совета посол Земного Альянса.<br>Статья 22. Новые члены Консультативного Совета<br>Вступление нового члена в Консультативный Совет должно быть одобрено всеми членами Консультативного Совета единогласно.<br>1. Вступить в Консультативный Совет может только цивилизация - Член Ассамблеи<br>2. Заявка о вступлении цивилизации в Консультативный Совет подается в Секретариат Ассамблеи<br>Статья 23. Функции и Полномочия Консультативного Совета<br>Для обеспечения быстрых и эффективных действий Галактической Ассамблеи Цивилизаций ее Члены возлагают на Консультативный Совет главную ответственность за поддержание международного мира и безопасности и соглашаются в том, что при исполнении его обязанностей, вытекающих из этой ответственности, Консультативный Совет действует от их имени.<br>1. Члены Ассамблеи соглашаются, в соответствии с настоящим Кодексом, подчиняться решениям Консультативного Совета и выполнять их.<br>2. При исполнении этих обязанностей Консультативный Совет действует в соответствии с Целями и Принципами Ассамблеи. Определенные полномочия, предоставленные Консультативному Совету для выполнения этих обязанностей, изложены в настоящем Кодексе.<br>3. Консультативный Совет может предпринять действия превентивного или ограничительного характера (санкции) к цивилизациям Членам Ассамблеи или к цивилизациям не вошедшим в Ассамблею, без согласования с Генеральной Ассамблеей, если спешный характер дела этого требует.<br>4. Консультативный Совет представляет на рассмотрение Генеральной Ассамблеи ежегодные доклады и, по мере надобности, специальные доклады.<br>...<br>Статья 26. Голосование Консультативного совета<br>1. Каждый член Консультативного Совета имеет один голос. Все решения принимаются прямым открытым голосованием. Решения Консультативного Совета считаются принятыми, если за них проголосовало большинство членов Консультативного Совета. Членам Консультативного Совета запрещено воздерживаться при голосовании.<br>2. Член Совета, в знак протеста против поднятых вопросов может покинуть конкретное заседание Совета. Возврат посла, в таком случае, в течении того же заседания недопустим.<br>3. Послы цивилизаций, членов Ассамблеи, не входящие в Консультативный Совет,  имеют один голос на всех послов, который они могут подать ЗА или Против решения Консультативного совета. Направленность голоса определяется договоренностью или внутренним голосованием между послами.<br>4. Работники секретариата, секретарь и исполнительные руководители Генеральной Ассамблеи имеют один голос на всех сотрудников,, который они могут подать ЗА или Против решения Консультативного совета. Направленность голоса определяется договоренностью или внутренним голосованием между сотрудниками.<br>Статья 27. Процедура<br>Консультативный Совет организуется таким образом, чтобы он мог функционировать непрерывно. Для этой цели каждый член Консультативного Совета должен быть всегда представлен в месте пребывания Ассамблеи, на станции Вавилон 5<br>1. Консультативный Совет собирается на периодические заседания, на которых каждый из его членов может, по своему желанию, быть представлен или членом правительства, или каким-либо другим особо назначенным представителем<br>2. Заседания Консультативного Совета могут происходить не только в месте пребывания Ассамблеи, но и во всяком другом месте, которое, по мнению Совета, более способствует его работе.<br>Статья 28. вспомогательные органы, правила и процедуры<br>1. Консультативный Совет может учреждать такие вспомогательные органы, какие  он найдет необходимыми для выполнения своих функций.<br>2. Консультативный Совет устанавливает свои правила и процедуры.<br>Статья 29. Открытость заседаний Консультативного совета<br>1. Заседания Консультативного Совета – открытые. Любой Член Ассамблеи, который не является членом Консультативного Совета, может принять участие, имеет право отправить своего посла для обсуждения любого вопроса, внесенного в Консультативный Совет, во всех тех случаях, когда Консультативный Совет находит, что интересы этого Члена Ассамблеи специально затронуты. Могут присутствовать представители прессы.<br>2. На заседаниях Консультативного совета имеют право присутствовать председатели Комитетов Генеральной Ассамблеи.<br>Статья 30. Участие в заседаниях Совета цивилизаций, не являющихся Членами Ассамблеи<br>Любой Член Ассамблеи, который не состоит членом Консультативного Совета, <br>или любая цивилизация, не состоящая Членом Ассамблеи, если они являются <br>сторонами в споре, рассматриваемом Консультативным Советом, приглашаются принять участие, в обсуждении, относящемся к этому спору. Консультативный Совет ставит такие условия для участия государства, не состоящего Членом <br>Ассамблеи, какие он найдет справедливыми.<br>Глава VII Секретариат Генеральной Ассамблеи<br>Статья 31. Состав Секретариата<br>Секретариат состоит из Секретаря Генеральной Ассамблеи и такого персонала, который <br>...<br>Статья 32. Независимость Секретаря Генеральной Ассамблеи и сотрудников секретариата<br>При исполнении своих обязанностей Секретарь и персонал Секретариата не должны запрашивать или получать указания от какого бы то ни было правительства или власти, посторонней для Ассамблеи. Они должны воздерживаться от любых действий, которые могли бы отразиться на их положении как международных должностных лиц, ответственных только перед Ассамблеей.<br>1.      Секретарем Генеральной Ассамблеи может быть избран любой достойный доверия гражданин цивилизации Члена Ассамблеи.<br>2.      Кандидатуру на должность Секретаря Генеральной Ассамблеи могут вносить любые члены Ассамблеи, или межцивилизационные организации, признанные или созданные Ассамблеей.<br>3.      Если лицо, избранное Секретарем Ассамблеи, было Послом Члена Ассамблеи, статус посла снимается с Секретаря Генеральной Ассамблеи, и он не голосует на заседании Генеральной Ассамблеи, а цивилизация может назначить нового Посла.<br>4.      Секретарь Генеральной ассамблеи не может быть должностным лицом любых других органов или структур цивилизаций членов Ассамлеи.<br>5. Каждый Член Ассамблеи обязуется уважать строго межцивилизационный характер обязанностей Секретаря и персонала Секретариата и не пытаться оказывать на них влияние при исполнении ими своих обязанностей.<br>Секретарь Ассамблеи не может быть одновременно членом Консультативного Совета.<br>Статья 33. Персонал секретариата<br>Персонал Секретариата назначается Секретарем, согласно правилам, устанавливаемым Генеральной Ассамблеей.<br>Глава VIII Ратификация межцивилизационных соглашений<br>Статья 34. Ратификация и регистрация межцивилизационных соглашений<br>1. Всякий договор и всякое межцивилизационное соглашение, заключенные любым Членом Ассамблеи после вступления в силу настоящего Кодекса, должны быть, после прохождения ратификации в соответствующем комитете Ассамблеи, при первой возможности, зарегистрированы в Секретариате и им опубликованы.<br>2.  Ни одна из сторон в любом таком договоре или международном соглашении, не зарегистрированных в соответствии с пунктом 1 настоящей статьи, не может ссылаться на такой договор или соглашение ни в одном из органов Ассамблеи.<br>3. До ратификации договора соответствующим комитетом Ассамблеи, члены Ассамблеи не имеют по нему никаких обязательств.<br>Глава IX Комитеты Ассамблеи<br>...<br>Статья 36. Функции и полномочия комитетов<br>Основные функции и полномочия комитетов Ассамблеи:<br>1. Комитеты рассматривают межцивилизационные соглашения, в пределах своей компетенции, на соответствие их целям и принципам, изложенным в настоящем Кодексе, а также на соответствие их другим нормативным актам Галактического права. При выявленных несоответствиях комитет вносит в соглашения поправки, и предлагает их на рассмотрение сторон соглашения. Если соглашение не противоречит целям и принципам Ассамблеи, комитет ратифицирует соглашение, после чего оно вступает в законную силу.<br>Иначе, комитет имеет право наложить Вето на соглашение Цивилизаций – Членов Ассамблеи.<br>1.1. Заявка на ратификацию соглашения подается Членами Ассамблеи секретарю или председателю комитета.<br>2.  Комитеты обладают правом законодательной инициативы, и внесения на рассмотрение Генеральной Ассамблеи и Консультативного Совета решений или постановлений, по вопросам своей компетенции.<br>2.1. Проекты решений вносятся председателем комитета в Секретариат Ассамблеи<br>3. Комитеты могут выдавать рекомендации Членам Ассамблеи, по вопросам своей компетенции, которые обязательны к исполнению, как и любые рекомендации главных органов Ассамблеи.<br>3.1. Рекомендации выдаются послу Члена Ассамблеи, для которого они предназначены и регистрируются в Секретариате Ассамблеи.<br>...<br>Статья 39. Комитет по научно-техническому сотрудничеству и бюджету<br>…. рассматривает соглашения цивилизаций в сфере научно-технического сотрудничества или сфере обмена технологиями, рассматривает проекты постановлений в этой сфере и представляет их на утверждение Генеральной Ассамблеи и Консультативного Совета соответственно, с рекомендацией к принятию или отклонению.<br>3.1. Комитет устанавливает квоты на взносы членов Ассамблеи. Рассматривает вопросы недоимок взносов и выносит предложения по мерам воздействия на должников на рассмотрение Ассамблеи.<br>3.2. Комитет контролирует прибыль от рейтингового голосования, которая используется в случае непредвиденных расходов по поручению Консультативного Совета, а остаток включается в доходы Бюджета следующего цикла.<br>3.3. Комитет оплачивает всю текущую деятельность органов Ассамблеи, включая аренду помещений станции Вавилон<br>3.4. В ведении комитета находится исследование и разработка программ помощи отсталым цивилизациям в развитии их социального и технологического уровня.<br>Статья 40. Комитет по торговле<br>...<br>4. Комитет ратифицирует торговые соглашения Членов Ассамблеи и между членами Ассамблеи и неприсоединившимися цивилизациями. Комитет ведет учет уникальных ресурсов и торговых возможностей Членов Ассамблеи. За ратификацию соглашения взымается пошлина в бюджет Ассамблеи.<br>5.  Комитет реализует торговые возможности и ресурсы территорий, находящихся под опекой Ассамблеи, с пользой для населения этих Территорий.<br>Статья 41. Гуманитарный Комитет<br>1.                  Комитет состоит из трех любых избранных в комитет Членов Генеральной Ассамблеи<br>2.  Каждый член комитета имеет один голос.<br>3.  Решения комитета принимаются большинством голосов присутствующих <br>и участвующих в голосовании членов комитета.<br>4. Гуманитарный комитет занимается вопросами культурного обмена и гуманитарной помощи цивилизациям членам Ассамблеи, и сторонним цивилизациям. Выделение гуманитарной помощи осуществляется по решению Консультативного Совета или Генеральной Ассамблеи.<br>4.1. В ведении комитета находятся вопросы галактического здравоохранения. Комитет аккумулирует знания о физиологии и заболеваниях разных видов, и создает исследовательские программы для выработки эффективных методов их лечения.<br>4.2. В ведении комитета находится бюджет для оказания прямой гуманитарной помощи цивилизациям, пострадавшим от локальных или глобальных катастроф, войн, эпидемий.<br>4.3. В ведении комитета находится сохранение культурного-исторического и технологического наследия всех имеющихся цивилизаций, и использование его на благо всех имеющихся цивилизаций.<br>5. Гуманитарный комитет привлекает специалистов по здравоохранению, антропологии, социологии и прочим гуманитарным, техническим или общественным дисциплинам как экспертов к своей работе.<br>Статья 42. Комитет по опеке<br>...<br>2. Комитет по Опеке разрабатывает методику оценки относительно политического, экономического и социального прогресса населения каждой территории под опекой, а также его прогресса в области образования, а управляющая власть каждой территории под <br>опекой, входящей в компетенцию Генеральной Ассамблеи, представляет последней <br>ежегодные доклады на основе этой методики.<br>3. Каждый член комитета по Опеке имеет один голос.<br>4. Решения комитета по Опеке принимаются большинством голосов присутствующих <br>и участвующих в голосовании членов комитета.<br>5.  Заседания комитета по Опеке созываются по мере надобности в соответствии с его правилами, правом созыва пользуется председатель комитета, любой член Консультативного Совета, Секретарь Генеральной Ассамблеи, или большинство членов комитета.<br>6. Председатель комитета избирается только из числа членов комитета, не управляющих территориями под опекой.<br>7. Комитет по Опеке пользуется в соответствующих случаях помощью Бюджетного и Гуманитарного комитетов и специализированных учреждений в отношении вопросов, <br>в которых они соответственно заинтересованы.<br>Статья 42. Прим. Миротворческий Комитет<br>….<br>2. Миротворческий комитет учрежден для наблюдения за исполнением членов Ассамблеи обязательств, взятых ими по поддержанию мира и спокойствия в галактике.  <br>3. Миротворческий комитет осуществляет мониторинг отношений цивилизаций<br>4. Миротворческий комитет может выступать посредником для цивилизайий находящихся в состоянии войны, для того чтобы привести их к миру и согласию<br>5. Миротворческий Комитет осуществляет общее руководство Миротворческим Флотом Ассамблеи<br>5.1. миротворческий флот не может принимать участие в войнах цивилизаций - членов Ассамблеи на одной из сторон конфликта. <br>5.2. Миротворческий флот может быть введен в спорные территории по решению КС для создания буферной зоны между участниками конфликта. Такая территория отдается под опеку Ассамблеи, по правилам Главы X, на время примирения сторон.<br>5.3. Миротворческий флот может быть послан на помощь цивилизации члену ассамблеи, подвергшейся атаке цивилизации не являющейся членом ассамблеи, по решению КС<br> 5.4. Если цивилизация, член ассамблеи препятствует военной силой введению миротворческого флота, осуществляемому по решению Ассамблеи или Консультативного Совета, в спорные территории,  она автоматически (без решения КС) лишается статуса члена Ассамблей, всех прав и привилегий связанных с этим статусом, а также не может иметь статус наблюдателя Ассамблеи<br>Глава X Галактическая система опеки<br>Статья 43. Территории под опекой<br>Галактическая Ассамблея Цивилизаций создает под своим руководством галактическую систему опеки для управления теми территориями, которые могут быть включены в нее последующими индивидуальными соглашениями, и для наблюдения за этими территориями. Эти территории именуются далее \"территории под опекой\".<br>Статья 44. Задачи системы опеки<br>Основные задачи системы опеки, в соответствии с Целями Ассамблеи, изложенными в статье 1 настоящего Кодекса, состоят в том, чтобы:<br>1. Укреплять галактический мир и безопасность;<br>2. Осуществлять гуманитарную помощь разумным видам, пострадавшим в результате войн или катастроф, природных или социальных<br>3. Способствовать политическому, экономическому и социальному прогрессу населения территорий под опекой, его прогрессу в области образования и его прогрессивному развитию в направлении к самоуправлению или независимости, как это может оказаться подходящим для специфических условий каждой территории и ее народов и имея в виду свободно выраженное желание этих народов, и как это может быть предусмотрено условиями каждого соглашения об опеке;<br>Статья 45. Территории, на которые распространяется система опеки<br>1.  Система опеки распространяется на такие территории из нижеперечисленных<br>категорий, которые могут быть включены в нее соглашениями об опеке:<br>a) Территории, ныне находящиеся под мандатом или управлением различных цивилизации. Такой территорией признается территория проживания определённого вида разумных, находящаяся под контролем цивилизации представляющей иной вид разумных существ, отличающийся от коренного населения территории генетически и культурно.<br>b) Территории, которые могут быть отторгнуты от вражеских цивилизаций <br>в результате войн, происходивших в течении последних 50 циклов и в дальнейшем<br>c) Территории, добровольно включенные в систему опеки цивилизациями, <br>ответственными за их управление, по просьбе коренного вида, проживающего на территории, в течении последних 50 циклов<br>d) Вновь открытые любым членом Ассамблеи миры, населённые разумными существами, не достигшими в своем развитии Галактической Эры, т.е. не открывшие секрет межзвездных перелетов, такая территория автоматически переходит под опеку Ассамблеи<br>2. Вопрос о том, какие из территорий вышеперечисленных категорий должны <br>быть включены в систему опеки и на каких условиях, будет предметом решения Консультативного Совета или Генеральной Ассамблеи в период сессии.<br>Статья 46. Мандат управления<br>Мандат на управление любой территорией под опекой принадлежит Галактической Ассамблее Цивилизаций. <br>1. Мандат может быть выдан, или передан, Консультативным Советом или решением Генеральной Ассамблеи любой цивилизации Члену Ассамблеи – который в силу пространственного расположения, культурной близости, или иных причин лучше всего подходит для осуществления полномочий опеки.<br>2. В мандате на управление прописаны условия опеки для каждой территории, подлежащей включению в систему опеки, в том числе все изменения и поправки, определяются соглашениями непосредственно заинтересованных цивилизаций, включая страны-мандатарии в том случае, если территории находятся под мандатом одного из Членов Ассамблеи, и утверждаются Консультативным Советом.<br>Статья 47. Опека над Членами Ассамблеи<br>Система опеки не распространяется на страны, ставшие Членами Ассамблеи, <br>отношения между которыми должны основываться на уважении принципа суверенного <br>равенства, если только правительство такой цивилизации не попросит Консультативный Совет о введении режима опеки на своей территории. В таком случае мандат на опеку принадлежит исключительно Консультативному Совету, и не подлежит передаче другим Членам Ассамблеи<br>Статья 48. Управляющая власть<br>Соглашение об опеке в каждом случае должно включать условия, на которых <br>будет управляться территория под опекой, а также определять власть, которая <br>будет осуществлять управление территорией под опекой. Такая власть, называемая <br>далее управляющей властью, может представлять собой одну или более цивилизаций членов Ассамблеи или Галактическую Ассамблею Цивилизаций, как таковую.<br>Статья 49. Обязанности управляющей власти<br>Обязанностью управляющей власти является обеспечение того, чтобы территория под опекой играла свою роль в поддержании международного мира и безопасности. С этой целью управляющая власть уполномочивается использовать добровольные вооруженные силы, средства обслуживания и помощь территории под опекой при выполнении обязательств, принятых в этом отношении управляющей властью перед Консультативным Советом, а равно и для местной обороны и поддержания закона и порядка в пределах территории под опекой.<br>Статья 50. Декларация в отношении несамоуправляющихся (подмандатных) территорий<br>Члены Галактической Ассамблеи Цивилизаций, которые несут или принимают на себя ответственность за управление территориями, народы которых не достигли еще полного самоуправления, признают тот принцип, что интересы населения этих территорий являются первостепенными, и, как священный долг, принимают обязательство максимально способствовать благополучию населения этих территорий в рамках системы международного мира и безопасности, установленной настоящим Уставом, и с этой целью:<br>а) Обеспечивать, соблюдая должное уважение к культуре указанных народов, их политический, экономический и социальный прогресс, прогресс в области образования, справедливое обращение с ними и защиту их от злоупотреблений<br>b) Развивать самоуправление, учитывать должным образом политические стремления этих народов и помогать им в прогрессивном развитии их свободных политических институтов в соответствии со специфическими обстоятельствами, присущими каждой территории и ее народам, и с их разными ступенями развития<br>c)  Укреплять международный мир и безопасность<br>d) Способствовать развитию созидательных мероприятий, поощрять исследования и сотрудничать друг с другом и, где и когда это уместно, со специализированными международными организациями ради практического достижения изложенных в настоящей статье социальных, экономических и научных целей и<br>e) Передавать регулярно Генеральному Секретарю для информации и с таким ограничением, какое может потребоваться по соображениям безопасности и конституционного порядка, статистическую и другую информацию специального характера, относящуюся к экономическим и социальным условиям, а также условиям образования на территориях, за которые они соответственно несут ответственность.<br>Члены Ассамблеи также соглашаются, что их политика в отношении территорий, на которые распространяется действие настоящей Главы, должна быть основана не менее, чем в отношении их метрополий, на общем принципе добрососедства, с надлежащим учетом интересов и благополучия остального мира в делах социальных, экономических и торговли.<br>Статья 52. Наблюдатели Ассамблеи<br>В любую подмандатную территорию Консультативным Советом или комитетом Опеки могут быть направлены наблюдатели Ассамблеи. Наблюдатели являются прямыми сотрудниками комитета Опеки и обладают полным дипломатическим иммунитетом.<br>Также наблюдатели Ассамблеи могут быть посланы в любые территории подконтрольные Членам Ассамблеи, по решению Консультативного Совета и должны быть допущены туда для осуществления своих полномочий, без причинения им препятствий со стороны Членов Ассамблеи.<br>Статья 53. Полномочия Ассамблеи и комитета по Опеке<br>Генеральная Ассамблея или Консультативный совет, и находящийся под ее руководством комитет по Опеке, при выполнении своих функций, уполномочиваются<br>1. Рассматривать отчеты, представляемые управляющей властью;<br>2. Принимать петиции от местного населения и рассматривать их, консультируясь с управляющей властью;<br>3. Устраивать периодические посещения соответствующих территорий под опекой в согласованные с управляющей властью сроки<br>4. Предпринимать упомянутые и другие действия в соответствии с условиями <br>соглашений об опеке.<br>5. Передать мандат управления иному субъекту, если управляющая власть не справляется со своими обязанностями, или нарушает принципы управления, изложенные в настоящем Кодексе.<br>Полномочия Галактической Ассамблеи Цивилизаций в отношении соглашений об опеке, включают утверждение условий соглашений об опеке и их изменений или поправок к ним, осуществляются Генеральной Ассамблеей, по рекомендациям комитета по Опеке и/или Консультативного Совета.<br>Комитет по Опеке, действующий под руководством Генеральной Ассамблеи, помогает Генеральной Ассамблее в выполнении этих функций.<br>Глава XI Вавилон 5<br>Статья 54. Миссия станции Вавилон 5<br>Миссия станции Вавилон 5, служить местом где все вопросы межцивилизационного взаимодействия решаются мирно, без применения насилия, исходя из целей, установленных настоящим Кодексом и в общих интересах всех Членов Ассамблеи.<br>Статья 55. Статус станции<br>Вавилон 5 – место дислокации основных подразделений Ассамблеи и Консультативного Совета. При этом в делах, не находящихся в ведении Ассамблеи, станция находится под полной юрисдикцией и управлением Земного Альянса.<br>В отношении Уголовного и административного права, сферы безопасности, законов о сборе налогов и пошлин, прав складирования и торговли станция Вавилон, но не пространство вокруг нее, лежит в области юрисдикции законодательства Земного Альянса<br>Статья 56. Статус пространства Эпсилон<br>Пространство Эпсилон, в котором находится Станция Вавилон 5, и прилегающие к нему, с помощью доступа через вортекс-генераторы, ближайшие сектора пространства являются нейтральной территорией, не находящейся под контролем или юрисдикцией какого-либо правительства, доступ на которую не может быть ограничен никому, желающему попасть туда.<br>Глава XII Меры превентивного и ограничительного характера<br>Статья 57. Ситуации, требующие мер превентивного или ограничительного характера<br>Меры превентивного или ограничительного характера (санкции и миротворческие операции) могут применятся в случаях:<br>1. Приготовления к Военной агрессии одной цивилизации против другой, блокады, анексии или отторжения территорий и/или ресурсов, обнаруженные органами или Членами Ассамблеи<br>2. Военная агрессия одной цивилизации против другой, уничтожение имущества, блокады, аннексии, вооруженный захват или отторжения планет, или секторов пространства и/или ресурсов<br>3. Захват нейтральных вортекс-генераторов, или нарушение статуса нейтралитета пространств, которым такой статус предоставлен настоящим галактическим правом.<br>4.  Нарушения цивилизациями принципов и норм галактического права в ущерб другим цивилизациям<br>Статья 58. Виды мер превентивного или ограничительного характера<br>1. Предупреждение, нота протеста и приостановление членства. В случае, описанном в част 1 статьи 57, или в случае если случаи описанные в части 2  и 3 статьи 57 настоящего Кодекса не нанесли серьезного ущерба, цивилизации агрессору выносится предупреждение. Членство Ассамблеи такой цивилизации может быть приостановлено. Если цивилизация агрессор не входит в Ассамблею, ей вносится нота протеста, от лица Ассамблеи, в которой перечисляются требования Ассамблеи к цивилизации Агрессору и меры, которые Ассамблея собирается предпринять в отношении цивилизации агрессора если требования ноты протеста не будут удовлетворены. Содержание предупреждения идентично содержанию ноты протеста.<br>2.  Санкции. Санкции, то есть ограничения экономического, гуманитарного или военного характера, могут быть наложены на цивилизацию агрессора, в случае серьезного ущерба в результате ее действий или неоднократности таких действий.<br>3. Миротворческое вмешательство. По решению уполномоченных органов Ассамблеи, один или несколько из Членов Ассамблеи, исключительно с их добровольного согласия, могут применить к цивилизации агрессору военную силу, дабы ограничить агрессию, и/или произвести разделение враждующих сторон, для недопущения прямого столкновения.<br>Статья 59. Полномочия Консультативного совета и Генеральной Ассамблеи при принятии мер превентивного или ограничительного характера<br>1. Меры превентивного или ограничительного характера предпринимаются Консультативным Советом в оперативном порядке.<br>2.  Миротворческое вмешательство может санкционировать только Генеральная Ассамблея, во время сессии, тайным рейтинговым голосованием. Консультативный Совет проводит по вопросу миротворческого вмешательства предварительные консультации и вносит предложение на Генеральную Ассамблею, включая цивилизационный и численный состав миротворческого контингента, его задачи, и пространственное размещение.<br>3. Цивилизация, подвергнутая мерам ограничительного и превентивного характера может обжаловать решение Консультативного Совета в Генеральную ассамблею, через Секретариат Генеральной Ассамблеи, если находит их несправедливыми.<br>Глава XIII Заключительные и переходные положения<br>Статья 60. Понятие Галактического права<br>Этой статьей вводится понятие Галактического права, состоящего из настоящего Кодекса, также комплекса решений и постановлений Генеральной Ассамблеи и ее уполномоченных органов, межправительственных соглашений, деклараций и заявлений.<br>Статья 61. Иерархия Галактического Права<br>1. Настоящий Кодекс является высшим по юридической силе документом галактического права. В том случае, когда обязательства Членов Ассамблеи по настоящему Кодексу окажутся в противоречии с их обязательствами по какому-либо другому межцивилизационному соглашению, преимущественную силу имеют обязательства по настоящему Кодексу.<br>2. Следующими по юридической силе документами являются решения и постановления Генеральной Ассамблеи и Консультативного совета.<br>3. Следующий уровень – межправительственные соглашения, декларации и заявления.<br>4. Последний уровень по юридической силе составляют национальные системы права.<br>Статья 62. Внесение изменений в настоящий Кодекс и иные нормативные документы Галактического права<br>Правом внесения изменений в настоящий кодекс и в действующие постановления и решения Генеральной ассамблеи и Консультативного Совета имеет Генеральная Ассамблея. Такие изменения вносятся путем тайного рейтингового голосования Генеральной Ассамблеи.<br>Внесение изменений в решения Консультативного Совета находится, в том числе, в полномочиях самого Консультативного Совета.<br>Статья 63. Ратификация и подписание<br>1. Настоящий Кодекс подлежит ратификации подписавшими его цивилизациями, <br>в соответствии с их конституционной процедурой<br>2. Ратификационные грамоты должны сдаваться на хранение Командующему станции Земного Альянса Вавилон 5, который будет извещать о сдаче на хранение каждой грамоты все цивилизации, подписавшие Кодекс, так же, как и Секретаря Генеральной Ассамблеи, когда он будет назначен.<br>3. Настоящий Кодекс вступит в силу по сдаче на хранение ратификационных грамот Республикой Центавр, Режимом Нарна, Федерацией Минбари, Империей Ворлон и Земным Альянсом<br>4. После этого Командиром Станции Вавилон 5 будет составлен протокол о сдаче на хранение ратификационных грамот, копии с которого будут разосланы всем подписавшим Кодекс правительствам.<br>5. Правительства, подписавшие настоящий Кодекс, которые ратифицируют его после того, как он вступил в силу, станут Членами Ассамблеи со дня сдачи ими на хранение своих соответствующих ратификационных грамот.<br>Статья 64. Хранение и языки Кодекса<br>Настоящий Кодекс, на интерлингве, ворлонский, центаврский, земной английский, нарнский, китайский, французский, русский, английский и испанский минбарский тексты которого являются равно аутентичными, будет храниться в архиве Станции Вавилон 5. Руководство станции препровождает копии Устава, должным образом заверенные, Правительствам всех других подписавших его цивилизаций.<br>В удостоверение чего представители Правительств Галактической Ассамблеи подписали настоящий Устав.<br>Составлено на станции Земного Альянса Вавилон 5 июня 2257 года по летоисчислению Земного Альянса."');

select data.set_attribute_value(data.get_object_id('library_document30'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document30'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document30'), data.get_attribute_id('name'), null, jsonb '"Документы и соглашения Первой Ассамблеи"');
select data.set_attribute_value(data.get_object_id('library_document30'), data.get_attribute_id('document_title'), null, jsonb '"Документы и соглашения Первой Ассамблеи"');
select data.set_attribute_value(data.get_object_id('library_document30'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_assembly"');
select data.set_attribute_value(data.get_object_id('library_document30'), data.get_attribute_id('content'), null, jsonb '"Обращение Галотты к народам Галактики<br>До Галотты дошла печальная весть. Драал, флаг-лидер планеты Феномир, храбрый воин и талантливый политик, выпила вино беззакония и съела хлеб злодеяния, плюнув на алтари предков и преступив обычаи веры Дрошаллы. Она перешла в иное подданство, став одним из народа Дракхов. Мы волею Дрошаллы и во исполнение пользы народа Драззи, объявлем Драал предательницей, лишаем её всех званий и титулов, включая титул флаг-капитана. Драал не имеет право говорить от народа Драззи. И да обрушится гнев Дрошаллы на её голову!<br><br>О капитуляции Минбарской Федерации в войне против Земного Альянса<br><br>Акт о капитуляции Минбарской Федерации в войне против Земного Альянса<br>Минбарская Федерация признает своё поражение в войне с Земным Альянсом.<br>Минбарская Федерация обязуется немедленно прекратить боевые действия с Земным Альянсом.<br>Минбарская Федерация обязуется немедленно вывести все военные и административные подразделения из зоны контроля Земного Альянса (зафиксировано по состоянию на 1033 цикл от пришествия Валена (2245 г. по календарю ЗА)).<br>Минбарская Федерация обязуется вернуть всех находящихся на территории или под контролем Минбара пленных солдат и офицеров Земного Альянса в обмен на представителей Военной касты Минбарской Федерации, захваченных Земным Альянсом в плен за время войны.<br>Минбарская Федерация гарантирует, что не будет удерживать силой никого из гражданских представителей человеческой расы, находящихся в зоне контроля Минбарской Федерации и желающих вернуться в Земной Альянс.<br>Минбарская Федерация выражает надежду на скорое возвращение в Минбарскую Федерацию всех минбари, не относящихся к Военной касте и оказавшихся к моменту заключения данного договора во власти Земного Альянса.<br>Минбарская Федерация обязуется компенсировать Земному Альянсу материальные затраты на содержание военнопленных и перемещенных лиц.<br>Подписано:<br>1035 цикл от пришествия Валена<br>2248 год по летоисчислению Земного Альянса<br>от имени Минбарской Федерации Лидер клана Звездных Всадников Командующий Атакующего флота Минбара Шай Алит Гилранн из дома Тэрин<br>от имени Земного Альянса Президент Земного Альянса Луис Сантьяго<br><br>2257.05.06 Предупреждение Синклиту Лумати<br><br>Консультативный Совет Ассамблеи выносит предупреждение Синклиту Лумати. Рассмотрев обстоятельства и выслушав капитана Ронсона, Консультативный Совет признаёт проведённый на Свободе-21 референдум незаконным в связи с тем, что при его проведении не было наблюдателей от Земного Альянса и референдум проводится при участии Синклита Лумати.<br>Консультативный Совет требует у Синклита Лумати признать незаконным договор о вхождении т.н. Автономной Республики Эниати в состав Синклита Лумати и расторгнуть его, а также вывести все военные силы Синклита Лумати из ЗС Свобода-21<br>Если данные требования не будут выполнены, Консультативный Совет немедленно примет наложение экономических санкций, а также приостановление их членства в Ассамблее.<br>Если и после этого требование не будет выполнено, будет вынесен на рассмотрение проект о миротворческой операции.<br>Принято тремя голосами за, один участник отсутствовал, один - воздержался.<br><br><br><br>Договор о судьбе Аббаи<br><br>1. С начала действия данного договора принимается соглашение о прекращении огня между Федерацией Минбари и народом Драззи. Взаимные материальные, моральные и иные взаимные претензии считаются не имевшими места. Посол Нархатт от лица касты воинов Минбара приносит свои извинения народу Драззи за произошедший инцидент.<br>2. Между Федерацией Минбари и народом Драззи устанавливаются дипломатические отношения, происходит обмен послами и официальными договорами.<br>3. Народу Драззи передается опека над народом Аббаи согласно меморандума, предоставленного послом Риззом Акри.<br>4. Оплата производится следующим образом: 800 тысяч дает Ассамблея; 100 тысяч дает посол Нархатт от Федерации Минбари; 300 тысяч дает посол Риз Аккри; 400 тысяч дает посол Таринн от Федерации Минбари.<br>Подписали:<br>От Федерации Минбари: посол Нархатт, посол Таринн, посол Игрейн<br>От народа Драззи: посол Риз Аккри, посол Драал<br>От народа Аббаи: полномочный представитель народа Аббаи<br><br><br>о торговых кораблях<br>Синдикат Антареса в лице Матери Эллайны и Капитана Моргана заключают с Федерацией Минбари в лице посла Нархатта,посла Игрейн и посла Тайлинн, при участии Земного Альянса в лице после Синклера, посла Кейн и после Семенова, о размещении торговых кораблей на звездных системах Эштар, Триггатти и Вега-7. Синдикат обязуется размещать только торговые корабли, а Федерация Минбари и Земной Альянс не нападать на них. Договор заключен при посредничестве и при одобрении Торгового Комитета<br><br>Соглашение о ненападении<br><br>Федерация Минбари и Антаресский синдикат заключили соглашение о взаимном ненападении и договорились о следующем:<br>1. Непересечение границ друг друга без согласия на то противоположной стороны<br>2. Нерасположение войск на территории второй стороны без ее на то письменного согласия<br>3. Невмешательство во внешнюю политику второй стороны, если это не противоречит внешней политике первой<br><br>О культурных контактах Федерации Минбари и Земного Альянса<br><br>Федерация Минбари и Земной Альянс заключили соглашение о культурных контактах и договорились о следующем:<br>1. Взаимный культурный обмен исследовательскими группами – носителями культуры<br>2. Принятие ценностей друг друга в объеме, е противоречащем существующим парадигмам<br>3. Взаимное ненасильственное проникновение культур друг в друга<br><br>О культурном обмене Режима Нарна и Федерации Минбари<br><br>Мы, посол На''Гхат, представитель режима Нарна, и посол Игрейн, представитель Федерации Минбара, договариваемся от лица наших цивилизаций о культурном обмене.<br>Цивилизации с радостью будут изучать традиции и культуру друг друга, для чего, в числе прочего, обязуются огранизовать культурные центры на планетах.<br>Мы надеемся, что изучение чужих культур только обогатит наши собственные, особенно когда речь идёт о столь продвинутой цивилизации, как Минбар, и откроет дорогу для дальнейшего сотрудничества.<br>Подписано 2257.05.07 послом На''Гхатом и послом Игрейн.<br><br>О визовом режиме Режима Нарна и Федерации Минбари<br>СОГЛАШЕНИЕ ДЕНОНСИРОВАНО ПРАВИТЕЛЬСВОМ МИНБАРИ<br><br><br>Мы, Федерация Минбари и режим Нарна, для облегчения изучения культуры, истории и технологий друг друга, подписываем соглашение об упрощении визового режима для туристов, а также для безвизового режима для деятелей науки и культуры, в том числе и для свободного доступа учёных режима Нарна к организованному Федерацией Минбари университету.<br>Подписано 2257.03.07 На''Гхатом и Игрейн<br><br>О прекращении огня между Режимом Нарна и Республикой Центавр<br>Мы, послы республики Центавр, представляющие Императора Турхана и послы Режима Нарна, представляющие королевскую фамилию, заявляем о намерении покончить с войной и перевести отношения наших народов на уровень дипломатических отношений. Мы считаем необходимым, чтобы наши расы забыли былые обиды и развивали свои отношения в сторону сближения и взаимопонимания. Чтобы поспособствовать этому, наши правительства обязуются:<br>1) Император Турхан готов принести извинения за своих подчиненных, действия которых привели к войне с Нарном. Все виновные уже казнены. И впредь воспринимать Нарн как полноценного члена галактического сообщества.<br>2) Правительство Режима Нарна обязуется принять извинения и впредь принимать центуриан с уважением, как высокоразумных существ, готовых к подуктивному и взаимовыгодному диалогу.<br>Подписано Режим Нарн: К’Этар, На’Гхат, Ка’хван<br>Подписано послы Республики Центавр: Виттор Риффарин, Алон Моллари, Мара Саммин<br>Посредник посол Антареса: Джон Морган<br><br>О ненападении Режима Нарна и Федерации Минбари<br><br>Соглашение о ненападении<br>Федерация Минбари и режим Нарна оформляют де юре то, что уже давно существует де факто, а именно: никакие вооружённые столкновения между представителями цивилизаций не допускаются. Нарушители данного соглашения будут преследоваться обоими сторонами.<br>Подписано 2257.03.07 послом На''Гхат и послом Игрейн.<br><br><br>Декларация о намерениях Федерации Минбари и Режима Нарна<br><br>Мы, Федерация Минбари и Режим Нарна, в целях сохранения мира и беспрепятственного дальнейшего развития цивилизаций, заявляем о намерениях взять взаимные обязательства в части защиты и сохранения мира на территории цивилизаций Минбари и Нарна,<br>1. Цивилизация Минбари берет на себя обязательство обеспечения и поддержки Режима Нарна в случае агрессивного воздействия на Режим извне<br>2. Режим Нарна берет на себя обязательство в содействии сохранению мира на территории цивилизации Минбари и обеспечение любой посильной помощи<br><br>Посол Федерации Минбари: Ш.А. Нархатт<br>Посол Режима Нарна : На''Гхат<br><br>Декларация о намерениях Федерации Минбари, Режима Нарна и Драззи<br>СОГЛАШЕНИЕ ДЕНОНСИРОВАНО ПРАВИТЕЛЬСВОМ МИНБАРИ<br><br><br>Мы, Федерация Минбари, Режим Нарна и Драззи, заявляем о намерениях организовать базу обучения ордена Анла''Шок на нейтральной планете Ломос<br>Для достижения данной цели мы предпринимаем следеющие действия:<br>1. Строительство базы и двух станций для последующего размещения и обучения Рейнджеров<br>2. Передачу орагнизованной базы под управление Анла''Шок<br>Финансирование проекта берут на себя Федерация Минбари, Режим Нарна и Драззи в равных долях<br><br>Посол Минбари Нархатт<br>Посол Нарна На’Гхат<br>Посол Драззи Розз Акри<br><br>Соглашение между Режимом Нарна и Республикой Центавр<br>СОГЛАШЕНИЕ ДЕНОНСИРОВАНО ПРАВИТЕЛЬСВОМ НАРНА И ЦЕНТАВРА<br><br><br>Режим Нарна и Республика Центавр, связи с угрозой глобального конфликта с возможным враждебным участием расы Варлон, для формирования общих возможностей глобальной обороны между ближайшими соседями, заключает следующие соглашения:<br>О раздел сфер влияния<br>О пошлинах<br>О визовом режиме<br>О культурных контактах<br>О сотрудничестве<br>Об оборонительном союзе<br>К''Этар, посол Режима Нарна<br>Посол Риффари Республики Центавр<br><br>Декларация об организации на Минбари университета по изучению логики и методологии науки<br>СОГЛАШЕНИЕ ДЕНОНСИРОВАНО ПРАВИТЕЛЬСВОМ МИНБАРИ<br><br><br>Во имя Валена, торжествующего и справедливого.<br>Разум – это свет! Свет разгоняет тьму, да будет так!<br><br>В целях ускорения изучения логики и методологии науки призываем учредить объединенный университет, вход в который открыт для выходца из любой касты.<br><br>Представители иных цивилизаций так же могут попасть в Университет, в случае соблюдения следующих условий:<br>1. Рекомендации от трех и более членов Ассамблеи<br>2. Успешно пройденное собеседование с приемной комиссией Университета<br>3. Заблаговременная оплата всего курса обучения<br><br>Финансирование Университета и всей его деятельности, берет на себя Федерация Минбари.<br><br>Обеспечение проживания и питания студентов , происходит за счет студентов и их представителей.<br><br>Кодекс галактических послов Земного Альянса (Сенатор Кейн, сенатор Кларк, сенатор Хитоши)<br><br>Цель кодекса, разъяснить и законодательно регламентировать обязанности и права галактических послов Земного Альянса. \"Кодекс галактических послов Земного Альянса\", далее - \"кодекс\" - свод законов, норм и правил, которым должен руководствоваться галактический посол в своей деятельности.<br>\"Галактический посол\", далее \"посол\" - гражданин Земного Альянса, наделенный Сенатом обязанностью, представлять Земной Альянс на переговорах с другими цивилизациями, в том числе в Галактической Ассамблеи Цивилизаций.Порядок назначения галактических послов Земного Альянса.<br>Галактический посол назначается открытым голосование Сената из числа сенаторов выдвинутых на должность Галактического посла.<br>Сенатор имеет право сам выдвинуть свою кандидатуру на должность Галактического посла.<br>Во время исполнения полномочий галактического посла, сенатор лишается права на законодательную инициативу в Сенате Земного Альянса, но сохраняет за собой право голоса.<br>Сенат оставляет за собой право в виду чрезвычайных ситуаций, назначить на должность Галактического посла, любого гражданина Земного Альянса.Субординация.<br>Галактические послы Земного Альянса подчиняются напрямую решениям Сената Земного Альянса.Обязанности галактических послов:<br>1) Представительство Земного Альянса в галактике.<br>2) Обеспечение интересов Земного Альянса и реализация внешнеполитического курса.<br>3) Выполнение поручений Сената Земного Альянса.<br>4) Обеспечение развития сотрудничества с другими цивилизациями.<br>5) Контроль за выполнением договоров, как галактического уровня, так и локальных актов Земного Альянса.<br>6) Контроль за выполнением договоров, как галактического уровня, так и локальных актов Земного Альянса.<br>7) Сбор информации<br>8) Общее руководство галактическими консульскими институтами и учреждениями Земного Альянса.<br>9) Посол не имеет права заключать соглашения с иными цивилизациями без предварительного обсуждения и утверждения предлагаемого соглашения большинством голосов посольства Земного Альянса.Права галактических послов:<br>1) Подать в отставку.<br>Вопрос об отставке включается в повестку Сената. Решение об отставке принимается на одной из трех ближайших сессиях Сената. Сенат вправе отказать в отставке, ввиду передачи галактическим послом дел, другому послу, однако обязан утвердить срок передачи дел. Данный срок не может составлять более двух земных лет.<br>Сенатор Кейн, сенатор Кларк, сенатор Хитоши"');

select data.set_attribute_value(data.get_object_id('library_document31'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document31'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document31'), data.get_attribute_id('name'), null, jsonb '"Заявление Идилии Икарры"');
select data.set_attribute_value(data.get_object_id('library_document31'), data.get_attribute_id('document_title'), null, jsonb '"Заявление Идилии Икарры"');
select data.set_attribute_value(data.get_object_id('library_document31'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_assembly"');
select data.set_attribute_value(data.get_object_id('library_document31'), data.get_attribute_id('content'), null, jsonb '"Во имя сияния чистого разума и спокойствия во Вселенной! <br>Идиллия Иккары одобряет и разделяет идеи, послужившие созданию Галактической Ассамблеи Цивилизаций. В наступившие темные времена никто не должен остаться один со своими радостями и бедами, когда ему требуется поддержка и участие. Мы готовы изменить свое положение со статуса наблюдателя на статус полноценного члена Ассамблеи. <br><br>Угроза самой жизни идет к нам из глубины пространства. Мудрость и технологическое могущество Идиллии Иккары высоки. И мы хотим использовать их во имя общего блага. Мы готовы принять на себя ответственность за решение насущных проблем нашей большой межзвездной семьи. Настало время приложить все силы для поддержания галактического мира и безопасности. Мира, в котором каждый будет иметь шанс на защиту и опору, если намерения его ясны и чисты. Да пребудем мы друг для друга лучами света, что проложат пути к прогрессу и процветанию. <br><br>Да будет так, пока последний голос звучит в сердце словами разума самой Вселенной!"');

select data.set_attribute_value(data.get_object_id('library_document32'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document32'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document32'), data.get_attribute_id('name'), null, jsonb '"Первое заседание Консультативного Совета"');
select data.set_attribute_value(data.get_object_id('library_document32'), data.get_attribute_id('document_title'), null, jsonb '"Первое заседание Консультативного Совета"');
select data.set_attribute_value(data.get_object_id('library_document32'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_assembly"');
select data.set_attribute_value(data.get_object_id('library_document32'), data.get_attribute_id('content'), null, jsonb '"Голосование:<br>1. Принятие в члены ассамблеи Идиллии Иккары (уведомительный порядок)<br>2. Принятие в члены ассамблеи Ордена Анлашок (уведомительный порядок)<br>3. Заявление Рааза Акри<br>Я Рааз Акри - посол от Лиги Неприсоединившихся Миров, представляю свою кандидатуру на пост командующего миротворческим флотом. Имею боевой опыт.<br>4. Заявление Нерунн<br>Я Нерунн - посол от Федерации Минбари, представляю кандидатуру Эр Шаат на пост командующего миротворческим флотом. Кандидат имеет боевой опыт. Да прибудет с вами Свет.<br>5. Я, Лондо Моллари, посол Великой Республики Центавр выдвигаю на пост командующего миротворческими силами Ассамблеи гражданина Республики Даарио Галло. Выдвигаемый обладает боевым опытом.<br>6. Орден Анла''Шок выдвигает Первого Рейнджера Ириду Шафтброк на пост командующего миротворческими силами<br><br>Обсуждение:<br><br>1. Доклад комиссии по проверке условий опеки народа Дилгар. Докладчик Эр Шаат<br>Содокладчик представтель народа Дилгар РадЖар<br>2. Доклад комиссии по расследованию инцидента в системе Кара (ЛНМ). Докладчик Нерунн<br>3. Меморандум правительства Федерации Минбари. Докладчик Эр Шаат<br>4. Обсуждение Ноты правительству Земного Альянса, по поводу правового статуса системы Эпсилон:<br>Докладчик - Диргал Даран Кэн<br>Суть противоречие указа Президента Земного Альянса № УП 12 от 03 января 2257 года о создании директории Эпсилон статье 56 Кодекса Ассамблеи.<br><br>Разное: формируется секретариатом Ассамблеи."');

select data.set_attribute_value(data.get_object_id('library_document33'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document33'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document33'), data.get_attribute_id('name'), null, jsonb '"Решение Консультативного Совета"');
select data.set_attribute_value(data.get_object_id('library_document33'), data.get_attribute_id('document_title'), null, jsonb '"Решение Консультативного Совета"');
select data.set_attribute_value(data.get_object_id('library_document33'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_assembly"');
select data.set_attribute_value(data.get_object_id('library_document33'), data.get_attribute_id('content'), null, jsonb '"О регламенте Консультативного Совета<br>В целях улучшения процедуры принятия решений Консультативным Советом, в рамках установленных п. 2 ст. 28 Кодекса Ассамблеи, Консультативный Совет устанавливает процедуру разрешения вопросов, находящихся в его компетенции:<br>Формировать повестку заседания, контролировать внесение вопросов для обсуждения, заниматься отслеживанием регламента поручается Секретарю генеральной Ассамблеи. <br>1.1. Во время заседания, Секретарь наделяется всеми необходимыми распорядительными функциями, не посягающими на привилегии председателя КС.<br>1.2. секретарь дает слово выступающему, и напоминая о регламенте может его лишить, секретарь заносит в протокол решения КС в той формулировке в которой они были поставлены на голосование<br>2.  Формирование - повестки дня КС<br>2.1. Секретарь принимает требования членов Ассамблеи, о внесении им предложений для голосования КС ДО заседания Совета.<br>2.2. Член Ассамблеи через своих послов может внести для голосования КС вопрос лежащий в пределах компетенции КС. <br>При формулировке вопроса член КС обязан сформулировать: Преамбулу - описание проблемы или целей субъекта инициативы, Правовое основание - ссылку на конкретную статью Кодекса Ассамблеи, которая позволяет КС решить вопрос так или иначе, и Решение - четкую формулировку которую КС принимает как руководство к действию. <br>В отсутствии любого из перечисленных разделов Секретарь ГА имеет право не включать вопрос в повестку дня, объяснив инициатору, какие конкретно разделы настоящего регламента нарушены им при внесении предложения.<br>2.3. Вопросы вносятся в повестку в порядке их реального внесения инициаторами.<br>3. Порядок заседания КС<br>3.1. В начале заседания Председатель проверяет наличие кворума (трое членов КС из пяти).<br>3.2. Далее председатель предлагает Секретарю занести в протокол всех присутствующих на заседании членов ассамблеи и работников секретариата и рассадить их так чтобы им было удобно совещаться.<br>3.3. председатель ставит на голосование вопросы, обсужденные на прошлом заседании КС, в той последовательности в которой они обсуждались.<br>3.3.1. перед голосованием председатель просит инициатора напомнить суть проблемы и предлагаемое решение. регламент 30 секунд. Инициатор имеет право изменить формулировку предлагаемого решения.<br>3.3.2. далее председатель предлагает время на возражения - регламент 30 секунд. Право на возражения имеет только член КС. Если в это время возражающий предложил новую формулировку , которая устроила инициатора формулировку можно поменять.<br>3.3.3. Вопрос ставится на голосование. Каждый член КС имеет один голос. Все другие члены Ассамблеи один голос - если их больше трех - если меньше они не голосуют. Работники Ассамблеи - один голос, если их больше трех - если меньше они не голосуют. <br>3.3.4. Решение КС считается принятым, если за него проголосовало большинство членов КС и присутствующих, имеющих право голоса.<br>3.3.5. Никакие вопросы не могут ставиться на голосование КС, пока не были исчерпаны вопросы для голосования, внесенные в прошлую повестку дня.<br>4. После исчерпания вопросов для голосования, председатель переходит к предложениям поступившим в повестку дня ДО данного заседания.<br>сперва заслушивается доклад инициатора. регламент 3 минуты.<br>далее выступает содокладчик, если он есть - регламент 3 минуты. Содокладчик - это второй инициатор проекта решения КС, и он не может представлять того же члена Ассамблеи что и докладчик.<br>далее заслушивается Оппонент - если заранее было заявлено оппонирование докладу. Регламент 3 минуты.<br>Затем председатель дает время для дискуссии. <br>каждый член КС, может высказаться по существу обсуждаемого вопроса ОДИН РАЗ - регламент 1 минута.<br>каждый присутствующий посол члена ассамблеи или наблюдатель, которых прямо касается обсуждаемый вопрос, может высказаться по существу обсуждаемого вопроса ОДИН РАЗ - регламент 1 минута.<br>после окончания обмена мнениями председатель уточняет у инициатора не хочет ли тот снять вопрос, или изменить формулировки. Если вопрос остается в повестке, голосовании по нему проходит на следующем заседании КС, в порядке предусмотренном п. 3 настоящего регламента. До следующего заседания инициатор может уточнить формулировки предложения, снять вопрос с повестки, через Секретаря Ассамблеи, но не может менять сути поставленного вопроса.<br>Все вопросы оперативного характера, возникшие в ходе заседания, ставятся на голосование в разделе повестки дня “разное”.<br>голосование по процедурным вопросам также ставится в повестку дня в раздел разное.<br>5. Член КС или любое разумное существо, присутствующие на заседании, может быть удален с заседания - за выкрики с мест, нарушения регламента и правил поведения в общественных местах. Решение об удалении принимается Председателем КС в уведомительном порядке, мнение удаляемого никого не интересует, и голосовать по поводу своего удаления он не может. Для исполнения решения председатель может привлекать службу Безопасности станции Вавилон-5."');

select data.set_attribute_value(data.get_object_id('library_document34'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document34'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document34'), data.get_attribute_id('name'), null, jsonb '"Устав Лиги Неприсоединившихся Миров"');
select data.set_attribute_value(data.get_object_id('library_document34'), data.get_attribute_id('document_title'), null, jsonb '"Устав Лиги Неприсоединившихся Миров"');
select data.set_attribute_value(data.get_object_id('library_document34'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_assembly"');
select data.set_attribute_value(data.get_object_id('library_document34'), data.get_attribute_id('content'), null, jsonb '"Мы те, кто объединился во имя общего блага, во имя согласия и мира для наших цивилизаций, во имя сохранения наших уникальных культур, во имя будущего наших детей, во имя наших святынь. Мы те, кто объединился под именем Лига Неприсоединившихся Миров, провозглашаем следующие принципы и установления общими для всех членов Лиги, для всех тех, кто подписал Устав Лиги и добровольно, без принуждения вошел в ее состав:<br><br>Во-первых мы утверждаем правило, что любой народ, вошедших в Лигу будет иметь право на сохранение своих исконных законов, обычаев и традиций на своей территории и уважения к ним со стороны остальных членов Лиги<br><br>Во-вторых всякий народ, присоединившийся к Лиге может быть уверен, что сохранит исходный суверенитет и органы управления, а также должное отношение к полномочным представителям этого народа Лиги от остальных членов Лиги<br><br>В-третьих мы провозглашаем на территории Лиги терпимость к верованиям и религиозным течениям всякого члена Лиги, или малых народностей, входящих в Народы Лиги<br><br>В-четвертых мы провозглашаем что Лига есть единое политико-экономическое пространство, под общим управлением Совета Лиги, который является надгосударственным органом, решения которого признаются всеми членами Лиги, выше решений собственных национальных правительств народов Лиги<br>...<br>Статья 12<br>Совет Лиги имеет в своем составе представителя от каждого народа, или государства входящего в Лигу, назначаемого в Совет согласно обычаям и законам этого народа.<br>В Совете Лиги все члены совета (Советники) обладают одинаковым правом голоса, и решение в Совете принимается большинством голосов.<br>Каждый член Лиги через своего Советника может наложить вето на решение Совета Лиги, если решение это затрагивает национальные интересы члена Лиги, является неприемлемым по этическим, культурным или религиозным соображениям<br>…<br>Статья 14<br>Лига провозглашена зоной свободной торговли для членов Лиги. 1. Все налоги или пошлины на территориях членов Лиги для межзвездной торговли с инорасцами, не членами Лиги, устанавливаются Советом Лиги и не могут быть изменены или превышены национальными правительствами. <br>2. Роль торгового министерства Лиги исполняет Крона Бракири, именно она представляет совету все установления по изменению экономической жизни Лиги<br>3. Для реализации решений Совета Лиги формируется общий бюджет Лиги, в который каждый член лиги обязан делать ежегодные отчисления. Государственным банком признается Бракос-Даймонд корп.<br>…<br>Статья 15<br>Правосудие в Лиге осуществляются национальными судами. Дабы правосудие вершилось без задержек и полной мерой, <br>1. Во-первых преступник совершивший преступление на территории народа лиги судится судом этого народа и по его законам.<br>2. Во-вторых по требованию уполномоченного органа одного народа Лиги, силы охраны правопорядка другого народы Лиги немедленно осуществляют арест и экстрадицию преступников…<br>3. В-третьих в отношение преступлений на территории Лиги совершенных иномирцами действуют международные соглашения, подписанные Советом Лиги с цивилизациями, являющимися родиной преступника, или инвективы Галактической Ассамблеи Цивилизаций.<br>…<br>Статья 74<br>Оборона Лиги осуществляется совместно, для чего учреждаются Вооруженные Силы Лиги, под предводительство Галотты - народа Драззи. Финансируются ВСЛ из бюджета Лиги. Служить в ВСЛ могут представители любых народов, членов Лиги.<br>Каждый член Лиги может иметь собственные силы самообороны, разведки и национальной безопасности<br>Военными силами ВСЛ в каждой Системе Лиги управляет Штандарт-Лидер военных сил. Ему же во время военных действий подчиняются все силы самообороны системы. В мирное время силы самообороны действуют вне непосредственного подчинения Штандарт-Лидеру.<br>…<br>Статья 85<br>Культурно-образовательную и научную политику Лиги осуществляет Центр Научно-Религиозных исследований, управляемый Архонтами Идеократии Маркаби. В обязанности Центра входит исследование передовых технологий, внедрение их в производство, а также изыскания в области Духовного и внедрение его в нативные культуры членов Лиги.<br><br>Заключительные положения:<br>Любой Народ, подписавший данный Устав и согласившийся с его положениями, может быть принят в Лигу с испытательным сроком в 10 лет. В эти десять лет народ имеет в Совете Лиги своего представителя с правом совещательного голоса, и должен привести свои установления и особенности жизни в соответствие с Уставом Лиги.<br><br>Устав вступает в действие немедленно после ратификации его правительствами, подписавшими данный Устав, на планете Бракос II, в 1276 году от пришествия Бога (по календарю Маркаби, который отныне является официальным календарем Лиги.<br><br>Подписано:<br>От Народа Драззи - Рааз Акри<br>От Народа Бракири - Диргал Даран Кэн<br>От Идеократии Маркаби - Архонт Назаренн<br>От гнезда Геймов - Бос Жужелиц <br>От народа ПаКМара - Т,Руп Оед<br>От народа Аббаев - Риба Тухла<br>Ратифицировано в священный день Романи месяца Обретения Благодати, 1278 года от ПБ."');

select data.set_attribute_value(data.get_object_id('library_document35'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document35'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document35'), data.get_attribute_id('name'), null, jsonb '"Указ президента о проведении четвертого колониального Конгресса"');
select data.set_attribute_value(data.get_object_id('library_document35'), data.get_attribute_id('document_title'), null, jsonb '"Указ президента о проведении четвертого колониального Конгресса"');
select data.set_attribute_value(data.get_object_id('library_document35'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_congress"');
select data.set_attribute_value(data.get_object_id('library_document35'), data.get_attribute_id('content'), null, jsonb '"УКАЗ ПРЕЗИДЕНТА ЗЕМНОГО АЛЬЯНСА<br>О проведении четвертого колониального Конгресса<br><br>В связи с обострившимися противоречиями в обществе, усилением деятельности экстремистских организаций и сообществ, для сохранения мира и стабильности, приказываю:<br>Для внесения изменений в конституцию Земного Альянса и другие законодательные акты созвать расширенное заседание Сената, под общим названием Четвертый колониальный Конгресс (Конгресс).<br><br>1. Председательствует на Конгрессе Президент Земного Альянса, в его отсутствии заседание ведет Вице-Президент Земного Альянса, а в его отсутствие старший сенатор Акио Хитоши, и далее по старшинству сенаторов Земного Альянса<br>2. Секретариатом Конгресса, ответственным за регламент и организационную сторону назначается Администрация Президента Земного Альянса. Секретарем назначается глава Администрации Арчибальд Трамп.<br>2. Секретарю надлежит разработать повестку дня каждой сессии Конгресса, и следить за ее неукоснительным соблюдением<br>3. Настоящим указом утверждается регламент проведения заседаний конгресса:<br>3.1. Секретарь принимает просьбы Конгрессменов о выступлении на Конгрессе только в письменном виде, с сформулированными предложениями, которые Конгрессмены готовы поставить на голосование Конгресса. Прием просьб прекращается за полчаса до начала сессии.<br>3.2. Кворум на заседании конгресса составляет 50% голосов. В отсутствии кворума никакие решения не могут быть приняты. Кворум проверяется в начале каждой сессии, председатель ставит вопрос о кворуме, и все конгрессмены, участвующие в Конгрессе, должны проголосовать ЗА по вопросу о кворуме. Данное голосование осуществляется через техническую систему Альянс-Выборы но не требует вливания денежных средств.<br>3.3. Каждая сессия начинается с голосования по предложениям, поступившим во время предыдущей сессии.<br>Во время голосования недопустимы дискуссии, выкрики с мест и выступления сторонних ораторов.<br>3.4. После постановки вопроса на голосование, Конгрессмену, вынесшему вопрос дается минута на защиту своей позиции. После этого его оппоненту (на оппонирование записываются заранее, до сессии) дается минута на возражение. После выступления оппонента проводится процедура голосования. и вопрос, набравший больше голосов ЗА чем против становится Актом Конгресса (Сената). Вопрос, отклоненный Конгрессом больше не может ставиться на обсуждение на этом Конгрессе.<br>3.5. После голосования на сессии начинаются обсуждения и вынесение вопросов к голосованию на следующей сессии.<br>Конгрессмен, внесший вопрос к обсуждению, выступает с докладом. На доклад дается 5 минут.<br>Далее в порядке появления желающих дают высказаться оппонентам предложения. На выступление каждого оппонента дается не более трех минут. Оппонентов не может быть более трех.<br>В конце обсуждения сторонникам доклада дается право на реплику, и изменение формулировки предложения - три минуты.<br>После этого предложение выставляется в очередь на голосование на следующей сессии.<br>3.6. Все процедурные вопросы, равно как вопросы по регламенту, решаются Конгрессом без обсуждения, по предложению Конгрессмена, Председателя или Секретаря Конгресса, простым голосованием - поднятием рук.<br>3.7. Конгрессмен может быть удален с заседания Конгресса- за выкрики с мест, нарушения регламента и правил поведения в общественных местах. Решение об удалении принимается Конгрессом - это процедурный вопрос.<br><br>4. Конгресс будет проводиться на Станции Вавилон-5 в директории Эпсилон.<br><br>5. Ответственность за проведение Конгресса, безопасность его участников возлагается на руководство директории Эпсилон и станции Вавилон-5.<br><br>6. Распорядительные и судебные функции возлагаются на капитана Джона Шерридана.<br>7. Военному губернатору директории Эпсилон необходимо сформировать делегацию от директории, в составе двух человек. В делегацию включается также представитель корпорации Синайская Хризантема.<br><br>Подписано Президент Земного Альянса Мари Кейн<br>01 декабря 2258 года Женева. Земля. Земной Альянс<br>Ратифицировано Сенатом<br>Земного Альянса<br>03 декабря 2258 года Женева. Земля. Земной Альянс"');

select data.set_attribute_value(data.get_object_id('library_document36'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document36'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document36'), data.get_attribute_id('name'), null, jsonb '"Повестка дня первого заседания Конгресса колоний"');
select data.set_attribute_value(data.get_object_id('library_document36'), data.get_attribute_id('document_title'), null, jsonb '"Повестка дня первого заседания Конгресса колоний"');
select data.set_attribute_value(data.get_object_id('library_document36'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_congress"');
select data.set_attribute_value(data.get_object_id('library_document36'), data.get_attribute_id('content'), null, jsonb '"Повестка дня первого заседания конгресса колоний:<br><br>1. Приветственное слово президента ЗА<br>2. Обращение Вице-президента ЗА к делегатам Конгресса.<br>3. Голосование по заранее выдвинутым вопросам<br>Выдвижение предложений:<br>Акио Хитоши - председатель сенатского комитета по Здравоохранению. Доклад о состоянии дел по поиску средств борьбы с заболеванием Индекс 34-126 в перечне инфекционных заболеваний.<br>Предложение: о принятии профилактических заградительно эпидемиологических мер на планете Земля и колониях Земного Альянса.<br><br>Тойво Ларсен - доклад \"Роль исследований Искусственного интеллекта в современном обществе\". Предложение - отменить акт Кейн 2236 года \"Об исследованиях в области искусственного интеллекта\" и отменить Акт Неймана 2258 года \"Об уголовной ответственности за исследования в области искусственного интеллекта\"."');

select data.set_attribute_value(data.get_object_id('library_document37'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document37'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document37'), data.get_attribute_id('name'), null, jsonb '"Приказ о противоэпидемических мерах на станции Вавилон-5"');
select data.set_attribute_value(data.get_object_id('library_document37'), data.get_attribute_id('document_title'), null, jsonb '"Приказ о противоэпидемических мерах на станции Вавилон-5"');
select data.set_attribute_value(data.get_object_id('library_document37'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_babylon"');
select data.set_attribute_value(data.get_object_id('library_document37'), data.get_attribute_id('content'), null, jsonb '"Принимая во внимание высокий риск распространения инфекционных заболеваний, во исполнение п. 168 Устава Вооруженных Сил Земного Альянса, приказываю:<br><br>1. Ввести в директории Вавилон и на Станции Вавилон 5 противоэпидемические меры<br>2. Службе Безопасности Станции предписывается задерживать любых прибывающих на станцию и проживающих на станции лиц проявляющих симптомы заболеваний, и сопровождать их в медицинскую лабораторию, для проведения медицинских процедур. По результатам врачебной экспертизы такие лица могут быть помещены в карантин.<br>3. Ежедневно у всего населения директории и ее гостей берутся анализы крови, для обнаружения возбудителей инфекции. Лица, оспаривющие право руководства станции на эту процедуру, должны быть немедленно подвергнуты экстрадиции с территории Директории.<br><br>Военный губернатор директории Вавилон, командир станции Вавилон-5, капитан Джон Шерридан<br>Руководитель медицинской службы станции Вавилон-5, лейтенант Сьюзен Франклин"');

select data.set_attribute_value(data.get_object_id('library_document38'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document38'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document38'), data.get_attribute_id('name'), null, jsonb '"Общие сведения о Республике Центавр"');
select data.set_attribute_value(data.get_object_id('library_document38'), data.get_attribute_id('document_title'), null, jsonb '"Общие сведения о Республике Центавр"');
select data.set_attribute_value(data.get_object_id('library_document38'), data.get_attribute_id('system_library_category'), null, jsonb '"category_universe"');
select data.set_attribute_value(data.get_object_id('library_document38'), data.get_attribute_id('content'), null, jsonb '"Социальная структура<br>Центаврианское общество характеризуется очень чёткой стратификацией. Вертикальный дрейф между основными классами практически отсутствует, но внутри их есть своя иерархия (очень чётко определённая), с несколько большей мобильностью. Взаимоотношения между высшими и низшими очень редко регулируются законами, но впаяны в традиционную культуру Центавра, так что каждый чётко знает своё место и правила поведения.<br>На вершине социальной пирамиды центаврианского общества стоит Император. Традиционно фигура императора стоит над всей социальной иерархией, представляя собой отдельный класс из одной личности.<br>Следующий слой – Императорский Двор. Советники императора и его приближённые превосходят рангом всё остальное дворянство.<br>Далее идёт собственно дворянство или Благородные Дома. На его вершине стоят, несомненно, предводители пяти Великих домов, затем старейшины родов и дворяне, прошедшие ритуал Возвышения и высшие военные чины. Основу дворянства составляют собственно большинство членов Благородных домов, военные офицеры и центавриане, занимающие высокие республиканские посты. На низшем уровне находятся профессиональные военнослужащие, учащиеся дворянских академий и немногочисленные принятые в Дом простолюдины.<br>Высший слой простолюдинов включает в себя высокопоставленных профессионалов, занимающих высокие посты в своей сфере деятельности; учёных, не награждённых титулом; семьи, пользующиеся спонсорской поддержкой Благородного дома. Основу простонародья составляют квалифицированные рабочие, служащие и прочие люди, обладающие прилично оплачиваемой легальной работой и призванные на военную службу. Низший слой: освобождённые либо вольноотпущенные рабы; бедняки; занятые низкоквалифицированным физическим трудом.<br>Внизу общества находятся рабы, но и у них есть своя элита: домашние рабы, актёры, танцовщицы и «рабыни для удовольствий» (и те и другие - только женщины), все представители Вендура Кадо (особая каста рабов, занятых в высокотехнологичном производстве и инновационных исследованиях, фактически одна из двух малых субрас центавра). Ниже всех стоят рабы-рабочие, крайне немногочисленные исторгнутые из дворянства, практически все  Шенаро (вторая малая субраса центавриан, направленно выведенная евгениками на раннем этапе развития республики в попытке получить идеальных рабов, отличаются крепким сложением, сильной мускулатурой и не шибко большим умом; были практически истреблены после восстания в правление императора Людо, но некоторое количество сохранилось внутри Домов), рабы-инопланетники. Рабы никогда не принадлежат конкретному лицу, обычно они являются собственностью семьи, Дома, предприятия.<br>Центавриане крайне социальны. Принадлежность к семье и своему социальному кругу – главное, что определяет центаврианина. В центаврианском языке существует около пятидесяти определений слова «семья», каждое из которых описывает разные уровни и типы семейных взаимоотношений в зависимости от обсуждаемой личности и её статуса. Этот пример отлично иллюстрирует ту сложность, которая пронизывает все уровни социальной жизни Центавра. Поэтому у центавриан просто нет таких понятий, как «неформальная встреча», «разговор без протокола» и т. п. Безусловно, существует дружба, определённые уровни интимности и др., но практически любые взаимоотношения между центавриаными подчинены строгому этикету и пониманию статуса. Почти все публичные действия центавриан (за некоторыми важными исключениями) являются частью сложного социального танца, паутины связей. Когда центаврианин исполняет его, он делает так не потому, что это ожидаемое поведение или впитанное с рождения предписание культуры, а потому, что в противном случае вокруг него немедленно произойдёт распад всех взаимодействий.<br>От рождения до смерти<br>Рождение ребёнка – особенное событие в центаврианской жизни. Во-первых, уровень рождаемости крайне невысок, во-вторых, это редкий случай в жизни центаврианина, когда в его жизнь входит новое существо, которое минимум несколько десятилетий не будет для него соперником в социальной игре. Дети практически лишены общественных прав и обязанностей, за исключением классовых, и имеют статус «безвредных». Поэтому в центаврианском обществе категорически не принято причинять вред детям. Дети не могут объектом заговора, убийства, кровной мести. Социальный статус ребёнка не может быть снижен. Отсюда же проистекает традиция усыновления детей поверженных противников. Взрослые центавриане часто завидуют детям, которые свободны от условностей и ответственности «Большой игры». Однако эта свобода не длится долго, и дети начинают восхождение к своему месту в обществе в очень раннем возрасте, всю жизнь храня воспоминания о первых беззаботных и невинных годах жизни. Центавриане могут быть крайне жестоки друг к другу, но только не к ребёнку. Преступления, совершённые против детей – наиболее порицаемые и караются с крайней жестокостью и безжалостностью.<br>Три года  - праздник Ордамо (ордамас – выживание)<br>Между восемью и десятью у дворян – Корос, представление Императору и Двору. (практически единственный в жизни большинства центавриан случай приблизиться и даже ПРИКОСНУТЬСЯ к императору). Во время Короса может внезапно и фатально повезти. Например, прайм-министр Малахия получил этот титул пожизненно в девятилетнем возрасте во время Короса, от императора Турхана лично. Такие события называются «мановением Имперской Длани» и имеют статус непререкаемого священнодействия, ибо в такие моменты Император выступает в роли олицетворения самой Судьбы или Великого Создателя (подозреваю, что таким образом Турхан банально заблокировал неугодных ему кандидатов, предложенных Центарумом).<br>Независимо от социального статуса, детство центаврианина длится до его десятого дня рождения. Статус ребёнка обеспечивает защиту, возлагая ответственность за его благополучие и действия на родителей, воспитателей или владельцев. Это относится даже к детям-рабам и, хотя они начинают учиться ответственности и подобающему в несколько более раннем возрасте, они всё равно не несут ответственности практически за любые поступки, кроме убийства и кражи у представителя Благородного дома.<br>            Дети-рабы начинают официальное обучение в своих академиях между пятью и семью годами, дети простолюдинов и дворян – после десяти. Однако, на самом деле дворяне тоже получают раннее обучение, хотя и менее формальное. К десяти годам и поступлению в первую академию профессия и роль ребёнка уже давно определены. Это относится в большей степени к мальчикам. Для девочек профессиональное обучение (за исключением традиционных ритуальных ролей) чаще всего является происшествием скандальным, и лишь немногие дома одобряют поступление девочек в «мужские» академии.<br>После своего десятого дня рождения (рабы – раньше), все дети отправляются на обучение в академию. Академии обычно имеют долгую историю и собственные традиции, хотя появляются и новые (например, при появлении новых профессий или научных дисциплин). У каждого класса академии свои, но, например, существует спонсорство, позволяющее простолюдинам обучаться в дворянских академиях. Теоретически, все воспитанники конкретной академии во время обучения равны, на практике, конечно, некоторые равнее. Для разных страт существует разный порядок прохождения академий, но обычно до получения первого взрослого назначения свободные центавриане обучаются минимум в трёх (рабы в двух). Первая – общеобразовательная, где даются минимальные базовые знания по истории, культуре, языку и базовым наукам (минимум, ясное дело, у всех классов свой). Обучение в такой академии длится от двух до четырёх лет, возможен ранний выпуск для одарённых воспитанников. Вторая академия  - более специализированная, обучение в ней длится от двух до десяти лет, здесь даётся профессиональное обучение. Третья либо задаёт ещё более узкую специализацию в конкретной области, либо наоборот, расширяет поле квалификации. Для дворян, например, нормально пройти военное обучение во второй академии и бизнес- или юридическое образование в третьей.<br>Взрослая жизнь начинается с момента выпуска из последней академии и получения первого (из зачастую многих и многих) назначения на службу. Дворяне обычно получают престижный управленческий пост, офицерский ранг в армии Дома или Гранд Милитари, придворную должность или дипломатическое назначение. Для простолюдинов есть миллиарды рабочих мест, которые нельзя передать в руки рабов. Рабов продают новым хозяевам, или приставляют к делам у старых, или передают Благородному дому для дополнительного обучения.<br>В жизни дворян важным этапом является Возвышение. Каждый дворянин является частью августейшего тела Республики, и Возвышение означает, что Республика признаёт эту конкретную часть исключительно полезной и важной. Каждое достижение, реальное или мнимое, ведёт к тому, что имя дворянина всё чаще упоминается при дворе и в какой-то момент Император лично признаёт дворянина заслуживающим Возвышения. Возвышаемый получает приглашение ко двору, где ему вручается особый медальон за заслуги перед Республикой или орден за конкретное славное деяние. Возвышаемый получает личную аудиенцию у Императора и, как правило, получает от него подарок. Такие подарки могут быть символическими, но чаще бывают чрезвычайно щедрыми – включая бесценные артефакты древности, корабли, владения, дворянское достоинство, почётные титулы, придворные должности… В жизни центаврианина Возвышение является одним из величайших достижений и бывает не более раза в жизни. В годовщину Возвышения Император может предложить центаврианину памятный подарок в знак особого признания его новых заслуг и своего расположения.<br>Средний срок жизни центавриан – около 150 лет. Из них около сотни центаврианин ведёт активную жизнь, затем начинается медленное угасание. Большинство центавриан в возрасте за сотню редко покидают дом, избегают риска и политической активности. В высших кругах считается неприличным активно интриговать против таких старцев. Однако некоторые старики сохраняют бодрость духа и тела до самой смерти. Такие патриархи, называемые «каллус колари» (оч. приблизительно «старый медведь), пользуются огромным уважением и, зачастую, страхом более молодых коллег. С другой стороны, более молодые их недолюбливают, считая, что старику пора уступить место. Кстати, император Турхан – определённо каллус колари.<br> <br>Развлечения.<br>Принято считать, что центавриане – упадническая и декадентская цивилизация. На это мы можем ответить, что мы всё ещё развлекаемся в том же стиле, что и первый Император. Это не декаданс, а традиция. Да, для самой технически развитой из бороздящих космос цивилизаций (кроме Ворлона и, быть может, Минбара) наши вкусы в развлечениях крайне просты. Конечно, у нас есть игры в виртуальной реальности, высокотехнологичные виды спорта, кинематограф и электронная музыка (и даже ИскИн-композиторы!), но все эти веяния новых веков уступают в популярности простым радостям изысканной еды, алкоголя, танцев и проч. У нас очень популярна литература и изящные искусства, особенно поэзия и опера – ведь мы наслаждаемся нашими прекрасными голосами. Мы обожаем пластическое искусство.<br><br>Мода и стиль<br>Цвета в одежде:<br>- Белый и фиолетовый (пурпурный) – королевские цвета. Только члены Двора имеют право носить три вещи пурпурного или белого цвета одновременно. Для всех других оттенки фиолетового в одежде являются признаком крайнего дурновкусия.<br>- Зелёный – центавриане крайне редко носят зелёный из-за своей природной бледности.<br>- Синий – цвет благородства, принадлежит высшему сословию. Тёмно-синие оттенки означают крайне высокое происхождение и исключительное благородство. В одежде дворян почти всегда есть синие элементы.<br>- Красный – цвет простолюдинов. Гражданская униформа и военная форма солдат – часто красного цвета.<br>- Жёлтый – цвет рабов.<br>- Чёрный (и серый) – избегается почти всеми, кроме стариков. Чёрный цвет ассоциируется со слабостью и смертью, о которых центавриане предпочитают не думать. Многие центавриане будут побаиваться и избегать одетого в чёрное.<br>Украшения: центавриане очень уважают ювелирные изделия, они являются символом статуса, определённые виды украшений могут быть строго предписаны некоторым сословиям или даже семьям. При этом центавриане как правило почти не носят колец (у центавриан крайне развито чувство осязания, длительное ношение колец раздражает пальцы), а когда носят, то предпочитают простые металлические. По этой же причине центавриане избегают серег и других украшений, соприкасающихся с кожей. Зато широко распространены броши, подвески, ожерелья.<br><br><br>Император и Двор<br>Император – высшее лицо в правительстве Центавра, олицетворения одновременно законодательной и исполнительной власти. Слово Императора- высший закон и непререкаемый авторитет в Республике, однако, традиция считает неприличным для носителя столь могучей власти часто непосредственно вмешиваться в управление, за исключением непосредственных дел Двора. Центавр ждёт, что Император будет делегировать управление Республикой членам Двора, Министрам и другим представителям многочисленной администрации и бюрократии, сохраняя позицию арбитра и наблюдателя. Линия Императоров ни разу не прерывалась со времён первого императора Киро, хотя после Первой империи титул редко наследовался по прямой линии. После тысячелетий династических браков право наследования распространяется на все Великие дома и почти полусотню других Благородных домов.<br>В цепочке власти непосредственно за императором стоят члены Двора, высшие чиновники и советники, избираемые Императором лично (но Центарум традиционно имеет право представления кандидатов). В Двор входят:<br>- Прайм-министр – второе лицо в государстве, главный советник и, зачастую, Голос Императора, имеющий право отдавать приказы от его имени.<br>- Великий Канцлер – главный администратор Двора, представляющий Императору и прайм-министру доклады других министров. Теоретически подчиняется только напрямую Императору, что в старые времена часто приводило к смертельной вражде между канцлером и прайм-министром, в настоящее время чаще является посредником между прайм-министром и двором.<br>- Министры – совет администраторов и политиков, отвечающих за различные области жизни Республики. Точный состав и количество могут меняться, Император имеет право упразднять и создавать новые должности.<br>- Круг благородных Домов или Центарум – представители благородных домов при дворе, совет которых имеет право законодательной инициативы и обладает рядом других привилегий. Сейчас на Центавре всего пять Великих домов, но существует также более пяти сотен малых, из которых около трех сотен имеют право выдвинуть своего представителя в Центарум. В любой конкретный момент Центарум включает не более 326 членов – по одному от каждого из пяти Великих домов, остальные от наиболее благородных малых (обычно из тех, что ранее были великими) и один, представляющий все остальные малые дома. Широко распространено мнение, что именно этот несчастный и делает почти всю работу.<br>Великие дома:<br>Фирра, Рефа, Саммин, Цезра, Каранд<br>Пять младших домов Центарума:<br>Джаддо, Кодиро, Варга, Луршан, Ардо, Гессиус"');

select data.set_attribute_value(data.get_object_id('library_document39'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document39'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document39'), data.get_attribute_id('name'), null, jsonb '"Армия Центавра"');
select data.set_attribute_value(data.get_object_id('library_document39'), data.get_attribute_id('document_title'), null, jsonb '"Армия Центавра"');
select data.set_attribute_value(data.get_object_id('library_document39'), data.get_attribute_id('system_library_category'), null, jsonb '"category_universe"');
select data.set_attribute_value(data.get_object_id('library_document39'), data.get_attribute_id('content'), null, jsonb '"Великая Армия Центавра (Grand Centauri Militari)<br>В вооружённых силах Республики Центавр действует единая система званий для флота (Grand Fleet) и наземных сил (Ground Assault). Это позволяет сохранять чёткую структуру подчинения при любых назначениях и соединениях сил. Например, при необходимости командование космическим кораблём может быть отдано капитану штурмового батальона, не приводя к конфликту подчинения. Такая система стала возможной,  помимо прочего, благодаря исключительной подготовке офицеров. Офицеры крайне редко получают свой первый полный патент до сорокалетнего возраста, что означает, что они закончили как минимум две академии, получив как специализацию, так и подготовку широкого профиля. Однако традиционно дворяне получают офицерское звание уже после первой академии, и, таким образом могут вступить в командование подразделением или кораблём в возрасте около двадцати пяти лет. Предполагается, что такие офицеры продолжат своё образование, но на флоте и, реже, в наземных силах всегда можно найти некоторое количество «молодых командиров».<br>Существует три способа попасть в вооружённые силы Республики. Первый, наиболее типичный, пройти обучение в военной академии первого уровня. Так в армию попадает большинство простолюдинов, а дворяне получают первое офицерское звание. Второй – призыв. Технически, каждый центаврианин является частью вооружённых сил, что подразумевается статусом гражданина Республики. Таким образом, при необходимости любой гражданин может быть призван на действительную службу в любой момент. Однако, за всю историю Республики такое случалось всего четыре раза.<br>Третий способ пополнения рядов центаврианской военной машины – подразделения рабов. Любой раб, желающий служить в республиканской армии имеет такое право, и никто не имеет права препятствовать ему. Армия выкупает такого раба у владельца. Традиционно, подразделениям консари или Фиолетовых Поясов поручают самые опасные и неблагодарные задачи, снабжают и вооружают по остаточному принципу, однако зачастую именно отрядами консари командуют самые прославленные офицеры, получающие множество наград. Все консари считаются собственностью Императора. Великим Домам не возбраняется набирать свои рабские контингенты из числа рабов Дома, но они не являются консари.<br>Офицерские звания:<br>- Гранд-Адмирал. Всего в Великой Армии может быть только два Гранд-Адмирала одновременно. Гранд-Адмирал Флота обычно исполняет обязанности Военного Министра при Дворе, в то время как Гранд-Адмирал Наземных несёт службу за двоих, пока его коллега занимается политическими вопросами. Это обеспечивает прекрасную координацию между обеими ветвями вооружённых сил, поскольку фактически ими командует один и тот же центаврианин.<br>- Адмирал – обе ветви вооружённых сил контролируются Адмиралтействами – советом адмиралов, исполняющих функцию штаба при Гранд-Адмирале. В отличие от вооружённых сил других народов, все центаврианские адмиралы имеют одинаковый ранг, поскольку все они принадлежат к Благородным домам. Зачастую назначение в адмиралтейство является подарком от высокопоставленного покровителя или Императора, и нередко оказывается синекурой. В каждом Адмиралтействе состоит около двухсот адмиралов, но едва ли половину из них можно назвать «действительными».<br>- Бригадир – каждый член адмиралтейства имеет право назначить себе персонального помощника и связного с войсками в ранге бригадира. Не стоит и говорить, что как правило бригадир работает в десять раз больше и в двадцать раз эффективнее, чем его адмирал. Именно тяжкий бригадирский труд скрепляет воедино все вооружённые силы. Известен случай, когда Император Бругаро выгнал вызванного для доклада адмирала со словами: «Позовите бригадира этого идиота! Я хочу поговорить с настоящим командиром!».<br>- Бригадный старшина – каждому бригадиру придан штаб из трёх бригадных старшин. Теоретически, они назначаются Адмиралтейством, но на практике бригадирам обычно позволяется самостоятельно продвинуть несколько офицеров более низкого ранга.<br>- Экзалто (Капитан) – высший ранг для офицеров, непосредственно командующих подразделениями. Экзалто назначают руководить флотами или батальонами. Как правило это либо изнеженные дворяне, за которых всю работу делают подчинённые, либо закалённые и крайне-высококвалифицированные ветераны. Успешность действий центаврианской армии находится в прямой зависимости от соотношения первых и вторых.<br> - Кулдари Прайм (командир первого ранга) – непосредственное командование войсками следует той же схеме, что и высшее командование. Таким образом, каждому экзалто придаётся один командир первого ранга в качестве заместителя и начальника штаба.<br>- Максинари (командир второго ранга) – выполняют роль связующего звена между капитанами и их непосредственными подчинёнными. В сложной структуре центаврианского общества максинариев часто выбирают не за военные таланты, а за социальные навыки, поскольку они помогают сглаживать острые углы и противоречия, могущие возникать  из-за сословных и прочих социальных условностей. Так же максинарии часто выполняют обязанности армейских психологов и политических офицеров.<br>- Центуриат (командир третьего ранга) – именно центуриатов большинство военнослужащих низкого ранга зовут «командир». Под руководством экзалто именно центуриат непосредственно руководит подразделениями и командой. На космических кораблях каждая БЧ находится под командованием центуриата. В наземных силах центуриаты командуют подразделениями, эквивалентными роте.<br>- Астутс Центари – особое звание, которое присваивается пилотам истребителей и танковых частей Республики. Каждый астус центари проходит специализированное обучение в особой второй академии. В общем табеле о рангах астус центари стоит ниже командиров, но подчиняются они только капитанам и выше.<br>- Аутуро Маркасус – элита Астус Центари, прошедшие дополнительное обучение и тренировки. Аутуро Маркасус командуют истребительными эскадрилиями и танковыми дивизионами и способны переносить перегрузки, выходящие даже за пределы выносливости обычных центавриан. Специальные эскадрильи, составленные из Астус Центари вселяют страх в сердца любого врага Республики.<br><br>Низшие звания:<br> - Скурат (сержант) – высший ранг, которого можно достичь без обучения в офицерской академии или прямой поддержки представителя благородного дома. Ни один дворянин не служит в ранге скурата более трёх месяцев после производства, незамедлительно получая повышение до центуриата. Скураты служат под непосредственным командованием центуриатов, руководя солдатами.<br>- Центуриан – звание присваивается рядовым бойцам элитных частей спецнзанчения (как правило диверсионным и т. п.) и эквивалентно скурату. В центурианских подразделениях посты скуратов упразднены.<br>- Джурос (рядовой обученный или первого класса) – из джуросов формируют элитные части не специального назначения.<br>- Дентати (рядовой) – обычный призывник или прошедший обучение в военной академии первого уровня простолюдин. Обычно солдат не служит в звании дентати более двух лет, либо переходя в легионы джуросов, либо получая офицерское звание.<br>- Консари – звание, присваиваемое рядовым-рабам, служащим в бригадах Фиолетовых Поясов. В бригадах консари нет скурат, ими непосредственно руководят центуриаты, которые также отвечают за обучение и тренировки консари.<br>Флот Республики<br>Флот Республики состоит из трёх неравных частей:<br>- Флот Прайм содержит самые лучшие корабли, самые преданные команды и самое большое количество оборонительных систем, ведь его задача – защита родного мира Республики. Флот Прайм никогда не разделяется на меньшие боевые группы и ни при каких обстоятельствах не покидает Центавр Прайм.<br>- Пурпурный Флот составлен из личных флотов Великих домов и, в теории, несёт патрульную и оборонительную функцию в многочисленных мирах Республики. Его общая численность примерно в три раза превосходит Флот Прайм, но в истории Республики не было случая, чтобы Пурпурный Флот собрался в одном месте и под единым командованием. В случае необходимости, Пурпурный Флот может быть быстро увеличен почти вдвое за счёт резервов Домов и планетарных гарнизонов. Разумеется, лорды Великих домов используют свои подразделения Пурпурного Флота в личных целях, что нередко становится препятствием для выполнения военных планов Республики.<br>- Золотой Флот – вселяющая страх во врагов республики карающая длань, готовая обрушиться на врагов. Его всесокрушающая мощь вдвое превосходит совокупную силу Пурпурного Флота и разбита на ударные группы. В настоящее время насчитывается четыре ударные группы Золотого Флота:<br>- группа «Ураган» - самая престижная из УГ Золотого Флота, ведь именно ей доверено право первого удара по врагу в случае войны. Группа оснащена для длительных автономных действий за пределами Республики и как правило проводит в родных мирах не более одного месяца в год, патрулируя дальние рубежи зон влияния Центавра, готовая в любой момент обрушиться на противника.<br>- группа «Цести» - так же известная, как Молот Императора, в мирное время базируется на Центавре Прайм, формируя второй эшелон обороны. Во время войны «Цести» направляется в систему, из которой Император и Центарум хотят сделать пример для всей остальной галактики. Специально оснащённая для орбитальных бомбардировок и десантных операций, «Цести» способна стирать с лица галактики целые народы.<br>- группа «Гончая» - флот быстрого реагирования Республики, состоит из скоростных ударных судов без вортекс-генераторов с одним «Примасом» в качестве флагмана и генератора зоны перехода. Группа предназначена для преследования особых целей в пределах галактики, операций класса “догнать и уничтожить”, а также для специальных операций. Группа печально известна безрассудством и самоотверженностью, от её экипажей ждут выполнения приказа любой ценой, даже если это будет означать её гибель. Минимум дважды в истории Республики “Гончая” восстанавливалась с нуля.<br>- группа «Жнец» - ударная группа состоящая исключительно из «Примархов» предназначена для операций в системах с крупными планетарными гарнизонами и значительным гражданским населением. В задачу группы «Жнец» входит подавление сопротивления и обработка захваченных ресурсов, будь то захват рабов или утилизация. Долг капитанов «Жнеца» - методично и беспристрастно выполнить свой долг, не отвлекаясь на этические или моральные вопросы."');

select data.set_attribute_value(data.get_object_id('library_document40'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document40'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document40'), data.get_attribute_id('name'), null, jsonb '"Общие сведения об Синдикате Антареса"');
select data.set_attribute_value(data.get_object_id('library_document40'), data.get_attribute_id('document_title'), null, jsonb '"Общие сведения об Синдикате Антареса"');
select data.set_attribute_value(data.get_object_id('library_document40'), data.get_attribute_id('system_library_category'), null, jsonb '"category_universe"');
select data.set_attribute_value(data.get_object_id('library_document40'), data.get_attribute_id('content'), null, jsonb '"Антаресы – гуманоиды, с голубой кожей и необычными чертами лица. Они достаточно долго живут (200-270 лет) и медленно размножаются, поэтому данная раса немногочисленна. Антаресы очень развитая цивилизация — научно и технически. Большинство их технологий являются самыми передовыми на рынке. Антаресы пачками крадут или перекупают чужих ученых и чужие открытия. <br>Государственное устройство – синдикат. 5 звездных систем Антареса поделены между 36 домами и управляются советом матерей. Каждый дом имеет определенный вес в совете, соответственно численности, влиянию, богатству и количеству сделок Дома. <br>Основные три правящих Дома: <br>Дом Фелли – Звездные системы Антарес 1 и Антарес 5. Специализация дома: вооружение. Дом Фелли производит пушки, флоты, оборудование для военных кораблей, вортекс генераторы. В собственности дома два десятка торговых флотов, образующих единую торговую магистраль от Нарна до Идиллии Иккары, и две звездные системы. Также этот Дом отвечает за оборону синдиката и систем Антареса в целом. <br>Глава дома Мать Элайна, в прошлом посол на Вавилон 5 от Синдиката. <br><br>Дом Бхара – Звездная система Антарес 2. <br>Специализация дома: медицина. Дом занимается научными изысканиями – телепатия, генетика, выбор пола детей, инженерия. Поставляет косметологическую продукцию, лекарства для всех рас и видов галактики, медицинское оборудование. <br>Глава дома Мать Будхи, самая старая женщина среди антаресов, говорят ей более 300 лет. <br><br>Дом Реоваль – Звездная система Антарес 1. <br>Специализация дома: рабы и наемники. В доме обучают любых представителей любой расы чему угодно, этот дом занимается поставкой специалистов высшего класса любого направление от пиара до медицины. Головная планета сплошь застроена учебными заведениями, экспериментальными площадками и кампусами. Дом торгует не просто рабами, а рабами с любым набором умений, самыми высококачественными специалистами. <br>Глава дома Мать Райн, секретарь совета матерей Синдиката Антарес. <br>На данный момент Антаресы торгуют со всей известной галактикой, являются Членами Ассамблеи цивилизаций и имеют опеку над народом дилгар в секторе Антарес 5. <br><br>Справка из архивов. <br><br>Антарес – 3 звездные системы между Земным Альянсом и Республикой Центавр. <br>Государственное устройство – торговый синдикат. Высший орган управления – совет матерей. Строение общества – матриархат. <br>Несмотря на высокий уровень развития и в целом множество свобод, общество антаресов очень жестко ограничено – с самого детства и до смерти Антарес живет подчиняясь условиям и условности. <br>Биология. <br>Антаресов двуногие, прямоходящие, млекопитающие. Ближайший аналог – кошачьи. Система размножения двуполая, живородящие. Беременность длится около двух земных лет. Самки антаресов выделяют феромоны, отпугивающие самцов, и только шесть раз в год во время цикла созревания яйцеклетки феромоны не действуют. Эти дни считаются священными днями размножения. В это время антаресы не работают, занимаясь совокупления и празднествами. Антаресы пригодны к соитию практически с любой известной расой, но детей от подобных союзов не рожают. <br>Иммунная система близка к человеку, но гораздо сильнее. Употребляют в пищу животный и растительный белок, кухня антаресов схожа с азиатской – множество приправ, острая пища. <br>Средняя продолжительность жизни примерно 300 лет. <br>Религия. <br>Каждый Антарес волен верить в любого бога – старые духи лесов, Центаврианские боги, Иисус. Что угодно, это не важно,  потому как мораль Антареса во главе угла ставит сделку. Вся жизнь от рождения и до смерти это череда сделок. Нарушивший сделку наказывается самым жестоким способом. Известен случай когда дом Искра нарушил подписанный с Центавром договор и был целиком отдан советом матерей в вечное рабство дому Реоваль, фактически перестав существовать. И поныне этой фамилией называют опозорившихся антаресов. <br>Внешний вид. <br>Антаресы предпочитают легкую и свободную одежду ярких оттенков. На их планетах преимущественно тропический климат и множество растений, подходящих для окраски тканей. Длинные волосы и вычурные прически - признак богатства и социального статуса. Детей и рабов обривают наголо как в целях гигиены, так и для указания их положения в обществе. <br>Течение жизни <br>Рождение детей происходит по сделке, которая определяет,  в чей дом отдан будет младенец. До 4 лет мать вскармливает его и несет ответственность за его жизнь и здоровье. С 4 лет ребенок определяется в Нижний дом, к другим детям где его обучают, воспитывают и растят специалисты. В 24 года наступает совершеннолетие, антарес получает имя, и обязан отдать долг за 20 лет обучения, тому дому в котором он живет. Кто то идет работать на черную работу, кто то продолжает обучение, но долг его растет. Став специалистом, антарес быстрее рассчитывается и получает право на фамилию. Получивший фамилию имеет право на смену дома. <br>Взрослый антарес имеет ценность тем выше, чем больший доход он может принести дому. Примерно с 200 лет антаресы откладывают средства на специальный похоронный счет. Тот у кого не было такого счета хоронится через общее кремирование, если за его погребение не заплатили родственники. Также по сделке можно продать свое тело после смерти на опыты, например дом Бхара, занимающийся медициной, имеет несколько центров приема тел умерших. <br><br>Устройство дома. <br>Любой дом это социальное, а не физическое устройство. Антаресы немногочисленны и спокойно принимают в дом представителей иных рас, но никогда не допускают их в управление домом. Из-за феромонов эта рама в целом социофобы, предпочитающие жить подальше друг от друга. Поэтому физически жилища раскиданы на большие расстояния и разную высоту. <br>Управление домом осуществляет мать. Она же выбирает преемницу из дочерей. Наследная дочь – титул и статус, не родственная уза. В дочери выбираются умнейшие представительницы дома. Если мать умерла не объявив свою волю – главной становится старшая по возрасту. <br>Самый высокий статус мужчины в доме – постоянный спутник и управляющий территорией дома. <br><br>Территория дома делится на нижний дом – там живут дети, рабы и наказанные. Средний дом там живут работники, не отдавшие долг, или только получившие фамилию. И высший дом – там живут специалисты, ценные сотрудники, мать и ее приближенные. <br>Только имеющий имя и фамилию имеет право на владение имуществом – тсаматикая. Это право считается почетным и важным и часто прибавляется к именованию в официальном документе. <br>Важную роль в социуме антаресов играют рабы. В основном это купленные или взятые в плен представители иных цивилизаций, часто соплеменники антаресы. Множество рабов это проигравшиеся или обнищавшие люди, сдавшиеся в рабство добровольно. Рабы считаются ценной вещью, их принято обучать, и держать в строгости, но без издевательств. Чем более профессиональный специалист раб, тем выше его стоимость.<br>Дом Реоваль занимается обучением рабов и работорговлей. <br><br>Военная система <br>Антаресы достаточно мирный народ и не любят воевать, предпочитая усиливать оборону и маскировку. <br><br>Система званий проста : легионер, трибун, легат, старший легат. <br>Верховное командование осуществляет мать дома. <br>При объявлении войны, верховным командующим становится старшая из матерей в Совете матерей. <br><br>На вооружении антаресов в основном планетарная оборона, корабли разведки, станции наблюдения и слежения. Дом Дайте целенаправленно строит немногочисленные тяжелые крейсера. Дом Фелли отвечает за оборону и вооружение систем Антареса. <br>Среди кораблей антаресов очень много транспортников и кораблей поддержки. Также у антаресов развито пиратство и один из самых обширных черных рынков в галактике. <br><br>Совет матерей <br>Высший орган власти. По сути собрание всех матерей всех домов. Изначально работал по принципу “кто кого переорет” . Со временем трансформировался в выбор решения большинством голосов. В совете нередко используют шантаж, подкуп и другие методы продавливания. Существует негласный но строжайший запрет на убийство других матерей, отсюда развиты нелегальные яды выводящие из строя на некоторое время и нервно-паралитическое оружие."');

select data.set_attribute_value(data.get_object_id('library_document41'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document41'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document41'), data.get_attribute_id('name'), null, jsonb '"Посмертная публикация Матери Элайны"');
select data.set_attribute_value(data.get_object_id('library_document41'), data.get_attribute_id('document_title'), null, jsonb '"Посмертная публикация Матери Элайны"');
select data.set_attribute_value(data.get_object_id('library_document41'), data.get_attribute_id('system_library_category'), null, jsonb '"category_universe"');
select data.set_attribute_value(data.get_object_id('library_document41'), data.get_attribute_id('content'), null, jsonb '"Этот незаконченный текст был найден на столе в ее рабочем кабинете. <br><br>Антарес был мирной системой, затерянной промеж Центавра и Земного Альянса. <br>Мы не имели особенных ресурсов или высоких технологий. Мы просто жили так, как жили тысячелетия до того, как инопланетные цивилизации высадились на Антаресе 1. <br>Охота и рыбалка, торговля и секс, жизнь и смерть – все было подчинено главному в нашей жизни – сделке. Она соблюдалась свято, и за нарушение Матери карали беспощадно. Мы соблюдали законы Матерей, мы плясали на площадях, мы радовались новым дням. Наши помыслы были устремлены к нехитрым радостям – выгодной сделке, большому урожаю, дням совокупления или выборам совета Матерей. Полет на тикае, обучение воинов, новый помет – не было ничего неясного или загадочного в нашем мире. <br>Все изменилось, когда к нам пришли они – центавриане. Они научили нас строить корабли, они показали нам мощь высоких технологий, они построили заводы на наших планетах. Именно они вывели Антаресов в космос. И именно они открыли нам истину – не только в мире Антаресов сделка – высшая ценность. Во всей Галактике высшая ценность – выгода. Мы были в этой сфере как рыбки ббепеу в горном ручье – лучшие, лучшие навсегда. Нет того, что мы не можем продать, найти или обменять на более выгодных условиях. Мы радовались, что нашли свое место – между мирами, там, где свет и тень сходятся, и рождается сумерки – время торговли. Странноватые люди, хитрые и коварные нарны, изнеженные центавры, чопорные минбарцы – все они стали объектами новых сделок. Совет Матерей постановил – мы торгуем с любым, мы берем все технологии, мы покупаем любое знание. Аббаи, бракири, драззи, и даже дилгары – деньги не пахнут, все, что принесет выгоду лично тебе и твоему дому – законно и морально. <br>И вновь все изменилось для нас. Тогда, на станции Вавилон-5. Будущее соединилось с прошлым, наложилось и перемешалось. И мы перестали понимать, где свет и где тень, мы не отличили сумерки от полуденного солнца. Мы заплутали, как дети несущие плоды к обеденному столу из сада тысячи растений. <br>Только война решит все? <br>Понимание не требуется? <br>Бери свое, пока можешь? <br>Мир во всем мире? <br>Все эти лозунги не имели к нам ни малейшего отношения. Мы поняли - прежде чем воевать нам необходимо определиться, кто наш враг – Старшие расы, давшие нам знания? Неизвестные пришедшие из глубин космоса? Или те, чей свет не в силах затмить никто?"');

select data.set_attribute_value(data.get_object_id('library_document42'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document42'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document42'), data.get_attribute_id('name'), null, jsonb '"Трагедия Тучанка"');
select data.set_attribute_value(data.get_object_id('library_document42'), data.get_attribute_id('document_title'), null, jsonb '"Трагедия Тучанка"');
select data.set_attribute_value(data.get_object_id('library_document42'), data.get_attribute_id('system_library_category'), null, jsonb '"category_universe"');
select data.set_attribute_value(data.get_object_id('library_document42'), data.get_attribute_id('content'), null, jsonb '"(Справка из STELLAR-COM<br>Тучанки - Гуманоиды.<br>У тучанкью очень интенсивный метаболизм, из-за чего они выглядят очень усталыми. Половые органы невыраженные. Цвет кожи - от яркого канареечно-желтого до темно-коричневого. Тучанкью имеют брюшную сумку.<br>Тучанкью не имеют глаз, вместо этого они увенчаны своеобразным гребнем из игл ///. Язык тучанкью имеет форму трубки.//<br><br>Psi Ability Есть. В причудливой форме слышат \"Песню\" (смесь психометрии и телепатии). Тучанкью не спят. Фактически, лишившийся сознания тучанкью становится буйно помешанным. Отсутствие памяти (или \"Песни Сознания\") в течении любого промежутка времени делает тучанкью ментально нестабильным, и, как следствие, он теряет свое чувство социальной ответственности//.<br>Culture Костюмы тучанкью - запутанные сооружения из меха, перьев, кожи, чешуи и костей. Из многих ритуалов тучанка достойны упоминания Ритуал Прибытия, исполняемый всякий раз, //// )<br><br>Тучанка была системой входящей в Лигу Неприсоединившихся Миров.<br><br>12 сентября 2242 года стало днем смерти Тучанкью. Ночью плазменные орудия превратили ее столицу, Лоталиар, в 18-километровое стеклянное поле. Через два дня на поверхность планеты высадились нарны. Тучанкью были порабощены и принуждены работать на нарнских фабриках по производству боеприпасов, совершенно разрушивших своими отходами экосистему Тучанкью.<br><br>\"До прихода нарнов, ни один из нас не пребывал вне Родины, ибо каждый унаследовал Песню своих предков во всей ее полноте, и всю эту страну, через которую прошла Песня. Вирши гражданина были его правами на нашу землю. С появлением нарнов, Песни сменились на грохот войны и лязг машин.\"<br><br>Также именно на Тучанке Режим Нарна разместил Дилгар, сделав их надсмотрщиками за Тучанками и \"элитой\" планеты. При этом из-за неблагоприятной экологической обстановки и те и другие мрут как мухи.<br><br>Лига неоднократно требовала от Режима Нарна освободить систему, но что Режим Нарна обычно отвечал в духе \"Все законно у нас есть разрешение\". Конфликт до сих пор не решен."');

select data.set_attribute_value(data.get_object_id('library_document43'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document43'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document43'), data.get_attribute_id('name'), null, jsonb '"Приказ о продлении режима чрезвычайного положения"');
select data.set_attribute_value(data.get_object_id('library_document43'), data.get_attribute_id('document_title'), null, jsonb '"Приказ о продлении режима чрезвычайного положения"');
select data.set_attribute_value(data.get_object_id('library_document43'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_babylon"');
select data.set_attribute_value(data.get_object_id('library_document43'), data.get_attribute_id('content'), null, jsonb '"Приказ Военного губернатора директории Эпсилон капитана Джона Шерридана<br><br>В соответствии со ст. 89 Конституции ЗА с 8-00 31.12.2258 г. до 8-00 1.01.2259 г. в Директории Вавилон сохраняется режим чрезвычайного положения. Приказываю службе безопасности сохранять повышенную боеготовность. Продолжить патрулирование сектора эскадрильей станции «Вавилон-5».<br><br>Джон Шерридан<br>Военный губернатор директории Эпсилон<br>31 декабря 2258 г.<br>Станция Вавилон-5. Планета Эпсилон-3, Система Эпсилон, Земной Альянс."');

select data.set_attribute_value(data.get_object_id('library_document44'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document44'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document44'), data.get_attribute_id('name'), null, jsonb '"Приказ фильтрационным центрам Пси Корпуса"');
select data.set_attribute_value(data.get_object_id('library_document44'), data.get_attribute_id('document_title'), null, jsonb '"Приказ фильтрационным центрам Пси Корпуса"');
select data.set_attribute_value(data.get_object_id('library_document44'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document44'), data.get_attribute_id('content'), null, jsonb '"В соответствии с актом Сантьяго-Кербера-Бетте приказываю:<br>1) Начать вывозку телепатов Юкаса в фильтрационные центры, производить под надзором комиссии Сената по метасенсорике, с соблюдением прав личности.<br>2) Учредить специальное присутствие суда в составе трибунала Пси Корпуса и сенатской комиссии по метасенсорике.<br>3) Следственные действия провести силами Пси Надзора, при непосредственном контроле комиссии по метасенсорики.<br>4) Рассмотреть в индивидуальном порядке дела телепатов «анклава Юкас» специальным присутствием суда, с целью выявить зачинщиков, руководителей мятежа, судить их в соответствии с УК ЗА.<br>5) Прочих участников «анклава Юкас» амнистировать, в соответствии с актом Сантьяго-Кербера-Бетте принятым IV колониальным конгрессом.<br>Председатель сенатского комитета по метасенсорике Президент Сантьяго<br>И.О. Директора Корпус ᴪ Теодор Бетте"');

select data.set_attribute_value(data.get_object_id('library_document45'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document45'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document45'), data.get_attribute_id('name'), null, jsonb '"Введение военного положения на Юкосе"');
select data.set_attribute_value(data.get_object_id('library_document45'), data.get_attribute_id('document_title'), null, jsonb '"Введение военного положения на Юкосе"');
select data.set_attribute_value(data.get_object_id('library_document45'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document45'), data.get_attribute_id('content'), null, jsonb '"Капитан Гонсалес, Военный губернатор Вегоса<br>31.12.2258г.<br>Приказ<br>Я, военный губернатор Вегоса, в связи с антиконституционными выступлениями в директории Юкас, объявляю в директории Юкас военное положение. Всем законопослушным гражданам приказываю, оставаться в своих домах и не покидать их без крайней необходимости.<br><br>Военный губернатор Вегоса капитан Гонсалес<br>Утверждено<br>Президент ЗА Мари Кейн"');

select data.set_attribute_value(data.get_object_id('library_document46'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document46'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document46'), data.get_attribute_id('name'), null, jsonb '"Приказ о выводе сил пси-корпуса"');
select data.set_attribute_value(data.get_object_id('library_document46'), data.get_attribute_id('document_title'), null, jsonb '"Приказ о выводе сил пси-корпуса"');
select data.set_attribute_value(data.get_object_id('library_document46'), data.get_attribute_id('system_library_category'), null, jsonb '"category_laws_ea"');
select data.set_attribute_value(data.get_object_id('library_document46'), data.get_attribute_id('content'), null, jsonb '"Вывести силы пси корпуса с Юкаса в сопредельные системы<br>Теодор Бетте"');

select data.set_attribute_value(data.get_object_id('library_document47'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('library_document47'), data.get_attribute_id('type'), null, jsonb '"document"');
select data.set_attribute_value(data.get_object_id('library_document47'), data.get_attribute_id('name'), null, jsonb '"Обращение Хенгиста Кербера к Анклаву Телепатов Юкас"');
select data.set_attribute_value(data.get_object_id('library_document47'), data.get_attribute_id('document_title'), null, jsonb '"Обращение Хенгиста Кербера к Анклаву Телепатов Юкас"');
select data.set_attribute_value(data.get_object_id('library_document47'), data.get_attribute_id('system_library_category'), null, jsonb '"category_universe"');
select data.set_attribute_value(data.get_object_id('library_document47'), data.get_attribute_id('content'), null, jsonb '"Братья и сестры!<br><br>Мне не хватает слов. Я не нахожу мыслеформ, чтобы сделать понятными вам мои чувства.<br>В долгом и сложном процессе переговоров мной и представителями Земного Альянса было выработано, как мне казалось, решение - ни плохое, ни хорошее, но единственное. От имени Анклава Телепатов Юкас я заключил с Правительством ЗА договоренности, призванные вернуть диалог в мирное русло. Жизни моих сограждан казались мне величайшей ценностью, и я стремился всеми силами избежать кровопролития.<br><br>Я ошибся. И за свою ошибку я отвечу перед строгим, но справедливым судом народа Юкаса.<br><br>Народ Юкаса не принял моего решения. Народ Юкаса взял в руки меч, чтобы отстоять свои идеалы, свои права. Свои плоть и кровь. Народ Юкаса платит за мои ошибки. Если среди моего народа осталось хоть капля веры в меня и порученную мне задачу, я говорю от имени Анклава Юкаса следующее:<br><br>Я, Хегист Кербер, заявляю:<br>От имени Анклава Юкас я обратился к Империи Ворлон с просьбой о помощи - бойня в системе Юкас должна быть остановлена. Следующим моим шагом будет обращение к Консультативному Совету Галактической Ассамблеи с просьбой о признании Анклава Телепатов Юкас самостоятельной цивилизацией, осознающей себя новой общностью и готовой к межцивилизационному диалогу.<br><br>Братья и сестры! Я призываю вас к битве до конца! Наше дело - правое! Победа будет за нами!"');

select data.set_attribute_value(data.get_object_id('personal_library'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_library'), data.get_attribute_id('type'), null, jsonb '"personal_library"');
select data.set_attribute_value(data.get_object_id('personal_library'), data.get_attribute_id('name'), null, jsonb '"Личные документы"');
select data.set_attribute_value(data.get_object_id('personal_library'), data.get_attribute_id('system_meta'), data.get_object_id('persons'), jsonb 'true');

select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person15'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person18'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person45'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('system_personal_document'), data.get_object_id('person7'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('document_title'), null, jsonb '"Вакцина от Драфы"');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('name'), null, jsonb '"Вакцина от Драфы"');
select data.set_attribute_value(data.get_object_id('personal_document1'), data.get_attribute_id('content'), null, jsonb '"<img src=\"http://b5.langed.org/img/1.jpg\"><br>Вакцина от Драфы. Создатели – Идилия Икарры. Уничтожает возбудителя болезни в организме. Эффективен для всех рас, способных болеть Драффой. Имеет ряд побочных эффектов: головокружение, состояние эйфории."');

select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_personal_document'), data.get_object_id('person7'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_personal_document'), data.get_object_id('person40'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('system_personal_document'), data.get_object_id('person45'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('document_title'), null, jsonb '"Блокиратор Чумы"');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('name'), null, jsonb '"Блокиратор Чумы"');
select data.set_attribute_value(data.get_object_id('personal_document2'), data.get_attribute_id('content'), null, jsonb '"<img src=\"http://b5.langed.org/img/2.jpg\"><br>Разработано учеными Республики Центавр. Снимает симптомы болезни, убирает заразность. Течение болезни незначительно замедляется. Действует на долговременную форму болезни. Воздействие препарата на быстротечную форму не изучено. Побочные эффекты: легкая эйфория, головокружение в течение получаса."');

select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('system_personal_document'), data.get_object_id('person18'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('system_personal_document'), data.get_object_id('person45'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('document_title'), null, jsonb '"Нейро-индуктор"');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('name'), null, jsonb '"Нейро-индуктор"');
select data.set_attribute_value(data.get_object_id('personal_document3'), data.get_attribute_id('content'), null, jsonb '"<img src=\"http://b5.langed.org/img/3.jpg\"><br>После применения повышает значение П-рейтинга на 4 (не больше П 12). Работает даже на людей без пси-способностей (с П-рейтингом 0). Имеет очень долгие и неприятные последствия, в частности – депрессию, ярость, токсическое воздействие и головную боль."');

select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('system_personal_document'), data.get_object_id('person23'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('system_personal_document'), data.get_object_id('person24'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('document_title'), null, jsonb '"Традиции Анла-Шок"');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('name'), null, jsonb '"Традиции Анла-Шок"');
select data.set_attribute_value(data.get_object_id('personal_document4'), data.get_attribute_id('content'), null, jsonb '"«В конце концов, не броня или навык владения оружием спасёт вас от пули снайпера или клешни чужого. Если вы выучите только один урок, то пусть он будет таким: лучшая защита – скрытность. Если враг не знает о вашем существовании, он не будет пытаться его прервать»<br>-- Дурхан, Туза’Нор на Минбаре –<br><br>Первое правило рейнджеров – «Будь невидим»<br>Агенты рейнджеров тщательно маскируются. Все корабли рейнджеров используют стелс-технологии, и трассы их невозможно отследить. За тысячу лет рейнджеры разработали собственный язык на основе древнего минбарского языка, и собственные коды шифрования сигналов. Рейнджеры тренируются в искусстве быть «живыми призраками».<br>Для своих целей рейнджеры выполняют две главные задачи. Первая – слежка. Их корабли следят за передвижениями всех остальных; их агенты стараются узнать как можно больше о действиях различных правительств и организаций. Не зная противника, невозможно спланировать защиту – так считают в ордене.<br>Вторая задача – противостоять действиям Врага. Враг - это и непосредственно Тень, и различные его помощники, а также пираты, террористы, расы, чрезмерно увлекшиеся гонкой вооружений.<br>Эти особенности рейнджеров отражены в их девизе, который высечен на каждом корабле Анла’Шок и на оборотной стороне каждого их значка: «Tuvor, Tunalla, Veshii», что переводится как «Скрытность, изучение, влияние»<br><br>Tunalla (изучение)<br>Важным направлением обучения рейнджеров является работа с информацией, способы передачи и шифрования сообщений, изучение языков и технологий.<br>Первое правило Tunalla: «Задай верный вопрос»<br>Полная цитата из слов Валена звучит так: «Задав один верный вопрос, можно узнать больше, чем после тысячи ошибочных»<br>В процессе тренировок сетч задаёт ученикам выведать у него какую-либо информацию. Для этого ученики применяют протоколы допроса. Обучение заканчивается тогда, когда даже во время обычных разговоров ученики начинают придерживаться протокола.<br>Вален сказал: «Никогда не игнорируй ответ даже на неверный вопрос» Таким образом, он дал понять, что всякая информация важна, и не бывает «неправильных» вопросов, пока тот, кто слушает, может понять то, что действительно сказано.<br>Рейнджеров учат выяснять информацию косвенно, не задавать прямые вопросы, и не выдавать своего интереса к какой-либо теме, оставляя след. Возможны ситуации, в которых разные агенты должны координировать свои действия, и получать части информации об одной теме.<br>Tuvor (скрытность)<br>Скрытность – наиболее важное умение рейнджера. Со временем Анла’Шок поняли, что обнаружение Врагом действий против него приводит к ускорению продвижения Тени. Если бы Анла’Шок объявили, что нашли базу Врага, тот бы немедленно выступил, и жизнь в галактике была бы уничтожена.<br>В храме Анла’Шок обучаются молчанию и маскировке.<br>Veshii (влияние)<br>Вален учил: «Никогда не действуй, когда нужно ждать»<br>Величайший навык рейнджера – это действовать, не вмешиваясь в жизнь других. Они годами живут среди обычных людей, ничем не выдавая себя. Но когда ситуация требует, рейнджер должен оказать влияние на ход событий.<br>Вален учил: «Никогда не жди, когда нужно действовать»<br>Рейнджеры обучаются боевым искусствам. Денн’бок – оружие рейнджера, им он владеет в совершенстве. Каждый рейнджер носит свой денн’бок, сделанный специально для него, и переданный ему мастером боя.<br>Однако, вмешательство не всегда равно битве. Рейнджеры также учатся другим способам воздействия – от саботажа, до перехвата приказов.<br>Еще Вален говорил: «Не стучи два раза». Анла’Шок трактует эти слова так: не применяй силы больше, чем нужно. Разработана даже специальная техника – «идеальный удар», которого достаточно для того, чтобы обездвижить противника.<br>«Знай, что битва - тоже послание»<br>Вален учил, что необязательно выиграть сражение, чтобы победить. Информация, полученная в неудачной битве, также служит победе в войне.<br>Вален сказал: «Мы защитники галактики, а не палачи. Мы убиваем лишь для спасения жизни. Тому, кто не понимает этого, нет места на моей стороне»<br>Убийство запрещено рейнджерам, кроме самых чрезвычайных ситуаций.<br><br>Как стать рейнджером<br>Обычно в рейнджеры можно попасть по рекомендации уже действующего рейнджера.<br>Все рейнджеры и ученики считаются равными. Чинопочитание не приветствуется. Считается, что это мешает решительным действиям.<br><br>Испытание пламени<br>Перед вступлением в рейнджеры проводится ритуал: кандидату предлагается провести ночь в святилище, при этом с собой нужно взять только самую ценную вещь. В ходе ритуала кандидат должен эту вещь сжечь. Если он отказывается – испытание не пройдено. Так ученик должен понять, что нельзя иметь ничего из прошлого, что может повлиять на его дальнейшую жизнь. А учителя видят, что или кто является действительно важным для кандидата.<br>Для Анла’Шок важен только путь.<br>Но даже тому, кто прошёл испытание, предоставляется возможность уйти из храма навсегда. Ему предлагают возможность улететь в любой уголок галактики.<br>Тот, кто решил остаться, получает полную и правдивую информацию об ордене, Великой Войне, истории Анла’Шок. Он может задать любые вопросы, и получить ответы. В свою очередь, от него ожидают такой же честности и открытости перед орденом.<br><br>Три знака<br>После испытания огня для рейнджера наступают самые тяжёлые девять дней в его жизни. Кандидат должен пройти три теста: на мудрость, выносливость и этику.<br>Первый знак – Мрак. Кандидата с завязанными глазами помещают в лабиринт, высеченный в кристаллической скале под храмом Туза’Нор. У кандидата есть небольшой запас еды и воды. Выход из лабиринта открывается на третий день, и кандидат должен сам найти его.<br>Второй знак – Звезда. Кандидат на истребителе должен пройти полосу препятствий на окраине звёздной системы. В конце пути истребитель «ломается». Кандидат должен сохранять спокойствие и ждать помощи. Так он понимает, что будет чувствовать в конце пути, и что не всякая смерть имеет высокий смысл. Если кандидат не проходит испытание, его не исключают, но делают «отметку» об этом.<br>Третий знак – Огонь. Это испытание проходят далеко не все кандидаты. Кандидат, вооруженный денн’боком и станнером, должен пройти через двор храма, заполненный другими Анла’Шок. Ему запрещено говорить и драться, что бы ни случилось. Всем Анла’Шок отдан приказ: кандидат не должен пройти ни при каких обстоятельствах.<br>Если кандидат проходит все три испытания, ему не даётся в будущем никаких преимуществ. Все Анла’Шок равны друг другу. Цель испытаний – познать себя, и победить себя самого.<br>В последнюю ночь все рейнджеры собираются на посадочной площадке для церемонии вступления в орден. Там, под звёздами, в свете храма, они произносят клятву рейнджеров. Каждый раз, когда кандидат произносит «мы – рейнджеры», все остальные произносят эти слова вместе с ним.<br>После этого наступает черёд обучения рейнджера.<br><br>Уроки Анла’Шок<br>Урок понимания. Это один из самых первых курсов. Сообщение переводится на какой-либо язык, и дополнительно шифруется. Ученик должен прочесть его, и ответить тем же способом.<br>Урок силы. Это курс боевой подготовки на разных типах оружия, а также курс тактики. Ученики называют место подготовки «Дом боли» )))<br>Прятки. Это уроки по маскировке, а также задания найти что-то скрытое, в том числе и в других мирах и в космосе.<br>Особенности подготовки рейнджеров: ранний подъем, физические упражнения, полное отсутствие какого–либо обезличивания и подавления индивидуальности, а также бессмысленной тяжелой работы. Никто не проверяет, когда новобранцы ложатся спать, поскольку считается, что рейнджер должен сам познать, что такое дисциплина.<br><br>Окончание обучения<br>Нет особой церемонии окончания, рейнджер просто получает значок. Однако, этот значок он должен сделать сам.<br>Брошь сделана из трёх элементов. Золото ученик должен добыть собственными руками в южной шахте. Серебро он должен купить службой на одной из лун. Камень – Исил’За – можно найти только в храмах касты жрецов. Его невозможно купить или выпросить, поэтому ученик должен его украсть. Позже орден выплачивает хозяину камня компенсацию. Дальше ученик должен просить кого-то из наставников о помощи, чтобы сделать брошь.<br>Брошь изготавливается в белом горячем пламени. Затем она охлаждается в трех сосудах: первый - с древней святой водой, следующий - с кровью наставника, и последний - с кровью ученика.<br><br>Организационная структура<br>Рейнджеры, в основном, децентрализованы.<br>Их наставники (сетчи) в Туза’Норе были объединены в группу под названием Мири’За. Однако никто из них никогда не говорит от лица ордена.<br>Когда Анла’Шок должны действовать группой, вначале проводится «церемония круга». Каждый рейнджер говорит что-либо о себе, и в результате образуется неофициальная иерархия и специализация.<br>Также есть ранг Анар’Зе, что значит «новая звезда». Так называют только что принесшего клятву рейнджера, не надевшего ещё значок.<br><br>Анекдот про лампочку<br>- Сколько рейнджеров нужно, чтобы вкрутить лампочку?<br>- Один"');

select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('system_personal_document'), data.get_object_id('person17'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('system_personal_document'), data.get_object_id('person16'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('document_title'), null, jsonb '"Доклад комиссии по расследованию инцидента в системе Кары"');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('name'), null, jsonb '"Доклад комиссии по расследованию инцидента в системе Кары"');
select data.set_attribute_value(data.get_object_id('personal_document5'), data.get_attribute_id('content'), null, jsonb '"Доклад комиссии по расследованию инцидента в системе Кара<br>После инцидента в системе Кара, мне, Неруну из касты воинов минбари, предводителю клана Звездных Всадников, находящемуся в статусе члена Консультативного Совета Ассамблеи, Консультативным Советом было поручено возглавить комиссию по расследованию инцидента.<br>В ходе расследования была установлены следующие факты:<br>После того как поступило сообщение о выходе из строя одного из маяков приводной пары в системе Кара, член совета директоров земной корпорации IPX Адриан Зорг предложил использовать корабль-первопроходец класса Кортес, именуемый Коперник для восстановления связи с системой. Уникальная технология корабля позволяла использовать его в качестве маяка, а также для связи из системы Кара с Вавилоном 5.<br>После прибытия в систему Кара Коперник вышел на связь. В рапорте говорилось, что некий корабль неизвестной цивилизации предположительно сверхтяжелого класса, предположительно с органической оболочкой, формирует устойчивую воронку гиперперехода, одновременно направляя туда сигнал неизвестного типа. Предположительно именно этот сигнал и заглушал местный маяк приводной пары. С одобрения Консультативного совета Коперник атаковал неизвестный корабль с помощью ксеноартефакта, предположительно Иккарианского происхождения. Ксеноартефакт был внедрен в систему дальней связи корабля, и, по сути являлся модулятором тахионного сигнала.<br>Импульс тахионных антенн дальней связи Коперника уничтожил корабль неизвестной цивилизации предположительно сверхтяжелого класса, а также экипаж на 6ти крейсерах дилгар. Сами крейсера Дилгар не пострадали.<br>Наша комиссия пришла к выводу, что артефакт оказывает деструктивное воздействие на любую органику.<br>После удачного выстрела Коперника и уничтожения неизвестного корабля оставшиеся крейсера дилгар, находившиеся в составе флота атаковавшего систему Кара, уничтожили Коперник. Погиб весь экипаж, за исключением капитана корабля.<br>В архивах одного из крейсеров дилгар, была найдена карта следования дилгарского флота. Флот шёл из системы Паркма, прошёл через систему Маркаб, далее через систему Фарамат прибыл в систему Кара. После анализа боевых приказов, найденного на том же крейсере, с вероятностью в 90% можно утверждать, что флотом командовал бывший начальник штаба Диктатуры Мастер Войны ДжаРот, приказы он получал от Диктатора ТуХан. Они входят в число значимых фигур из народа дилгар, местонахождение которых сейчас неустановлено.<br>Ксеноартефакт после разрешения конфликта так и не был найден.<br>Исходя из вышесказанного можно предположить что агрессия со стороны дилгар, а именно их части не попавшей под опеку, может повториться в будущем. Также проявила себя некая ранее неизвестная раса цели и мотивы которой не понятны для Ассамблеи.<br>Резюме и предложения комиссии для ассамблеи:<br>1. Необходимо провести расследование: куда исчезла руководящая верхушка дилгар.<br>2. Необходимо найти как можно больше сведений о неизвестной расе. Поскольку её действия носили враждебный характер, следующий контакт следует произвести с максимальной осторожностью и быть готовыми к военным действиям.<br>3. Пригласить на заседание КС, в качестве свидетеля, бывшего капитана корабля Коперник, второго помощника станции Вавилон 5, Николая Сибирского. Возможно, есть детали, которые остались нам неизвестными."');

select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('system_personal_document'), data.get_object_id('person17'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('document_title'), null, jsonb '"Доклад председателя комитета по опеке Эр’Шаат"');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('name'), null, jsonb '"Доклад председателя комитета по опеке Эр’Шаат"');
select data.set_attribute_value(data.get_object_id('personal_document6'), data.get_attribute_id('content'), null, jsonb '"Доклад председателя комитета по опеке Эр Шаат<br>Полгода, достаточный срок, чтобы подвести некоторые итоги наших действий по переселению дилгар. Напомню некоторые цифры.<br>Всего было перевезено порядка 1 700 000 000  дилгар<br>По распределению комитета опеки Генеральной ассамблеи: <br>Синдикат Антарес  готов был принять 500 000 000 на антарес 5<br>Режим Нарна 100 000 000 на Тучанк<br>Федерация Минбари 100 000 на свои планеты в специальные монастыри<br><br>По частным договоренностям с правительством Диктатуры Дилгар, минуя Ассамблею <br>Драззи, совместно с Антаресом - 500 000 000 в систему Антарес - 5<br>50 000 000 к Драззи, в систему Фендомир<br>Центавр совместно с неизвестным жертвователем 100 000 000 в систему Брикарн<br>Минбари совместно с WU 50 000 000 на планетоид LV-426<br>полагаем что порядка 400 000 000 дилгар погибли в результате плохихи условий перевозки или их не успели вывезти с Омелии.<br><br>Ассамблеей и ее членами перечислено 12 250 000 000 влияния на всю операцию,  частными жертвователями еще минимум 7 000 000 000.<br>Колоссальные цифры и масштабная операция, которая потребовала усилий многих рас. В течение полугода удалось перевезти практически 100% от указанного числа дилгар.<br> <br>После инцидента в системе Кара Консультативный Совет принял решение проинспектировать территории под опекой, я как председатель комитета по опеке посетила миры, на территории которых сейчас проживают дилгары.  <br>Цель  - проверить как выполняются условия опеки разными цивилизациями. <br>Вторая цель комиссии, выяснить, откуда могли появиться дилгары, участвовавшие в атаке на систему Кара.<br>Под опекой Федерации минбари, а точнее касты мастеров, которые обеспечивают проживание и занятость дилгар , на данный момент 99 487. Дилгар, приближенных к Диктатору в наших мирах не было, за исключением военачальника ДжаДур, которая до сих пор возглавляет собственную лабораторию под контролем Клана Звездных Всадников.<br>Астероид LV- 426  не отвечает на запросы. Миссия Вейланд-Ютани на этом астероиде тоже не выходит на связь. Посетить астероид не удалось.<br>Дилгары, перевезенные Режимом Нарна на Тучанк, проживают в ужасных условиях, непосильный труд на небезопасных предприятиях, конкуренция с коренным населением Тучанка, эпидемии и высокая смертность, за полгода потеряно уже более 5 000 000 особей. Режим Нарна скрупулезно ведет учет населения, и дилгары с Тучанка не могли участвовать в инциденте на Каре. <br>Дилгары, переданные под опеку Драззи содержатся в удовлетворительных условиях, хотя и используются в качестве оппонента для военных учений и тренировочных боев. Наблюдается небольшая  естественная убыль населения.<br>Дилгары под опекой Синдиката Антареса. Нам известно что после инцидента на Каре, губернатор Кары, отдал приказ об атаке системы Антарес-5 с целью уничтожения. Мы побывали на поверхности планеты, Отчет о количестве погибших дилгар, предоставленный Антаресом, не отражает действительности по нашим оценкам.<br>Дилгары, переданные под опеку Республики Центавр, содержатся в хороших условиях, но вызывает сомнения их статус рабов дома Цезра. Несмотря на сытую и спокойную жизнь, очень велик процент самоубийств. Все потери опекаемых учтены, разночтений не обнаружено.<br><br>Также дилгары были замечены в междоусобных конфликтах между домами Фирра и Саммин, Республики Центавр. По нашим оценкам численность воинских формирований дилгар на Центавре, составляет от 800 000 до 1200 000 существ. причем они не из числа дилгар, находящихся под опекой дома Цезра. Данное число подозрительно точно попадает в промежуток “потерь” Дилгар на Антарес 5, якобы понесенных во время атаки торгового флота Бракири. Комиссия полагает что Синдикат Антареса торгует услугами подопечных, чем нарушает условия опеки.<br><br>Довожу до сведения уважаемых членов Консультативного Совета, что во время операции по вывозу дилгар к местам опеки, правящая элита дилгар ( оценочно 3 000 представителей), не была обнаружена и не участвовала в операции по спасению. Кроме того вместе с элитой могли пропасть и другие представители народа, по нашей оценке от 200 000 до 2 000 000 особей. Эти дилгары могли быть причастны к организации инцидента в системе Кара.  В системе Кара, в ходе боевых действий, было уничтожено приблизительно 26 800 дилгар, которые составляли экипаж, 10 крейсеров, атаковавших систему.<br><br>Хочу заметить комитету, что согласно главе 10 пунктам 42-45 Кодекса Генеральной ассамблеи опеке подлежит не раса, как таковая, а территории, которые она занимает. В случае с дилгарами, их миры в скором времени стали бы непригодными для жизни и комитет по опеке расселил их по кусочкам, вместо того чтобы совместными усилиями помочь найти им новые системы.<br><br>Частные меры<br>1. Отправить уполномоченного представителя комитета по опеке на астероид  LV-426, на который было перевезено 50 000 000 дилгар. Выяснить п текущую ситуацию на планетоиде.<br>2. Провести расследование на Антарес-5 на предмет использования услугами подопечных в качестве наемной военной силы, что нарушает условия опеки. В случае подтверждения данных, отстранить от опеки.<br>3. Поднять вопрос о перераспределении подопечных дилгар, в виду невозможности обеспечить должные условия, согласно Кодексу Ассамблеи.<br><br>Общие меры:<br>1. Вопрос о снятии опеки с народа дилгар."');

select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('system_personal_document'), data.get_object_id('person23'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('system_personal_document'), data.get_object_id('person24'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('document_title'), null, jsonb '"Переговоры"');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('name'), null, jsonb '"Переговоры"');
select data.set_attribute_value(data.get_object_id('personal_document7'), data.get_attribute_id('content'), null, jsonb '"- 731 ц. от П.В./ 2.28. -<br>Здравствуй, Арденн.<br>Новости плохие: Калейн сообщил, что подкрепления от народа Минбара, обещанного нам Валеном, не будет.<br>Я в отчаянии. Нас осталось мало, а те, что остались, стары и усталы. Усталы от насмешек и пренебрежения, которые оказывают нам лидеры народа Минбара.  Пророчество Валена исполняется, и рейнджеры вступят в бой. Но победы нам не видать. Мы погибнем в огне, пожирающем все миры.<br>«Анла’Шок восстанут», - сказал Вален. Но никто не понимает, что пути пророчества лежат на путях минбари. Все забыли войну, которая закончилась тысячу лет назад; и сколько сил было вложено в победу над Врагом.<br>Я могу сказать лишь только то, что я верю. Ничего, кроме веры, у меня нет.<br><br>- 731 ц. от П.В./2.34. –<br>Мое почтение, Ленонн Анла’Шок На.<br>Я чувствую твою печаль, и разделяю её. Могу лишь напомнить, что мы ещё живы, и потому не можем оставить свою службу.<br>Я получаю доклады от тех немногих братьев, что ещё с нами. По большей части, это новости с Нарна, Центавра, некоторых малых миров. Недавно мы начали получать расшифровки сообщений расы, которая называет себя «земляне». Содержание их внушает тревогу, так как состоит в основном из переговоров военных флотов. Внешне напоминающие минбарцев, «земляне» любят и умеют воевать. Однако силы их невелики; количество кораблей и их мощность сильно уступают минбарским. Но нельзя допустить их стычек с малыми расами, потому что это может сыграть на руку Врагу.<br>Рекомендую проведение глубокой разведки силами касты воинов.<br><br>- 731 ц. от П.В./2.36. -<br>Приветствую тебя, Арденн.<br>После моей беседы с представителями трех каст, на которой я настоял, как Анла’Шок На, я понял, что каста воинов не собирается помогать в деле, для которого была создана. Слово Валена – ничто для их лидеров. Неверие и гордыня, вот что погубит воинов Минбара. Потому что нельзя быть воином без веры, и нельзя быть воином без уважения к другим кастам.<br>Я не воин. Никто из нас не считает себя отважным воителем. Мы только хранители и стражи. Я всегда думал, что когда придет час, и нам откроется место и время начала войны, весь Минбар встанет, чтобы защитить Вселенную от Врага по слову Валена.<br>Но этого не будет; лишь Дукхат поддержал Анла’Шок. Причина этого мне неизвестна; но уже в этом лежит надежда. Возможно, последняя надежда для меня.<br><br>- 731 ц. от П.В./2.37. –<br>Мое почтение, Ленонн Анла’Шок На.<br>Горе, охватившее народ Минбара, необъятно. Дукхат был опорой для нас всех.<br>Удар был нанесен «землянами» с борта крейсера «Прометей», и я постараюсь выяснить, кто отдавал приказы, и чем они руководствовались. Ведь минбарские корабли не проявляли никакой агрессии к земным. Мы знаем, что агенты Врага не дремлют, но могли ли они обратить внимание на столь молодую расу?<br>Возможно, «земляне» обладают особенностями, которыми угрожают Врагу. В этом случае, их уничтожение станет роковым в будущей войне.<br>Мне жаль, что каста воинов глуха к пророчеству. Каста жрецов также ослепла с гибелью Дукхата. К кому теперь мы можем обратиться? Возможно, каста рабочих выступит против истребления.<br><br>- 731 ц. от П.В./2.40. -<br>Легкого пути, Арденн.<br>Ты знаешь, что я доверяю тебе и твоим словам. Подумав, я готов согласиться с твоими выводами. Война перешла границу жестокости, за которой начинается кошмар.<br>Я прошу тебя срочно найти способ проведения переговоров с  Земным Альянсом. Если правда то, что ты писал ранее, то среди их лидеров можно найти разумных людей, которые ценят жизнь своей расы.<br>Меж наших соплеменников я нашел поддержку в лице Игрейн из касты рабочих. Ты, возможно, помнишь её: храм под началом Игрейн процветал, и сам Дукхат считал ее лидером среди рабочих. Действительно, она по-новому смотрит на многие вещи в истории Минбара. Я не ожидал этого, но в частной беседе она предложила начать переговоры с Землёй, и передала мне некоторую информацию о языке и технологиях людей.<br>Каста рабочих, хоть и голосовала против начала войны, не может направить своего переговорщика. Эту ношу придется нести мне. Я не мог отказаться, хоть и испытываю стыд за производимое Минбаром разрушение. Так мы можем спасти жизни.<br>Базу для переговоров согласился предоставить Нарн. Также для обеспечения безопасности будет присутствовать их представитель Г’Артахс. Рейнджеры на территории Нарна должны подтвердить, что это надёжный вариант. Опасность велика.<br><br>- 731 ц. от П.В./ 2.41. –<br>Мое почтение, Ленонн Анла’Шок На.<br>Я рад, что мне выпала возможность служить своему народу, как пристало моему ордену. Спасибо, что даешь мне цель.<br>Встреча может состояться после смены лун. Я поручил настроить оборудование для перехвата сообщений во всей нейтральной области.<br>От Земного Альянса на переговоры прибудет сенатор Семёнофф. Я кратко общался с ним; он производит впечатление разумного существа. Он имеет представление о морали и милосердии. К сожалению, Семенофф прибудет не один, а в сопровождении военного лица – капитана Д. Шеридана. А все знают, чем он известен, и как его называют в касте воинов. Выбор Шеридана в переговорщики выглядит странно; неужели Земля пытается испугать Минбар таким способом?<br>Хотя, есть предположение, что все «победы» капитана Шеридана – лишь случайность, и земляне пытаются сделать из него мёртвого героя. И в том, и в другом случае возможны провокации. Прошу тебя, будь осторожен.<br><br>- 731 ц. от П.В./ 3.30. -<br>Здравствуй, Арденн.<br>Не волнуйся напрасно, мой друг.<br>Я приму всё, что меня ждёт, с радостью.<br><br>- 731 ц. от П.В./ 3.32. –<br>Ленонн Анла’Шок На,<br>агенты на Центавре сообщают, что правительство Республики узнало о поставках оружия Нарном Земному Альянсу. Эта информация прошла через канал от Лондо Моллари к главе дома Фирра. Разведчики Моллари находятся в опасной близости от места вашей встречи.<br>Уже не впервые Анла’Шок находят свидетельства того, что Зигги Фирра находится под влиянием известной нам силы. Поэтому прошу немедленно свернуть переговоры, и возвращаться на Минбар."');

select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('system_personal_document'), data.get_object_id('person23'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('system_personal_document'), data.get_object_id('person24'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('document_title'), null, jsonb '"Полное кредо Анла-Шок"');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('name'), null, jsonb '"Полное кредо Анла-Шок"');
select data.set_attribute_value(data.get_object_id('personal_document8'), data.get_attribute_id('content'), null, jsonb '"Я – Рейнджер.<br>Во Вселенной есть Тьма. Я – свет, что выискивает Тьму в любом месте, где она может скрываться.<br>Я пылаю ярко тогда, когда нужен свет, и я скрываюсь, когда нужно остаться невидимым.<br>Звезды зовут, и я отвечаю. Слугам Тьмы не будет отдыха и не будет укрытия. Я был зван, и я отвечаю. Тени поглотят меня, если я подойду слишком близко, но если я не принесу свет, никто не выживет. Моя судьба зовет меня, и я всегда отвечаю.<br>Ночь темна, дорога длинна, и путь полон опасности. Я иду по своему пути, и я иду один. Я закончу свой путь, потому что дорога ведет к спасению. Если я дрогну, мир дрогнет. Если я проиграю, надежда умрет. Я не упаду. Отступление невозможно.<br>Я – Рейнджер.<br>Я иду вместе с моими братьями и сестрами в долину света. Я иду в край между свечой и звездой. Я стою у врат между верой и кошмаром. Я – страж. Мы – дозорные. Вместе мы будем бороться, пока не падет Тень.<br>Я беру одеяние из рук предназначения. Я беру мой посох с клятвой не поднимать его в гневе. Я принимаю веру моих учителей в надежде, что они не дадут мне повода усомниться в ней. Я останусь навеки истинным Анла’Шок.<br>Я иду к звездам, чтобы найти свою судьбу. Я ищу знаки Врага. Мое сердце говорит, что я не вернусь никогда, но я иду вперед без страха. Мне нечего бояться в темных краях Вселенной. Я буду служить без вопросов, потому что я – рейнджер. Если я встречу смерть, я буду драться с ней силой света. Тьма может убить меня, но я не сдамся без боя. В последний миг враг дорого заплатит за мою жизнь.<br>Мы – Рейнджеры.<br>Мы живем для битвы. Мы умрем в битве. Мы знаем, что каждый момент существования – это дар, ради которого нужно работать каждый день. Если нужно отказаться от собственной жизни ради жизни других, мы сделаем это без колебаний.<br>Мы ходим в темных краях, куда никто не отваживается заглянуть. Мы исследователи, мы показываем путь среди суровых звёзд, прокладываем курс, которым другие пойдут за нами в свой черед.<br>Мы – стражи, хранители, искатели и пастыри. Мы никогда не ослабим бдительность, и ни одна тень не ускользнет от нас в наш дозор. Мы стоим на мосту между прошлым и будущим, не позволяя Тьме пройти.<br>Я – Рейнджер. Anla’shok tulat! Entil’zha Veni!"');

select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('system_personal_document'), data.get_object_id('person23'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('system_personal_document'), data.get_object_id('person24'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('document_title'), null, jsonb '"История Анла-Шок"');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('name'), null, jsonb '"История Анла-Шок"');
select data.set_attribute_value(data.get_object_id('personal_document9'), data.get_attribute_id('content'), null, jsonb '"Уходит многое, но многое пребудет;<br>Хоть нет у нас той силы, что играла<br>В былые дни и небом и землею,<br>Собой остались мы; сердца героев<br>Изношены годами и судьбой,<br>Но воля непреклонно нас зовет<br>Бороться и искать, найти и не сдаваться.<br><br>-- А. Теннисон, «Улисс», пер. И. Манделя --<br><br>Наши жизни сплелись.<br>Нас и так было мало. Теперь<br>Не осталось совсем. Каждый час, отвоеванный нами<br>У пучины безмолвия, тает в холодном тумане,<br>За которым виднеется настежь открытая дверь.<br>Что-то большее, чем измерение времени. Час<br>Нашей смерти. Предвестник того, что начнется.<br>Это будет страшнее, чем жар беспощадного солнца -<br>Наше тело погибнет. Но разум, отдельно от нас<br>Будет жить в беспредельности, в вечной слепой пустоте<br>И стремиться за знаньем, подобно летящей звезде.<br>Может быть, нас поглотит бездонный, невидимый ров,<br>Эта страшная бездна, откуда не будет возврата,<br>Может быть, мы достигнем далекого Острова Снов<br>И увидим героев, которых мы знали когда-то.<br>Уже многое отнято, но еще большего ждут<br>И мы тронемся в путь, как когда-то, когда мы умели<br>Двигать небо и землю. И жили на самом пределе<br>Человеческой силы. Мы знаем, что нам не вернут<br>Нашу молодость.<br>Мы постарели.<br>И наши сердца<br>Ослабели от тяжести лет и ударов судьбы.<br>Только воля сильна. И мы снова уходим, забыв<br>Обо всем. И находим.<br>И ищем.<br>И будем идти до конца.<br><br>-- М. Глебова –<br><br>Мы – стражи врат и солдаты во тьме. Мы держим фронт против сил Тьмы, мы сражаемся в войнах, невидимых для вас. Мы ведём битву в сотне миров и противостоим кошмарам за пределами ваших представлений. Мы живем ради Единого; мы умираем ради Единого. Мы живем и умираем за каждого из вас. Мы – вестники следующего противостояния; мы – последние выжившие. Ваши жизни куплены нашей кровью. Доказательством нашей борьбы, нашей жертвы, наших навыков – если мы всё сделаем правильно в конце концов – станет то, что вы никогда не узнаете о нашем существовании.<br><br>-- Леннон Анла’Шок –<br><br><br>Задача Анла’Шок – обнаружить все скрытые угрозы в галактике и противостоять им прежде, чем они станут настоящей опасностью.<br>Проще всего рассказать, чем не являются рейнджеры, чем определить, чем они являются. Рейнджеры, как они были задуманы Валеном во время Великой Войны за тысячу лет до времён Вавилона 5, - это не армия или военная сила какого-либо рода. Они обучаются боевым искусствам и тактике ведения боя, но это больше средство для достижения цели или самозащиты. Рейнджеры не используются в качестве солдат или десанта, и это решил Вален. Они – стражи ворот, тени против Теней, так завещал им Вален. Им была назначена цель следовать за своим лидером, неважно, была ли цель Валена высокой (или нет) – рейнджеры должны были идти за ним.<br>Рейнджеры не должны внедряться в высшие эшелоны власти или командования, поскольку они – тайное общество. Во время прошлой войны членами Анла’Шок были только минбарцы, и Вален предвидел следующую войну, поэтому существование рейнджеров было скрыто от других рас. Мотивы служения Анла’Шок могут быть разными, но среди них никогда не бывает жажды славы. Об их службе знает горстка людей; они умирают в одиночестве.<br>Также, как их анонимность, хорошо служила рейнджерам сила породившей их расы. Рейнджеры были свободны действовать по своему желанию и отступать в пространство Минбара, где никто не мог найти их. Это убежище позволило им работать в полной секретности почти тысячу лет. Но Но когда истинный Враг начал своё движение вновь, они вынуждены выйти из-под сени безопасных небес Минбара.<br>Единственное слово, которым можно назвать Анла’Шок – предназначение. Даже после тысячелетия поиска теней в пустоте, они не ослабили бдительность. Даже когда Враг начал переставлять свои пешки в игре, угрожая рейнджерам, даже когда Серый Совет отвернулся от них, Анла’Шок не отказались от своей предназначенной цели.<br>Рейнджеры задуманы как первая линия обороны – и последняя линия отступления. Они делают первый шаг вперёд в неизвестное, исследуя опасность. Они обучаются не только тому, как сражаться с опасностью, но и в большей степени тому, как избежать её.<br><br>История Анла’Шок<br><br>Чтобы понять, куда идёшь, нужно понять, где ты был. Это не означает знания мест, лиц или событий прошлого. Ты должен ответить на вечный вопрос своего прошлого: Почему? Почему твоё личное прошлое сложилось так, как сложилось? Почему история сложилась вокруг тебя в уникальный узор? Когда ты узнаешь ответ, ты сможешь двигаться в будущее… но не раньше.<br><br>-- Дурхан, Туза’Нор на Минбаре –<br><br>Любая организация является суммой своего опыта. Рейнджеры прошли через тысячу лет противостояния Тени. Оружие Врага – убийство, террор, угнетение и бесконечный конфликт – живет и здравствует во всех частях известной нам вселенной. Скрытые ужасы и чудовища притаились на границе освещенного мира. Они пытаются уничтожить надежду и приблизить возвращение Тени. Невежество и страх – их инструменты; террор их главное оружие. Пособники Врага распаляют жадность в народах галактики, чтобы заключить тайные соглашения и превратить сильные цивилизации в руины. Они делают это из мести за прошлые поражения, и в надежде победить.<br>Анла’Шок стоят между Врагом и его целью. Всякая несправедливость является оружием Врага.<br><br>Первая эра Анла’Шок – время Валена (1000 лет до Вавилона 5)<br><br>Первая эра Анла’Шок связана с разрушением основной базы Минбара во время Восстания Теней, произошедшего тысячу лет назад. Полное уничтожение базы означало конец всякой надежды Минбара на победу над Тенью, и потерю боевого духа. Корабли Минбара начали отступать, оставляя целые системы вторжению Врага. Минбар был на грани исчезновения. Внезапно в неизученном квадранте космоса на границе их территории минбарцы засекли обширную энергетическую флуктуацию. Пульс излучения, казалось, настроен на их частоты связи, так, что было невозможно не заметить его даже с расстояния световых лет из гиперпространства. Один из кораблей – Тинаши - отправился исследовать источник сигнала. Там, в короне движущихся энергетических полей, появилась огромная космическая станция, созданная по никогда не виданной минбарцами технологии. Как ни странно, чуждый дизайн не показался минбарцам враждебным. Двое воинов отправились на странное судно, и обнаружили одного минбари, сутулого чужака и с ними двух созданий света.<br>Минбарец приветствовал их и назвал свое имя – Вален. Он объявил: «Я принес вам надежду» Воины хотели захватить этого Валена, но были остановлены сиянием ворлонцев. Последовала стадия напряженных переговоров, и капитан Тинаши согласился передать послание флоту с запросом на сближение со странной станцией. Минбарцы сомневались, полагая, что собрав флот в одном месте, они станут приманкой для Врага, но Вален заверил их в полной безопасности. Постепенно все минбарские корабли вышли из гиперпространства и заняли позиции вокруг станции.<br>Вскоре корабли Теней начали окружать станцию. Капитаны минбарских судов приготовились открыть огонь по врагу. Корабли Тени ринулись в атаку. Казалось, что всё потеряно. И тогда космическая станция ударила по противнику невероятной огневой мощью. Как оказалось, ворлонцы усовершенствовали вооружение станции так, что каждое её орудие было способно пробивать броню Теней. Корабли Теней были уничтожены, и минбарцы выиграли битву. Это положило начало надежде, как и обещал Вален.<br>Ворлонцы же поспешили уйти, как только флот вокруг станции оказался в безопасности. Однако их невысказанное обещание помощи подняло боевой дух минбарцев. Появление ворлона пробудило в них память о прошлой силе, и великой тайне Минбара.<br>Минбарцы никогда не задавались вопросом, откуда появилась станция, и кто построил её. Они приписывали это чудо Ворлону. Когда Вален действовал не по-минбарски, они предполагали, что тот просто изменён ворлонцами. Это всегда огорчало Валена, потому что полубожественный статус не позволял ему быть услышанным. Все его указания немедленно выполнялись, но ни с кем из минбарцев нельзя было вести разговор.<br>Было несколько исключений – минбарцев, которые видели его суть, а не тайну. Эти минбари стали близкими друзьями Валена во время войны. Ему нужна была группа тех, кто слушал бы его, не отвлекаясь на «силы», которые за ним стояли. Из этих друзей и союзников Вален создал ядро группы, которая позже стала известна как Анла’Шок. Эта группа очень помогла во время войны – так как в ней были минбарцы из разных каст, они наладили взаимодействие между кастами, и превратили Минбар в оружие Валена против Врага. Он должен был сделать Минбар единым любой ценой; судьба галактики зависела от этого.<br>Последние слова Валена и его исчезновение<br>Вален был лидером, спасителем и просто минбарцем, смертным, как и любой другой. Те, кто слышали его последние слова, не знали, что за имена он назвал, но то, что он сказал, понял каждый.<br><br>«Моё имя Вален. И я служил моему народу, как никто другой. Я вёл их в огонь… во тьму… в смерть… и они шли за мной без колебаний. Они приветствовали мои победы, и славили меня как великого лидера. Они говорили о моих успехах, словно те были бесконечны, как звёзды. Но сейчас, несмотря на всё, что я достиг… я лежу без сна, слушая крики мертвых и умирающих, тех, кто уже ушёл, и тех, кто ещё не родился. Несколько моих слов могли предотвратить войну Минбара и Земли. Предупреждение Деленн или Дукхату… но без войны, не будет и Вавилона 4, и Вавилона 5. Не будет точки противостояния тьме… и Тени победят, сейчас – и через тысячу лет. Я не могу выйти из круга, частью которого являюсь. Я – начало истории, как сказал Затрас, и её пленник. Я не осмелюсь изменить конец. Однако… Это была хорошая жизнь… жизни… Деленн, Кэтрин, Сьюзан, Майкл… если кто-то из вас видит это, не плачьте обо мне. В конечном счёте, это всегда было тяжело для меня. Я позволю истории судить меня, и всё это было сделано во имя Валена. Что до меня… Я получил свою собственную награду, потому что нашёл её. Наконец я нашёл её»<br><br>Существует много гипотез, о ком говорил Вален, и что его слова могли означать. Фактом же является то, что нет никаких свидетельств его смерти. Нет записей о том, как он умер, где он похоронен, или при каких обстоятельствах великий минбарский вождь встретил свою смерть. Известно, что у него было много детей в годы после Великой Войны, но о его собственном пути мы не знаем ничего.<br>В первые годы после ухода Валена, Анла’Шок, как его организация, обладала лучшей военной силой. Им выделялись лучшие суда, самые способные призывники, им было разрешено свободно странствовать во имя Валена. Они патрулировали, чтобы предотвратить возвращение Тени, и сражались в мирах, где могли скрыться её остатки. Эти действия одобрил Серый Совет, и многие в касте воинов поддерживали Анла’Шок.<br>Постепенно след и память о Враге стирались; всё меньше рейнджеров патрулировали космос. В конце концов, Анла’Шок потеряли всякое влияние на минбарцев, и казалось, исчезли. Однако, угасание Анла’Шок не тревожило лидеров рейнджеров, которые были прямыми потомками друзей Валена. Они всё еще помнили причину создания ордена, и знали, что отделение от правящих кругов Минбара позволит им сосредоточиться на их истинной цели.<br><br>Вторая эра Анла’Шок – Внутреннее Око (200-450 лет от прихода Валена) и Третья эра – Молчания и Сомнений (450-700 лет от прихода Валена)<br><br>Этот период означен возвращением Анла’Шок к их родной планете, а затем отделением от собственного народа. Это было продиктовано лучшими намерениями; рейнджеры хотели убедиться, что Тень не проникла в Минбар.<br>(Краткий пересказ истории: через 200 лет рейнджеры вернулись на Минбар, их приветствовал Серый Совет, им дали базу в городе Туза’нор, и наделили полномочиями тайной полиции. Потихоньку рейнджеры выяснили, что не всё гладко, кое-где кое-кто занимается коррупцией, и обвинили этого кое-кого. Назрело внутреннее напряжение. Действующий лидер Совета из касты жрецов по имени Шал’ри предложил ограничить их полномочия. В это время рейнджеры проводили расследование, и по случайности убили сына Шал’ри (он выскочил со страху в окно). Совет на эмоциях принял решение против Анла’Шок, и запретил их участие в полиции совсем. Рейнджеры были в шоке, но решили бороться непротивлением, по слову Валена. Эта правовая коллизия называется – акт Шал’ри. В конце концов, дошло до того, что Серый Совет попросил Анла’Шок встать в угол уйти в Туза’нор и не отсвечивать. Кто-то послушался, кто-то нет, но никакого смертоубийства так и не случилось. Кончилось тем, что касты перестали давать людей и корабли ордену, и он постепенно захирел. Однако, орден все еще посылал экспедиции, и однажды около 450 г. у них пропал один корабль, Варайи. Обломки Варайи нашли в системе Зед’рак, там же дали по щам нападавшим. Потом нашли планету этих зедраков (оказалась подземная раса, родственная бракири) и разбомбили её. Ну, конечно, сразу их заела совесть, но флот уже весь почти потеряли, а остальные разбежались от стыда. Остались только те, кто сидел на Минбаре и медитировал над архивами)<br><br>Четвертая эра – Утраченная Надежда (700-990 лет от прихода Валена)<br><br>Нет звёзд слишком далёких, нет пустоты слишком тёмной для рейнджера в поиске правды.<br>В системе, расположенной примерно в шести световых годах от пространства Минбара, недалеко от орбиты газового гиганта, судно рейнджеров двигалось в поиске лучшего места для открытия точки перехода. Скучающий оператор датчиков отправлял низкоуровневые гамма-всплески сквозь ледовые кольца, чтобы увидеть красоту отблесков кристаллического резонанса – и нашёл Осколок.<br>То, что рейнджеры нашли и назвали Осколком, было чёрным, как кошмар. Веретенообразный, отталкивающего дизайна, он в точности соответствовал описанию корабля Теней из уроков Валена. Команда корабля не могла поверить, что они действительно видят осколок корабля Тени, замороженный в ловушке ледового кольца. После обследования, не выявившего ничего, кроме значительного возраста находки, они были вынуждены признать правду. Они нашли его. Слово Валена было истиной.<br>Это событие стало чудом Валена для всего ордена Анла’Шок. Корабль немедленно запросил инструкций от храма в Туза’норе, но храм не ответил, опасаясь, что переговоры перехватят другие минбарцы. Предположив перебои со связью, капитан решил отбуксировать Осколок на Минбар. Это решение едва не стало роковым для Анла’Шок.<br>В это время на Минбаре один из посланник Серого Совета посещал Туза’нор, и случайно обнаружил, что в храме до сих пор ведётся обучение мастерству денн-бок. Минбарцы в этот период думали, что в храме осталось немного немощных старцев, и посланник в тревоге вернулся и доложил Совету, что орден снова милитаризуется. Серый Совет послал в храм отряд воинов, и потребовал немедленного его закрытия. Анла’Шок вступили в переговоры. Они вовсе не готовили переворота или войны, а просто выполняли волю Валена, следуя священным текстам. Ситуация стала напряжённой.<br>Именно в этот момент на Минбар вернулся весь флот рейнджеров. Минбарцы уже забыли о его существовании, и он явился – множество боевых кораблей плыло по небу Минбара торжествующей волной, а в перекрестьи тяговых лучей двигался за ними Осколок – воплощение чистого ужаса. Планетарная оборона открыла огонь. Последовавшая битва была ужасна. Корабли Анла’Шок были старыми, но их вернулось много – их было вдвое больше, чем кораблей планетарной обороны. Говорят, после битвы несколько дней на Минбар сыпались «огненные слёзы» - обломки кораблей, искромсанные лазерами. В бою было уничтожено более сотни судов, и в том числе, злополучный Осколок.<br>Тень была реальной – но, доказав это, рейнджеры получили в награду лишь уничтожение.<br>Это был чёрный час для ордена. Всё, за что боролись Анла’Шок, в мгновение превратилось в осколки, разбросанные в пустоте космоса. Для собственного народа рейнджеры стали мёртвым воспоминанием.<br>Конечно, Серый Совет знал правду о том, что произошло. Но они скрыли её, чтобы их соучастие в инциденте осталось тайной. Единственные, кто мог раскрыть эту тайну – те рейнджеры, что ещё остались в живых.<br>Серый Совет не мог преступить закон Валена и убить оставшихся. Вместо этого они отремонтировали уцелевшие корабли, и отослали рейнджеров «продолжать свою миссию» к звёздам. Анла’Шок, убитые горем, согласились с планом Совета. Лишь несколько из них осталось на Минбаре, чтобы тайно наблюдать за событиями.<br>Серый Совет послал рейнджеров на смерть. Уже на расстоянии в двадцать световых лет от Минбара техники обнаружили, что системы «отремонтированных» кораблей стали отказывать. Но Анла’Шок отказались умирать. Они смогли починить корабли, и установить новые коды связи, отличные от минбарских. После этого капитаны приняли тяжёлое решение – флот разделили на восемь частей, и отправили в разных направлениях, к восьми концам галактики. Рейнджеры понимали, что могут больше не собраться вместе никогда. Отныне эти восемь флотов искали не только Врага, они искали собственный мир.<br>Так были найдены три планеты – Загрос VII в зоне дрази, Рохрик в зоне аббаи (на Рохрике нашли какие-то древние руины, древнее Тени), и Кандар, недалеко от Икарры и L-213. На Кандаре флотом был обнаружен артефакт Врага, который полностью обездвижил корабли, но не нанес ущерба живым. Рейнджеры из кораблей построили маленькую станцию, и стали там выживать. На Загросе и Рохрике основали храмы.<br>Рейнджеры, которые остались на Минбаре, хранили записи ордена и заветы Валена, и ждали знака.<br><br>Пятая эра – Пробуждение Тени (с 997 года от прихода Валена)<br><br>В 2258 году по земному календарю, на станции Вавилон 5 рейнджер Ирида Шафтбок с помощью трилюминария и Таринн из касты жрецов увидела свет души Валена, посмотрев на землянина по имени Синклер Нейман. Через несколько часов вокруг станции появились корабли, точно совпадающие с описанием Валена. Корабли Врага.<br>Знак был явлен. Тень пробудилась."');

select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person23'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person16'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person17'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person24'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('system_personal_document'), data.get_object_id('person48'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('document_title'), null, jsonb '"Слово Валена"');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('name'), null, jsonb '"Слово Валена"');
select data.set_attribute_value(data.get_object_id('personal_document10'), data.get_attribute_id('content'), null, jsonb '"Я – Вален.<br>Я – слово.<br>Я – свет, изгоняющий тьму.<br>Я – дух побеждающий.<br>Я – сила, исцеляющая Вселенную.<br>Я пришел говорить с народом Минбара.<br> <br>Я Вален из народа Минбара.<br>Моя душа вышла из Озера Душ, и в него вернётся.<br>Душа есть свет, и свет этот исторгает Вселенная.<br>Каждое разумное существо имеет душу, и источник её лежит извне.<br>После смерти моего тела я вернусь в Озеро Душ, и каждый минбари вернётся в него.<br>Время – это колесо, и душа вращается вслед за ним.<br>Каждая душа выйдет из Озера в свой срок, и в свой срок найдёт новое тело в народе минбари.<br>Душа есть странствующий свет.<br>Душа есть отсвет Вселенной.<br>Я Вален, и отсвет души вы увидите в трилюминарии, который я создал.<br>Моя душа будет странствовать вечно, и души лучших минбари будут возвращаться вслед за мной.<br>Я – ветер, несущий вас на своих крыльях сквозь пустоту.<br> <br>Я Вален, пришедший на Минбар.<br>Моё тело родилось за тысячи лет от Минбара.<br>Моё тело родилось за миллионы миль от Минбара.<br>При рождении во мне не было ни одной частицы Минбара. Моя кровь была иной.<br>Я пришёл к вам, и вы стали моим народом.<br>Я пришёл к вам, и теперь моя кровь стала светлой, мой гребень стал твёрдым.<br>Я часть Минбара, и Минбар часть меня.<br> <br>Я Вален, говорящий с народом Минбара.<br>Я жертвую частью себя, чтобы говорить с вами.<br>Я жертвую своим языком, чтобы дать вам слово.<br>Тот, кто слышит меня, будет исцелён.<br>Тот, кто слушает меня, будет жить в гармонии.<br>Тот, кто говорит со мной, будет идти в свете.<br> <br>Я Вален, ведущий битву с Тенью.<br>Враг пришел на Минбар, и в пределы Вселенной легла Тень.<br>Враг противоречит жизни.<br>Враг есть абсолютный порядок, когда не движется ничто.<br>Враг есть абсолютный хаос, когда ничто не покоится.<br>Тень есть абсолютный Враг.<br>Нет слова для Тени.<br> <br>Я – Вален.<br>Я пришёл победить Врага.<br>Великая опасность пришла на Минбар.<br>Великое отчаяние поразило народ Минбара.<br>Я Вален, и я спасу народ  Минбара.<br>Тот, кто говорит со мной, встанет рядом.<br>Тот, кто говорит со мной, вступит в битву с Врагом.<br>И стены падут, и в чёрных пустынях воцарится свет.<br>На развалинах Тени зацветут деревья.<br>Деревья дадут плоды, и по плодам узнаете меня.<br>Я Вален, и я пришел победить.<br> <br>Я Вален, несущий надежду.<br>Я дам отвагу и отдых воинам.<br>Я дам веру и храм жрецам.<br>Я дам цель и надежду мастерам.<br>Слово будет жить в вас. Слово будет странствовать с народом Минбара.<br>Следуйте за мной.<br> <br>Одержите победу в сердцах, и Вселенная последует за вами.<br>Враг будет побеждён, но Враг вернется.<br>Тысячи лет будет Враг незрим и неслышим для нас.<br>Но пройдёт время, и Враг протянет руку вновь.<br>Враг откроет глаза, и соберёт силы, чтобы сокрушить Минбар.<br>Но всякое разумное существо встанет против Врага.<br>Враг никогда не победит.<br>Это предопределено, как вращение галактики.<br>Так говорю вам я, Вален.<br> <br>Я – Вален.<br>За мной идут духи Валерии.<br>Духи Валерии будут с вами, когда меня не будет рядом.<br>Духи Валерии будут следовать за вами, когда я уйду.<br>Духи Валерии помогут вам, когда надежды уже не будет.<br>Они пришли издалека, чтобы помогать мне.<br>Они пришли во имя Света.<br>Тень – наш общий Враг.<br>Духи Валерии несут Слово.<br>Если у вас нет надежды, если Тень закрыла ваши небеса, и вы не слышите моих слов – услышьте слова Валерии.<br>Духи Валерии поведут вас во второй войне с Врагом.<br>Услышьте их.<br>Я Вален, и я слышал их и говорил с ними.<br> <br>Я Вален, Избранный.<br>Народ Минбара избрал меня вести их в свете.<br>Я спросил Девятерых: готовы ли вы последовать за мной в огонь, в бурю, во тьму, в смерть?<br>И Девять ответили: да.<br>От рождения, через смерть, к обновлению. Отбросьте всё былое, старые страхи, прежнюю жизнь. Это ваша смерть, смерть плоти, смерть страдания, смерть вчерашнего дня.<br>Отныне ты – Серый. Ты стоишь между свечой и звездой.<br>Отныне вы – Серые.  Вы стоите между тьмой и светом.<br>Не бойтесь, ибо я пребуду с вами до конца времен.<br>Да будет так.<br>Так говорю я, Вален.<br> <br>Я Вален, хранитель традиций Минбара.<br>Три касты равны передо мной.<br>Три касты равны в Совете.<br>Народ Минбара – кристалл с тремя гранями.<br>Народ Минбара возвеличен в каждой касте.<br>Если хочешь сражаться в войне, сражайся, не вступая в спор о равенстве.<br>Все касты равны и необходимы для победы.<br>Все касты равны и необходимы для существования Минбара.<br>Каждая каста часть Минбара и часть меня.<br> <br>Я меняюсь, и Минбар изменится вслед за мной.<br>Следуйте принципам разумной жизни.<br>Не разумно жить парами и малыми группами.<br>Каждый минбари пусть станет частью народа.<br>Весь народ придет к каждому в случае несчастья.<br>Весь народ будет растить детей Минбара в свете и равенстве.<br>Каждый войдёт в свой Храм, и выйдет из него, когда наступит его время жить и работать на благо народа Минбара.<br>Не плачьте о разлуке. Души ваши следуют вместе за мной.<br>Я Вален, и мое слово поведет ваших детей.<br> <br>Чтобы слово моё не исчезло, пусть Жрец запишет его.<br>Пусть Жрец учит минбари слову.<br>Слушай Жреца, ибо он говорит моими словами.<br>Пусть Жрец помнит слово моё, ибо я Вален.<br> <br>Чтобы мир мой не исчез, пусть Воин хранит его.<br>Пусть Воин защищает мой народ.<br>Чти Воина, ибо в нём пламя моего духа.<br>Пусть Воин помнит битву мою, ибо я Вален.<br> <br>Чтобы народ мой не исчез, пусть Мастер поможет ему.<br>Пусть Мастер строит дом моего народа.<br>Уважай Мастера, ибо в нём сила земли Минбара.<br>Пусть Мастер помнит дела мои, ибо я Вален.<br> <br>Я – Энтил’За.<br>Многие из минбари противоречили мне.<br>Многие из минбари не хотели жить в мире.<br>Я стыжусь их, ибо хуже всего – война внутри своего народа.<br>Я спросил: готовы ли вы отказаться от кланов и каст во имя Валена? Готовы ли жертвовать своим прошлым, своим страхом, своей памятью для победы над Врагом?<br>И мой народ ответил: да.<br>Войско моё из тех, кто любит меня.<br>Войско моё – Анла’Шок.<br>Каждый, кто воюет во имя Валена – Анла’Шок, и клану своему и касте не принадлежит.<br>Так говорю я, победитель Врага.<br> <br>Я Вален, хранитель закона Минбара.<br>Пусть в каждом из вас взрастут покой и свобода. Пусть время течёт сквозь медитацию, приближая вас к гармонии. Вселенная – колесо душ, и душа – медитация Вселенной.<br>Пусть в каждом из вас взрастут чистота и вера. Пусть ритуал поможет вам жить в простоте. Следуйте ритуалу, и порядок озарит ваше существование.<br>Молитва позволит вам постичь Слово.<br>Медитация позволит вам познать цельность.<br>Смирение позволит вам достичь зрелости.<br>Пусть гнев пройдет через ритуал, и родится сила.<br>Пусть страх пройдет через ритуал, и родится отвага.<br>Ибо я прошёл через страх, и я Вален.<br> <br>Я голос разума, и я пришёл говорить о принципах разумной жизни.<br>Первый принцип разумного существования – отрицание лжи. Ложь противна природе Вселенной, поэтому минбари никогда не лгут.<br>Второй принцип разумного существования – прощение во имя общего блага. Минбари не убивает минбари ни в гневе, ни на войне. Минбари не казнит минбари, какое бы преступление тот не совершил.<br>Третий принцип разумного существования – способность к самопожертвованию. Минбари приносит в жертву себя, свою жизнь и свой покой во имя друзей и любимых.<br>Четвертый принцип разумной жизни – избежание позора.  Минбари хранит честь дома и клана, даже если гордость его вопиет.<br>Пятый принцип разумной жизни – помощь страдающему. Минбари помогает любому чувствующему существу и не проходит мимо чужого страдания.<br>Шестой принцип разумной жизни – смирение. Всегда есть тот, кто мудрее тебя. Когда я отдаю приказ, понимание не требуется, требуется послушание.<br>Седьмой принцип разумной жизни – верность слову минбари. Обязательства должны быть исполнены, даже если цена непомерно высока. Минбари всегда отдают свои долги.<br>Таковы принципы разумной жизни. Их семь, и я, Вален, даю вам их.<br> <br>Я Вален, и я прошёл через смерть.<br>Воин не боится смерти, ибо он уже мёртв. Только живые могут бояться.<br>Я не боюсь.<br>Страх убивает разум.<br>Я позволю страху пройти сквозь меня.<br>Там, где прошёл страх, останусь лишь я.<br>Я ухожу в океан звёзд, чтобы вернуться в моём народе.<br>Я – начало пути, и его завершение.<br>Я спица в колесе Вселенной.<br>Я – Вален."');

select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person7'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person45'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person20'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person9'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('system_personal_document'), data.get_object_id('person10'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('document_title'), null, jsonb '"Слэг"');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('name'), null, jsonb '"Слэг"');
select data.set_attribute_value(data.get_object_id('personal_document11'), data.get_attribute_id('content'), null, jsonb '"Слэг - волновой наркотик нового поколения. Эффект от применения - качественное улучшение творческих резервов сознания, усиление воображения и ассоциативного мышления. Минусом применения является возникновение сильнейшей психической и физиологической зависимости. Через полгода постоянного применения слэга отказывают внутренние органы и наступает смерть. Период отвыкания характеризуется нервным истощением, снижением воли, снижением навыков психологической защиты, уязвимостью психики. Данное устройство запрещено уголовным кодексом большинства цивилизаций."');

select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person25'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person47'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person30'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person37'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person41'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('system_personal_document'), data.get_object_id('person1'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('document_title'), null, jsonb '"Меморандум о расположении и составе сил ЗФ ЗА"');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('name'), null, jsonb '"Меморандум о расположении и составе сил ЗФ ЗА"');
select data.set_attribute_value(data.get_object_id('personal_document12'), data.get_attribute_id('content'), null, jsonb '"Совершенно Секретно<br>ОКНШ, Штаб Командующего Звездного Флота Земного Альянса<br>Только для сведения Президента ЗА, Вице-Президента ЗА, председателя комитета обороны Сената ЗА, и военных губернаторов ЗА:<br>Меморандум<br>О расположении и составе сил Звездного Флота Земного Альянса, по состоянию на 29 декабря 2258 года<br><br>Земля, орбита Луны: первый и второй Ударные флоты под командованием Вице-Адмирала Германа Ушакова, в составе три корабля типа “Нова” два тяжелых крейсера типа “Гиперион”, два разрушителя типа “Омега”<br>Марсианский консорциум и марсианские директории, орбита Фобоса: четвертый ударный флот под командованием генерала Джордана Квина, в составе три разрушителя типа Омега, один ударный флот Фурий<br>Союз Вегос, под командованием капитана Мигеля Гонсалеса, орбита Веги II, 6-й ударный флот в составе разрушителя типа Омега и двух звеньев Фурий.<br>Директория Эпсилон, под командованием капитана Джона Шеридана: Орбита Эпсилон III, военная станция Вавилон-5, два звена Фурий, военный Аванпост типа Кара. Орбита Свободы-21, 11-й экспедиционный флот, разрушитель типа омега, тяжелый крейсер типа Гиперион<br> Консорциум Проксимы, под командованием вице-Адмирала Ли Вонга: Орбита Проксима III Третий ударный флот три разрушителя типа Омег (все еще на верфях корпорации Рокетдайн, сорваны сроки передачи Звездному Флоту новых кораблей), орбита станции Гагарин - Четвертый ударный флот в составе дредноута типа Нова и тяжелого крейсера типа Гиперион. Орбита Берлина II, система Берлин - 9-й оборонный флот два подразделения Фурий.<br><br><br>В настоящий момент это все наличные силы звездного флота Земного Альянса, за исключением третьего флота, который все еще находится в ремонтных доках.<br>приказом Командующего штаба Звездного Флота ЗА 11-й и 4-й ударные флоты приведены в состояние полной боевой готовности.<br><br>ИО Командующего ЗФ ЗА Вице-Адмирал Герман Паулюс <br>29 декабря 2258 года, борт корабля Ификл, лунная орбита, Земной Альянс."');

select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_personal_document'), data.get_object_id('person39'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_personal_document'), data.get_object_id('person41'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('system_personal_document'), data.get_object_id('person35'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('document_title'), null, jsonb '"Список экипажа Персей"');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('name'), null, jsonb '"Список экипажа Персей"');
select data.set_attribute_value(data.get_object_id('personal_document13'), data.get_attribute_id('content'), null, jsonb '"Экипаж корабля Персей<br>Лорейн Метьюс<br>Арнольд Шварц<br>Юстас Алексис<br>Дэрил Хантер<br>Мордехай Коэн<br>Эмбер Паркер<br>Джулия Саммер<br>Патрик Джейн<br>Люсьен Морден<br>Анна Шерридан<br>Меган Золтан<br>Таня Крестова<br>Ульрих Триер<br>Адалинда Шорт<br>Владимир Ургант<br>Адриан Чейз<br>Джон Шекли<br>Анатолий Сикорски"');

select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('system_personal_document'), data.get_object_id('person34'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('system_personal_document'), data.get_object_id('person24'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('document_title'), null, jsonb '"Анализ минбарской войны"');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('name'), null, jsonb '"Анализ минбарской войны"');
select data.set_attribute_value(data.get_object_id('personal_document14'), data.get_attribute_id('content'), null, jsonb '"Официальная цифра в 245000 землян, погибших во время Минбарской войны, на самом деле является трагически неполной. Кроме 245000 павших в бою, следует учесть еще более чем 35000 пропавших без вести военных, которые никогда не вернулись, а среди гражданских лиц насчитывается больше, чем 4,5 млн. погибших, большей частью в результате разрушения минбарцами инфраструктуры колоний. Кроме того, правительство ЗА умалчивает о потерях мирного населения на Берлине II, по данным же минбарских источников, на момент начала оккупации колонии она насчитывала 281453 человек (из них живыми найдено не более 35 000) Многие из тех, кто выжил в боях, остались инвалидами, по сути, наиболее горьким наследием войны.<br>Напротив, Минбари до сих пор всячески скрывают реальное число потерь во время войны. Официально после окончания боевых действий сообщалось о уничтожении 43 кораблей разного класса, в основном истребителей, и 24 000 убитых среди экипажей и наземных войск. На самом деле потери минбарского флота превысили 160 кораблей (в основном истребителей), а еще 35 были выведены из эксплуатации из-за невосполнимого ущерба, в то время как наземные бои, казалось бы, незаметное дополнение космической борьбы, оказались более кровопролитными, чем подозревали воины Минбари, и окончательный пул жертв составил 55 000 смертей Минбари, около 65% от их числа - потери наземных войск. Такие тяжелые потери были горькой чашей для минбарской касты воинов, в основном потому, что причинил их намного менее развитый враг, война против которого велась на почве ненависти и неуважения.<br><br>В самом деле, после первых безнаказанных избиений, последний год войны был дорогостоящим даже для Минбарских ВКС: считая себя очень продвинутыми технически и тактически, привыкшие к безнаказанному уничтожению людей превосходящими силами, они, втретий год войны, были вынуждены столкнуться с рядом новых тактик, реагируя слишком мало и слишком поздно для того, чтобы изменить ход войны и платя за победы огромную цену.<br> <br>Обращаясь к предыстории конфликта Земли и Минбара, мы не можем увидеть объективной и единственной причины начала войны, унесшей миллионы жизней. На первый взгляд начало войны представляется цепочкой катастрофических и случайных событий, которых можно было бы избежать. Однако в докладе ШОС изложены факты, заставляющие усомниться в этой случайности.<br><br><br>Выдержки из доклада Совета Юкаса. Данный доклад опирается на документы, Штаба объединенных спецслужб (ШОС) Объединенного комитета начальников штабов (ОКНШ) и некоторые секретные документы Корпуса-Пси котрые были вывезены из Женевы Хенгистом Кербером бывшим членом Совета Корпуса и руководителем Пси-надзора.<br><br>В конце 2257 года агенты ШОС начали проводить расследование, связанное с деятельностью неизвестной агентуры, проникшей в Сенат, завербовавшей Сенатора Кларка и, вероятно, Пси-корпус. К сожалению, ШОС размещается в крупных наземных офисах, и его руководство находится в правительственных учреждениях в Женеве, так что ШОС крайне политически уязвим.<br><br>Политическая предыстория<br><br>Политика Земного Альянса на межзвездной арене была главным образом \"политикой силы\". Дипломатический подход котировался мало: с конца 2100 г.г. в коммерческие интересы Земного Альянса обеспечивала не дипломатия, а эффективный военно-космический флот. Благодаря этому, Земля имела хорошие отношения практически со всеми высокоразвитыми цивилизациями в секторе: интенсивные торговые отношения с Бракири, Маркабом, и, в основном, с Республикой Центавра, что являлось благоприятным для поддержки растущего Земного Альянса в противовес растущей мощи Нарна. Он выступал также в качестве противовеса к имеющей численное превосходство, но политически разделенной Лиге Неприсоединившихся Миров.<br>Одержав победу над Дилгаром, Земля решила проблему недоступную даже для Центавра и Нарна, а значит, сразу после Дигларской войны земляне обнаружили себя в завидном положении: хорошие торговые и политические отношения с Лигой, холодные, но не враждебные с Нарном (и даже с ними у землян был хороший коммерческий поток, который представлялся наилучшей страховкой от странных сюрпризов), а в экстремальных ситуациях, простая возможность союза Империи Центавра с Земным Альянсом действительно являлось мощным сдерживающим фактором.<br><br>В области иностранных дел политика Земли имела необъявленной целью создать области влияния среди слаборазвитых рас в секторе, используя последствия победы в Дилгарской войне. В долгосрочной перспективе это было очень выгодно, но в ближней подрывало политическое влияние Земли: отношения с некоторыми расами в Лиге, были охлаждены некоторыми чрезмерными требованиями Земного Альянса, но, в основном, их раздражало поведение людей. Те ухитрились обидеть эти древние и влиятельные народы, уничтожив в течение нескольких лет их торговые империи, которые были построены за многие столетия, и притом, без каких-либо компенсаций. Даже Нарн, который, благодаря землянам, завоевал свободу после столетия партизанской войны, раздражали эти высокомерные земные новички: решающая помощь землян ущемляла их гордость, а земляне в ответ ожидали, по крайней мере, некоторую благодарность и больше уважения со стороны народа, которому они дали звезды.<br><br>В 2242 г. политическая ситуация была стабилизирована, и правительство Земного Альянса решило заглянуть за границы исследуемого пространства: в ВКС, при поддержке со стороны СДР начали проводить расследования по поводу Минбари. В результате, ситуация, которая была идеальной после победы над Дилгаром в 2235 г. ухудшалась, а ее последствия были катастрофическими.<br><br>В 2242 г. ШОС было поручено провести расследование по Минбари, ввиду чего она открыла проект \"Deep Blue\". Работа была произведена с обычным набором средств: данные собраны среди инопланетян, имеющих контакт с Минбари. Тщательный анализ полученных данных привел к тому, что ВКС, даже при поддержке со стороны ШОС, было запрещено выполнение разведывательных миссий на территории Минбари. В январе 2244 г. был выпущен доклад, чьи основные выводы, которые были одобрены ШЗФ, ШОС и разведкой Министерства иностранных дел, были следующие:<br>1. Минбари имеют по крайней мере тысячелетие опыта в межзвездной навигации и боевых действий. Численность Минбари составляет от 20 до 30 миллиардов. Минбарская Федерация насчитывает более 30 колоний в объеме пространства большем, чем находящийся под контролем Земного Альянса.<br>2. Социальные структуры Минбари организованы в качестве каст и кланов - известно о существовании трех из них: религиозная каста, которая на самом деле является главным органом государственного управления и законодательной властью, каста рабочих, которая включает практически всех производственных и коммерческих сотрудников, и каста воинов, которая полностью посвящена военной силе. Технические возможности Минбари значительно превосходят возможности Империи Центавра.<br>3. Внешняя политика Минбари экспансионистская, но не агрессивная: идея войны как агрессии для завоевания Земли вряд ли будет поддержана. Однако ходят слухи, что экспансия Земли слишком остро воспринимается как угроза.<br>4. Минбари не имеют дипломатических представителей. Единственными известными расами, которые имели контакты с Минбари в прошлом веке являются Нарны, Йолу и Хийаш. Центаврианская Империя имела контакты с Минбари в прошлом, но не сейчас.<br>5. К первому контакт с Минбари следует подходить с осторожностью. Не будучи активным игроком в секторе Орион, они, похоже, одна из самых древних и могущественных рас в этом квадранте. ШОС настоятельно рекомендовал использовать третью сторону для контакта, и предложил начать переговоры с помощью дипломатов Центавра. Установление дипломатических отношений с Минбари, даже несмотря на их потенциальную опасность, могли иметь положительные последствия и дать позитивные возможности для Земного Альянса.<br><br>Выводы и предложения доклада по проекту “Deep Blue” подверглись критике со стороны правительства ЗА, которое сочло предложенную тактику слишком усложненной и трусливой. Год спустя земные ВС организовали исследовательскую экспедицию в пространство Минбара. Эта миссия называлась «Экспедицией «ПРОМЕТЕЙ», и то, что произошло дальше, хорошо известно.<br>Ключевым моментом в истории ЗА является как раз организация этой экспедиции, и пристальное рассмотрение ее как раз и дало ШОС повод считать, что некоторые официальные лица ЗА находились в тот период под влиянием агентов, именуемых в докладе «агенты иных».<br>Действия «агентов иных», в количестве не меньшем, чем 100 человек (?), были направлены и хорошо координированы. Каковы же могли быть их основные цели?<br><br>Как сказано еще в ряде докладов ШОС (\"Военная разведка в тени войны\" и \"Дилгарская Война: участие Земного Альянса\"), первоначальным планом «агентов иных», было развязать полномасштабную войну в секторе Орион, причем основным ее зачинщиком являлись их куклы дилгары. Дилгарская война и ее прогнозируемое завершение привели вот к чему: в конце Дилгарской войны были все возможности для расширения сети альянсов с объединением в единой фронт Лиги Неприсоединившихся Миров, Земного Альянса, Нарна, и, в конце концов, Минбара.Республика Центавр стоит здесь особняком, но есть обоснованное мнение что Император Турхан был подчинен «агентами иных» через одну из своих телепаток телохранительниц, Мару, которую впоследствии «иные» так удачно «утилизировали». Это означало, что почти все цивилизации, включенные в круг радиусом 150 световых лет, были готовы объединиться против любых возможных внешних угроз, и, весьма вероятно, в союзе с Ворлоном.<br><br>Такой альянс имел бы военную мощь в десятки тысяч боевых кораблей, а также ресурсы сотен планет и сотни миллиардов цивилизованных существ, и был бы мощным инструментом мира и стабильности. Земной Альянс являлся единственной основой, на которой мог быть создан такой союз, поскольку только люди имели дипломатические отношения, престиж и менталитет, способный объединить в коалиции в том числе и бывших врагов, как некоторые члены Лиги, и Нарн, и победа людей над Дилгаром являлась ключевым элементом для этой возможности: Ворлонам безусловно было известно об этой ключевой роли людей, и скорее всего при их способностях к проницанию будущего было известно заранее.<br><br>В общем, небольшая жертва в виде бесполезной воинственной цивилизации Дилгар и нескольких цивилизаций, слишком слабых для такого альянса  и потому стертых «иными» руками Дилгар, на данном этапе истории привела к ситуацию к желаемому балансу: ситуация с малыми возможностями для конфликта, а также все элементы, необходимые для обеспечения победы \"Ворлонского фронта\" в случае... мы не знаем в случае чего, но догадываемся что «иные» прогнозировали избавиться с помощью этой коалиции от некой будущей угрозы.<br><br>Аналитики ШОС сделали почти однозначный вывод, была лишь одна сила, способная к столь масштабной манипуляции и именно она дирижировала мировым политическим оркестром. Однако вслух произнести имя этой силы побоялась. Но мы полагаем, что слово Иные можно было бы заменить словом Ворлоны. Именно они через своих питомцев Иккариан создали расу Дилгар, осуществили внешнее давление на слабые миры Лиги, чтобы Земля могла стать ключевым элементом уравнения.<br><br>Однако в дальнейшем вмешалась нелепая случайность, судьба или рок, а может и некая третья сила (подозревают цивилизацию Дракхов): люди стали ключом, и этот ключ был сломан. Все дело в том, что среди слагаемых в уравнении «иных» отсутствовал Минбар.<br><br>Единственный способ вернуть ситуацию на прежний уровень, и выбить минбарцев из их многовекового летаргического сна, было спровоцировать конфликт, и играя, в дальнейшем на чувстве вины и, в целом гуманистичном менталитете Минбарцев, возоновить связь Федерации с остальной Галлактикой, возможно поставить их во главе союза, после того как люди сделают грязную работу. Но сначала нужно было столкнуть людей и минбари. Для достижения полноценного объединения должна была провернуться кровавая мясорубка войны.<br><br>Проникновение «агентов иных», да и попытки формировать человеческое общество культуру, религию и мораль имеет столь древние корни что исследование этих обстоятельств выходит далеко за рамки этой статьи. Явление ангелов, засилье тоталитарных религий и государств, постоянные войны, в которых «иные» три тысячелетия ковали свое будущее «оружие победы», вот только малая часть картины.<br><br>Также не подлежит сомнению что при уровне технологий Иных некоторые члены земных государственных и политических структур были полностью подчинены их влиянию. Осуществление плана продолжилось через несколько месяцев после окончания Дилгарской войны.<br><br>На пороге первого контакта с Минбари, «агенты иных» проникли в аппарат Сената Альянса и некоторые ключевые ведомства ЗА и организовали подготовку для начала войны: помощь дипломатов Центавра была решительно отклонена в качестве потенциальной угрозы для независимости земной внешней политики.<br><br>Выбор Янковского командующим миссией Первого контакта с Минбари, что имело критическое значение для начала войны, был триумфом «агентов иных». Но Янковский, по сути, является лишь частично ответственным за катастрофу, которая привела к войне с Минбаром. Предположительно в течение нескольких месяцев он действовал под влиянием ментального контроля «агентов иных»  под личной члена Пси-Корпуса. Улики этого преступления были обнаружены только благодаря конфликту внутри Пси-корпуса. С объективной точки зрения, адмирал Янковский был не виновником \"инцидента \"Прометей\", а жертвой обстоятельств: он был просто не тем человеком, в неудачном месте в неудачное время, и он был точно выбран именно в силу этих причин. Возможно даже, что ожидаемый результат представлялся «иным» простым дипломатическим скандалом с последующим периодом холодных отношений, и неизбежным сближением а не всеистребительной войной, но то, что случилось потом, вышло за рамки того, что «агентов иных» планировали и ожидали, и было для них очень плохим сюрпризом.<br><br><br>Последствия войны<br><br>Минбаро-земная война дала длинный ряд последствий, и не только для людей: некоторые из них были позитивными, другие нет.<br><br>Минбарская война подорвала внешнеполитиские позиции, богатство, престиж и авторитет Земного Альянса. То, что казалось нерушимым в течение десяти лет после Дилгарской победы, было в значительной части утрачено: в конце Дилгарской войны земляне были одной из самых уважаемых и почитаемых рас, во время Минбарской войны они рассматривались с подозрением, после войны, в конце концов, земляне были признаны в качестве игрока - по-прежнему актуальны, но по сути их следует опасаться: земляне были достаточно непредсказуемы, чтобы развязать войну без видимой причины, опасные достаточно, чтобы надолго задержать Минбари, достаточно мощные, чтобы преодолеть свою слабость. Никто не знает, сколько Земля будет весить на балансе межзвездной политики.<br><br>На внутреннем уровне все было куда проще: общественное мнение и правительство Земли, с одной стороны, хотели чтобы Земной Альянс стал крепостью против всех возможных угроз, чтобы род человеческий играл ведущую роль в межзвездном сценарии.<br><br>Минбар<br><br>Сегодня можно точно утверждать, что в касте воинов Минбара были те, кто в глубочайшей тайне послали судно, чтобы спасти дилгарского Мастера войны Джа''дур - \"Несущую смерть\" - и скрывали ее на протяжении тридцати лет (2248-2258).<br><br>За гостеприимство Минбари получили поддержку для развития биогенетических видов оружия, но Джа''дур действовала очень хорошо, чтобы посадить семена зла, изображая людей, как чудовищ, истребителей невинной расы дилгар, жаждущих власти, и в долгосрочной перспективе готовивших войну против всех иных рас в этом секторе, искусно скрываясь за маской сторонников жизни и права. Главным образом, Джа''дур привлекала на свою сторону Воинов, разочарованных относительным отсутствием официальной власти у их касты.<br><br>В общем, простой переезд одного Дилгара вышел далеко за рамки просто высокой эффективности, и последствия были опустошительные: воины были в буквальном смысле авторами данной войны, и всегда их голос был определяющим, даже в моменты, когда другие голоса в Минбари, даже среди воинов, требовали положить начало дискуссии по обвинению военных.<br><br>До сих пор не совсем ясно, действовала Джа''дур только из личной мести, или в соответствии с указаниями “иных” или даже некой третьей силы, назовем ее Агенты Т.,: улики в поддержку этой последней гипотезы являются значительными. До самого исчезновения Джа''дур имела доступ к некоторым технологиям, недоступным расе Дилгар. В годы пребывания среди Минбари она имела свободу передвижения и могла поддерживать регулярные контакты с хозяевами.<br><br>Ее действия в 2258 г. на Вавилоне 5 подорвали одну из главных сил ЗА – Пси-корпус, и были прямо направлены на истребление человечества, то есть на разрушение союза созданного таинственными “иными”.<br><br>Это не является окончательным доказательством прямого проникновения агентов Т. в Минбар, но сегодня, приняв во внимание то, что сказано выше, у нас есть достоверные улики попыток этого.<br><br>Правительство Земного Альянса не может позволить предоставить общественности данные, собранные ШОС. Некоторые из этих данных могут иметь глубокие последствия с точки зрения индивидуальной и политической ответственности. Однако подъем политической полемики не является целью нашей работы. Мы просим опубликовать этот отчет, поскольку через 10 лет после войны родственники и друзья 520000 убитых и пропавших без вести граждан Земного Альянса, и родственники 65000 минбари, погибших во время войны, заслужили право знать, почему их родные и близкие не вернутся. Они являются единственными, кто имеет право судить."');

select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person1'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person2'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person30'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person37'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person41'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('system_personal_document'), data.get_object_id('person47'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('document_title'), null, jsonb '"Приказ"');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('name'), null, jsonb '"Приказ"');
select data.set_attribute_value(data.get_object_id('personal_document15'), data.get_attribute_id('content'), null, jsonb '"Военному губернатору директории Эпсилон капитану Д. Шеридану<br>Ввести военное положение на вверенной территории в целях максимального уровня безопасности до завершения расследования аварии президентского корабля.<br>ВП ЗА С. Нейман"');

select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('type'), null, jsonb '"personal_document"');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person50'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person51'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person52'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person53'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person54'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person55'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person56'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person57'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person58'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person1'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person2'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person30'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person37'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person41'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('system_personal_document'), data.get_object_id('person47'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('document_title'), null, jsonb '"Приказ об утверждении следственной группы"');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('name'), null, jsonb '"Приказ об утверждении следственной группы"');
select data.set_attribute_value(data.get_object_id('personal_document16'), data.get_attribute_id('content'), null, jsonb '"В виду высокой важности расследования аварии президентского корабля утверждаю следственную группу в составе:<br>руководителя группы майора Л. Кеммер,<br>генерала Д. Квина,<br>нач. СБ станции Вавилон-5 Д.Гарибальди<br>Всем военным и гражданским лицам необходимо оказывать содействие след. группе.<br>Все допросы по делу должны проводиться в присутствии полного состава группы. Высший уровень секретности, допросы выполняются под подписку о неразглашении, итоговые отчеты по расследованию предоставляются в двух экземплярах: Президенту и Главе Комитета ЗА по Обороне.<br><br>Глава Комитета Сената ЗА по Обороне С. Нейман."');

insert into data.objects(code) values ('NT23IK8');
select data.set_attribute_value(data.get_object_id('NT23IK8'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('NT23IK8'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('NT23IK8'), data.get_attribute_id('document_title'), null, jsonb '"Тайное соглашение Милош Йович - Мать Бутхи"');
select data.set_attribute_value(data.get_object_id('NT23IK8'), data.get_attribute_id('name'), null, jsonb '"Тайное соглашение Милош Йович - Мать Бутхи"');
select data.set_attribute_value(data.get_object_id('NT23IK8'), data.get_attribute_id('content'), null, jsonb '"Синдикат Антареса в лице Матери Бутхи передает во временное пользование 5 (пять) органических образцов для изучения и создания вакцины от Драффы. Милош Йович как представитель компании \"Umbrella\" обязуется предоставить результаты исследований в случае успешного тестирования вакцины и по завершению исследований вернуть органические образцы Синдикату Антареса."');

insert into data.objects(code) values ('TY45LP9');
select data.set_attribute_value(data.get_object_id('TY45LP9'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('TY45LP9'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('TY45LP9'), data.get_attribute_id('document_title'), null, jsonb '"Объект FMO-2607"');
select data.set_attribute_value(data.get_object_id('TY45LP9'), data.get_attribute_id('name'), null, jsonb '"Объект FMO-2607"');
select data.set_attribute_value(data.get_object_id('TY45LP9'), data.get_attribute_id('content'), null, jsonb '"1. Структурный анализ выявил места для подключения к медицинской аппаратуре и возможные «клеммы» для присоединения к организму.<br>2. Упоминания о предмете, исцеляющем от любых болезней есть во многих культурах, но похожие объекты были упомянуты в мифах расы маркабов.<br>3. Теплоемкость объекта и его состав (смесь органики и металла)предполагают, что для работы объект потребляет как обычную энергию, так и энергию, вырабатываемую органическими формами жизни.<br>4. Жизненные силы и здоровье объекта, подключенного к стороне «Донор» будут переданы объекту на стороне «Реципиент», повреждения организма, болезни и т.д. будут отданы Донору от Реципиента.<br>5. Внешний вид объекта (форма, надписи и символы) напоминает объекты культуры икариан.<br>6. Система Ломос, планета Ломос1<br>7. Предположительно 2-10 тыс. лет."');

insert into data.objects(code) values ('BR73LX4');
select data.set_attribute_value(data.get_object_id('BR73LX4'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('BR73LX4'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('BR73LX4'), data.get_attribute_id('document_title'), null, jsonb '"Объект WHM-1604"');
select data.set_attribute_value(data.get_object_id('BR73LX4'), data.get_attribute_id('name'), null, jsonb '"Объект WHM-1604"');
select data.set_attribute_value(data.get_object_id('BR73LX4'), data.get_attribute_id('content'), null, jsonb '"1. Объект не потребляет никакие ресурсы, кроме энергии, вырабатываемой живыми организмами.<br>2. В архивах с данными о расе икариан упоминается военная машина – робот, элементы брони которого очень напоминают объект. Целью создания таких роботов было очищение расы икариан. Именно это изобретение погубило практически всю расу создателей робота.<br>3. После контакта объекта с живыми клетками происходит коренная перестройка генома живых клеток. Обратная трансформация невозможна даже после прерывания контакта.<br>4. Собранные сведения свидетельствуют о том, что создателями объекта являются икариане.<br>5. Наблюдение показало, что объект не имеет каких-либо разъемов, делающих возможным подключение к какому-либо аппарату или источнику питания.<br>6. Система Ломос, планета Ломос1<br>7. Предположительно 2-3 тыс. лет."');

insert into data.objects(code) values ('MW11GY7');
select data.set_attribute_value(data.get_object_id('MW11GY7'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('MW11GY7'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('MW11GY7'), data.get_attribute_id('document_title'), null, jsonb '"Объект «медуза»"');
select data.set_attribute_value(data.get_object_id('MW11GY7'), data.get_attribute_id('name'), null, jsonb '"Объект «медуза»"');
select data.set_attribute_value(data.get_object_id('MW11GY7'), data.get_attribute_id('content'), null, jsonb '"1. Объект испускает сигнал, совместимый с волной тахионного передатчика и может быть направлен с его помощью.<br>2. В месте, где был обнаружен объект, был найден манускрипт с изображением «Луча смерти». БОльшая часть текста безвозвратно утеряна, но на сохранившемся фрагменте можно разобрать только одну надпись: «Все перед смертью равны, и никто не будет спасен»<br>3. Объект состоит из вещества, имеющего маленькую энергоемкость и очень большую плотность. Потребление энергии минимально.<br>4. При подаче энергии усиливает и изменяет волновые сигналы. Любая органика, находящаяся на пути волны, погибает.<br>5. Внешне объект схож с изображениями объектов икариан.<br>6. Система Ломос, планета Ломос1<br>7. Предположительно 6-8 тыс. лет."');

insert into data.objects(code) values ('ZH91QA5');
select data.set_attribute_value(data.get_object_id('ZH91QA5'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('ZH91QA5'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('ZH91QA5'), data.get_attribute_id('document_title'), null, jsonb '"Карта звездного пути до ЗаХаДум"');
select data.set_attribute_value(data.get_object_id('ZH91QA5'), data.get_attribute_id('name'), null, jsonb '"Карта звездного пути до ЗаХаДум"');
select data.set_attribute_value(data.get_object_id('ZH91QA5'), data.get_attribute_id('content'), null, jsonb '"В документе подробно расписано, как добраться до ЗаХаДум"');

insert into data.objects(code) values ('TA24NT5');
select data.set_attribute_value(data.get_object_id('TA24NT5'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('TA24NT5'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('TA24NT5'), data.get_attribute_id('document_title'), null, jsonb '"Выдержка из транзакций А. Бах"');
select data.set_attribute_value(data.get_object_id('TA24NT5'), data.get_attribute_id('name'), null, jsonb '"Выдержка из транзакций А. Бах"');
select data.set_attribute_value(data.get_object_id('TA24NT5'), data.get_attribute_id('content'), null, jsonb '"Транзакция. Перевод между счетами “Хенгист Кербер” (отправитель) и “Александра Бах” (получатель). Сумма: 10000 кредитов. 2255 г.<br>Транзакция. Перевод между счетами “Александра Бах” (отправитель) и №9000657821245006 (получатель). Сумма 5000 кредитов. 2258 г.<br>Транзакция. Перевод между счетами “Александра Бах” (отправитель) и №9000669796543344 (получатель). Сумма 3000 кредитов. 2258 г.<br>Транзакция. Перевод между счетами “Александра Бах” (отправитель) и №9000658912348302 (получатель). Сумма 2000 кредитов. 2258 г."');

insert into data.objects(code) values ('UR51SA6');
select data.set_attribute_value(data.get_object_id('UR51SA6'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('UR51SA6'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('UR51SA6'), data.get_attribute_id('document_title'), null, jsonb '"Перевод от Александры Бах на счёт Оливии Раквелли"');
select data.set_attribute_value(data.get_object_id('UR51SA6'), data.get_attribute_id('name'), null, jsonb '"Перевод от Александры Бах на счёт Оливии Раквелли"');
select data.set_attribute_value(data.get_object_id('UR51SA6'), data.get_attribute_id('content'), null, jsonb '"Транзакция. Перевод между счетами “Александра Бах” (отправитель) и “Оливия Раквери”(получатель). Сумма 2000 кредитов. 2258 г."');

insert into data.objects(code) values ('MR39HA8');
select data.set_attribute_value(data.get_object_id('MR39HA8'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('MR39HA8'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('MR39HA8'), data.get_attribute_id('document_title'), null, jsonb '"Сопроводительное письмо"');
select data.set_attribute_value(data.get_object_id('MR39HA8'), data.get_attribute_id('name'), null, jsonb '"Сопроводительное письмо"');
select data.set_attribute_value(data.get_object_id('MR39HA8'), data.get_attribute_id('content'), null, jsonb '"В связи с невозможностью оказать необходимую медицинскую помощь, с планеты Берлин-2 на станцию Вавилон-5 переводятся пациенты, находящиеся в криозаморозке."');

insert into data.objects(code) values ('KJ58ER3');
select data.set_attribute_value(data.get_object_id('KJ58ER3'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('KJ58ER3'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('KJ58ER3'), data.get_attribute_id('document_title'), null, jsonb '"Закрытие проекта Архангел"');
select data.set_attribute_value(data.get_object_id('KJ58ER3'), data.get_attribute_id('name'), null, jsonb '"Закрытие проекта Архангел"');
select data.set_attribute_value(data.get_object_id('KJ58ER3'), data.get_attribute_id('content'), null, jsonb '"От руководителя Пси-надзора Рикардо Дель Густо<br>Полковнику Джордану Квину - начальнику отдела контрразведки, округ Женева<br>Копия: руководитель группы прикрытия Линна Кеммер (Александра Бах)<br>Совершенно секретно<br>Проект архангел, закрыт. Необходимо оказать Корпусу помощь в зачистке гражданских исполнителей - прошу Вас организовать зачистку силами группы прикрытия.<br>Тойво Ларсен - согласился на установку смертной сети - исключить из объектов зачистки.<br>Требуется устранить следующих лиц, так, чтобы их смерть выглядела смертью от несчастного случая:<br>Елена Франклин<br>Диана Йович<br>Исаак Бабель<br>Владимир Набоков<br>Р.Д. Густо<br>Женева. Земля Земной Альянс. 23 августа 2255 года<br>Резолюция полковника Д. Квина:<br>Исаак Бабель и Владимир Набоков приняты к исполнению.<br>Что касается Франклин и Йович, я не имею права принимать решения об устранении фигур такого уровня. Рекомендую договориться с группой прикрытия непосредственно, минуя официальные каналы.<br>Д. Квин<br>Женева. Земля Земной Альянс. 23 августа 2255 года"');

insert into data.objects(code) values ('VZ18KP8');
select data.set_attribute_value(data.get_object_id('VZ18KP8'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('VZ18KP8'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('VZ18KP8'), data.get_attribute_id('document_title'), null, jsonb '"Согласие на применение экспериментального препарата"');
select data.set_attribute_value(data.get_object_id('VZ18KP8'), data.get_attribute_id('name'), null, jsonb '"Согласие на применение экспериментального препарата"');
select data.set_attribute_value(data.get_object_id('VZ18KP8'), data.get_attribute_id('content'), null, jsonb '"Я, Анна Корсак, согласна на применение экспериментальной сыворотки, произведенной корпорацией Амбрелла. О возможных побочных эффектах предупреждена. Претензий по поводу изменения (понижения) П-рейтинга не имею."');

insert into data.objects(code) values ('ST71AR8');
select data.set_attribute_value(data.get_object_id('ST71AR8'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('ST71AR8'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('ST71AR8'), data.get_attribute_id('document_title'), null, jsonb '"Экипаж корабля “Персей”"');
select data.set_attribute_value(data.get_object_id('ST71AR8'), data.get_attribute_id('name'), null, jsonb '"Экипаж корабля “Персей”"');
select data.set_attribute_value(data.get_object_id('ST71AR8'), data.get_attribute_id('content'), null, jsonb '"Лорейн Метьюс<br>Арнольд Шварц<br>Юстас Алексис<br>Дэрил Хантер<br>Мордехай Коэн<br>Эмбер Паркер<br>Джулия Саммер<br>Патрик Джейн<br>Люсьен Морден<br>Анна Шерридан<br>Меган Золтан<br>Таня Крестова<br>Ульрих Триер<br>Адалинда Шорт<br>Владимир Ургант<br>Адриан Чейз<br>Джон Шекли<br>Анатолий Сикорски"');

insert into data.objects(code) values ('MP11AA9');
select data.set_attribute_value(data.get_object_id('MP11AA9'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('MP11AA9'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('MP11AA9'), data.get_attribute_id('document_title'), null, jsonb '"Маршрут следования президентского кортежа"');
select data.set_attribute_value(data.get_object_id('MP11AA9'), data.get_attribute_id('name'), null, jsonb '"Маршрут следования президентского кортежа"');
select data.set_attribute_value(data.get_object_id('MP11AA9'), data.get_attribute_id('content'), null, jsonb '"Подробно расписан маршрут следования президентского кортежа."');

insert into data.objects(code) values ('MK56MS7');
select data.set_attribute_value(data.get_object_id('MK56MS7'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('MK56MS7'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('MK56MS7'), data.get_attribute_id('document_title'), null, jsonb '"Контракт о найме дублёра"');
select data.set_attribute_value(data.get_object_id('MK56MS7'), data.get_attribute_id('name'), null, jsonb '"Контракт о найме дублёра"');
select data.set_attribute_value(data.get_object_id('MK56MS7'), data.get_attribute_id('content'), null, jsonb '"Контракт на имя Мерил Стрип о найме на работу для исполнения роли дублера.<br>от 3 сентября 2258г."');

insert into data.objects(code) values ('TL34MI3');
select data.set_attribute_value(data.get_object_id('TL34MI3'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('TL34MI3'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('TL34MI3'), data.get_attribute_id('document_title'), null, jsonb '"Тайное соглашение Тойво Ларсен - Ma''Kan Industries"');
select data.set_attribute_value(data.get_object_id('TL34MI3'), data.get_attribute_id('name'), null, jsonb '"Тайное соглашение Тойво Ларсен - Ma''Kan Industries"');
select data.set_attribute_value(data.get_object_id('TL34MI3'), data.get_attribute_id('content'), null, jsonb '"Ma''Kan Industries поставляет для проекта “Галатея-2”оборудование с биочипами."');

insert into data.objects(code) values ('TL43MK8');
select data.set_attribute_value(data.get_object_id('TL43MK8'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('TL43MK8'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('TL43MK8'), data.get_attribute_id('document_title'), null, jsonb '"Тайное соглашение Тойво Ларсен - Марба"');
select data.set_attribute_value(data.get_object_id('TL43MK8'), data.get_attribute_id('name'), null, jsonb '"Тайное соглашение Тойво Ларсен - Марба"');
select data.set_attribute_value(data.get_object_id('TL43MK8'), data.get_attribute_id('content'), null, jsonb '"“Марба” поставляет для проекта “Галатея-2”оборудование с биочипами."');

insert into data.objects(code) values ('GM58MJ6');
select data.set_attribute_value(data.get_object_id('GM58MJ6'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('GM58MJ6'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('GM58MJ6'), data.get_attribute_id('document_title'), null, jsonb '"Посылка"');
select data.set_attribute_value(data.get_object_id('GM58MJ6'), data.get_attribute_id('name'), null, jsonb '"Посылка"');
select data.set_attribute_value(data.get_object_id('GM58MJ6'), data.get_attribute_id('content'), null, jsonb '"Милош, присылаю тебе ещё двух \"ничейных\" телепатов - их поймали мои люди при попытке сбежать на Юкаса. Надеюсь, теперь исследование нашего препарата пойдёт успешнее."');

insert into data.objects(code) values ('KE17MI2');
select data.set_attribute_value(data.get_object_id('KE17MI2'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('KE17MI2'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('KE17MI2'), data.get_attribute_id('document_title'), null, jsonb '"Отчет о проведении раскопок"');
select data.set_attribute_value(data.get_object_id('KE17MI2'), data.get_attribute_id('name'), null, jsonb '"Отчет о проведении раскопок"');
select data.set_attribute_value(data.get_object_id('KE17MI2'), data.get_attribute_id('content'), null, jsonb '"Ксенообъект, найденный на Ганимеде компанией Марс Индастриз, обладает уникальными свойствами брони и представляет большой научный интерес."');

insert into data.objects(code) values ('TC15DG3');
select data.set_attribute_value(data.get_object_id('TC15DG3'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('TC15DG3'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('TC15DG3'), data.get_attribute_id('document_title'), null, jsonb '"Присяга"');
select data.set_attribute_value(data.get_object_id('TC15DG3'), data.get_attribute_id('name'), null, jsonb '"Присяга"');
select data.set_attribute_value(data.get_object_id('TC15DG3'), data.get_attribute_id('content'), null, jsonb '"Я, Джузеппе Гаррибальди, вступаю в ряды общества “Чистое человечество” и обязуюсь приложить все силы ради очищения Галактики от мутантов."');

insert into data.objects(code) values ('DS35KA6');
select data.set_attribute_value(data.get_object_id('DS35KA6'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('DS35KA6'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('DS35KA6'), data.get_attribute_id('document_title'), null, jsonb '"Отчет информатора"');
select data.set_attribute_value(data.get_object_id('DS35KA6'), data.get_attribute_id('name'), null, jsonb '"Отчет информатора"');
select data.set_attribute_value(data.get_object_id('DS35KA6'), data.get_attribute_id('content'), null, jsonb '"В преступной организации Алан-Та сменился лидер. Теперь организацию возглавляет драззи Драал Ситхар. 2239 г."');

insert into data.objects(code) values ('EP24KR6');
select data.set_attribute_value(data.get_object_id('EP24KR6'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('EP24KR6'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('EP24KR6'), data.get_attribute_id('document_title'), null, jsonb '"Квитанция"');
select data.set_attribute_value(data.get_object_id('EP24KR6'), data.get_attribute_id('name'), null, jsonb '"Квитанция"');
select data.set_attribute_value(data.get_object_id('EP24KR6'), data.get_attribute_id('content'), null, jsonb '"Аренда склада №638 на срок 6 месяцев. К оплате 300 кредитов."');

insert into data.objects(code) values ('LN49MA1');
select data.set_attribute_value(data.get_object_id('LN49MA1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('LN49MA1'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('LN49MA1'), data.get_attribute_id('document_title'), null, jsonb '"Тайное Соглашение (договор) о взаимоотношениях цивилизаций Лиги Неприсоединившихся Миров и ордена Анла’Шок"');
select data.set_attribute_value(data.get_object_id('LN49MA1'), data.get_attribute_id('name'), null, jsonb '"Тайное Соглашение (договор) о взаимоотношениях цивилизаций Лиги Неприсоединившихся Миров и ордена Анла’Шок"');
select data.set_attribute_value(data.get_object_id('LN49MA1'), data.get_attribute_id('content'), null, jsonb '"Настоящий договор является перечнем базовых положений для обеспечения сотрудничества Совета Лиги Неприсоединившихся Миров и ордена Анла’Шок.<br>1. Лига Неприсоединившихся Миров предоставляет планету Ломос, находящиеся под ее протекторатом или протекторатом одного или нескольких членов Лиги, под управление и для пользования орденом Анла’Шок.<br>2. Орден Анла’Шок имеет право использовать предоставленные территории для размещения производственных баз, стоянок кораблей, технических систем, тренировочных лагерей.<br>2.1 Орден обязан уведомить Лигу о найденных на предоставляемой территории артефактах, редких ископаемых, аномалиях и других неучтённых особенностях местности. Орден по согласованию с Лигой передает найденное Лиге либо оставляет в свое пользование.<br>2.2 Орден не имеет права продавать, сдавать в аренду или иным способом передавать предоставленные территории или постройки, размещённые на этих территориях, в пользование не членам Ордена или Лиги.<br>3. Лига Неприсоединившихся Миров имеет право прислать своего представителя на вышеназванные территории с правом доступа в пункт управления.<br>4. Любые представители Лиги Неприсоединившихся Миров и/или Совет Лиги имеют право заключать с орденом Анла’Шок соглашения о совместной деятельности, как-то: совместные исследования, экспедиции, учения, разработки, строительство, взаимовыгодная торговля любыми технологиями и ресурсами. Данные соглашения разрабатываются отдельно, и не должны противоречить договору.<br>5. Лига гарантирует финансирование исследований, разработки, строительства технических устройств в объеме, достаточном для выполнения годового плана ордена Анла’Шок. Финансирование выделяется до начала выполнения годового плана. В случае невыполнения данного обязательства орден Анла’Шок оставляет за собой право привлекать иные источники финансирования без предоставления отчетности по ним Совету Лиги, но уведомляет Лигу об этом.<br>6. О расходовании средств, предоставленных Лигой, орден Анла’Шок обязуется предоставлять отчет в конце годового цикла. Произведенные за годовой цикл интеллектуальные и материальные ценности передаются в собственность Лиги, либо того члена Лиги, который непосредственно финансировал разработку.<br>7. Произведенные боевые крейсеры класса «Белая Звезда» остаются в собственности и под управлением ордена Анла’Шок. Техническая документация на крейсеры может быть передана Лиге по отдельному договору.<br>8. Лига Неприсоединившихся Миров имеет право связи с любой базой Анла’Шок, расположенной на вышеназванных территориях. Лига Неприсоединившихся Миров имеет право связи с любым кораблем Анла’Шок, базирующемся на вышеназванных территориях.<br>9. В случае экстренной необходимости Штандарт-Лидер Галотты имеет право отдать приказ о перемещении любых кораблей Анла’Шок, базирующихся на вышеназванных территориях. В ситуации, если Галотта не назначила штандарт-лидера или он является недееспособным, данное право распространяется на любого другого члена Совета Лиги, уполномоченного Советом Лиги. Под экстренной ситуацией понимается случай нападения на любого из членов Лиги флота Теней, дилгар, дракхов, стрейбов, хурров, громе, зенеров, гоблинов и цивилизаций, заключивших с ними военные соглашения, а также любых агрессоров, вторгшихся на территории, находящиеся под протекторатом одного или нескольких членов Лиги.<br>10. Лига Неприсоединившихся Миров не имеет права вести военные действия между представителями цивилизаций, входящих в Лигу. В случае начала подобных военных действий данный договор немедленно прекращает свое действие.<br>11. Орден Анла’Шок не имеет права вести военные действия на территориях Лиги без согласования с Советом Лиги, кроме экстренных случаев, указанных в п. 9<br>12. Представители ордена Анла’Шок допускаются в любые миры Лиги для временного и постоянного пребывания. Они обязаны соблюдать законодательство цивилизации, в пределах которой пребывают. В случае нарушения законодательства во время пребывания в мире Лиги член Ордена может как понести наказание по законам Лиги, так и быть переданным Ордену Анла’Шок. Для передачи преступника нужен запрос от Ордена и согласие на выдачу от того члена Лиги, на территории которого было совершено преступление. Лига обязана уведомить Орден о преступнике до применения необратимых наказаний.<br>13. Корабли Анла’Шок могут свободно перемещаться по территории Лиги и зонам влияния ее членов. Данный договор гарантирует запрет на вооруженные столкновения любых кораблей членов Лиги и кораблей ордена Анла’Шок.<br>14. Орден Анла’Шок приложит все усилия к сохранению мира на территориях Лиги, а именно: с помощью своих кораблей и представителей обязуется отслеживать перемещения флотов, потенциально опасных для членов Лиги, и оповещать Совет Лиги об этих перемещениях. Эти флоты: Теней, дилгар, дракхов, стрейбов, хурров, громе, зенеров, гоблинов и цивилизаций, заключивших с ними военные соглашения, а также любых агрессоров, вторгшихся на территории, находящиеся под протекторатом одного или нескольких членов Лиги.<br>15. В случае, если Лига, как единое образование, заключает военные  соглашения с вышеназванными цивилизациями Теней, дилгар, дракхов, стрейбов, хурров, громе, зенеров, гоблинов, данный договор немедленно прекращает свое действие.<br>16. Орден Анла’Шок имеет право заключать военные соглашения с любым из членов Лиги, либо с самой Лигой против вышеназванных цивилизаций и отражать их нападения совместно, с предварительным уведомлением Совета Лиги.<br>17. За предоставленные территории и финансирование орден Анла`Шок обязуется оборудовать производственные комплексы и корабли Лиги радарами и инфокристаллами по минбарским технологиям уровня 5 (или выше) и производить регулярное и необходимое техническое обслуживание установленного оборудования на территории Лиги и/или базы Ордена в течение срока действия договора. Количество и сроки установки оборудования определить в отдельном приложении к договору.<br>18. Кроме случаев, указанных в п.п.10 и 15, договор может быть также расторгнут в одностороннем порядке до истечения срока его действия любой из договаривающихся сторон (Лигой в целом или Орденом) с уведомлением всех участников не менее, чем за 1 стандартный месяц, или без предварительного уведомления с уплатой неустойки в размере 1/12 объема годового финансирования базы Ордена Анла’Шок. Остаток суммы финансирования возвращается в размере N/12 от годовой выплаты, где N = число полных оставшихся до конца финансового года месяцев, но не менее единицы. В случае расторжения договора Орден обязан вывести свои корабли с территории Лиги в кратчайшие сроки (за исключением транспортников для перевозки персонала и оборудования с базы и одного корабля сопровождения для каждого транспортника).<br><br>Составлено: на планете Бракос II в 1276 году от пришествия Бога по календарю Маркаби<br>Срок действия договора: неограничен<br>Утверждено:<br>от Анла’Шок - Первый Рейнджер Ирида Шафтброк<br>От Народа Драззи - Разз Акри<br>От Народа Бракири - Диргал Даран Кэн<br>От Идеократии Маркаби - Архонт Назаренн<br>От гнезда Геймов - Бос Жужелиц<br>От народа ПаКМара - Т,Руп Оед<br>От народа Аббаев - Риба Тухла"');

insert into data.objects(code) values ('DG37AH4');
select data.set_attribute_value(data.get_object_id('DG37AH4'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('DG37AH4'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('DG37AH4'), data.get_attribute_id('document_title'), null, jsonb '"Разрешение на вывоз тела"');
select data.set_attribute_value(data.get_object_id('DG37AH4'), data.get_attribute_id('name'), null, jsonb '"Разрешение на вывоз тела"');
select data.set_attribute_value(data.get_object_id('DG37AH4'), data.get_attribute_id('content'), null, jsonb '"Разрешение на вывоз тела Рикардо Дель Густо. Подписано Акио Хитоши. 2257 г."');

insert into data.objects(code) values ('LK22MK9');
select data.set_attribute_value(data.get_object_id('LK22MK9'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('LK22MK9'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('LK22MK9'), data.get_attribute_id('document_title'), null, jsonb '"Африканские маски"');
select data.set_attribute_value(data.get_object_id('LK22MK9'), data.get_attribute_id('name'), null, jsonb '"Африканские маски"');
select data.set_attribute_value(data.get_object_id('LK22MK9'), data.get_attribute_id('content'), null, jsonb '"Дорогой друг Хань!<br>Рад сообщить тебе, что последняя коллекция африкановских масок пользуется на моей родине, как вы, земляне, выражаетесь, «бешенным успехом». Фактическое подтверждение моих слов уже поступило на известный тебе счёт и, смею надеяться, размер поступлений приятно удивит тебя и твоих достопочтенных партнёров. Что касается просьбы вашего высокочтимого отца, то я лично позаботился о приобретении и отправке прекрасных статуэток Тэнво и Шиа-лет периода Первой Империи, и ты можешь быть абсолютно уверен в их подлинности.<br>Теперь о прочих делах. Мои агенты предприняли разыскания в указанном тобой направлении, и след оказался верным. Нет никаких сомнений, что поставки так называемого слэга имеют своим источником антаресский дом Бхара. Не могу с уверенностью утверждать, что именно Бхара его производят, но загрузка винжекторов производится на их астероидных фабриках, координаты которых прилагаю. В том случае если твоим рекламационным агентам потребуется помощь в доставке претензий, я и мои люди с удовольствием такую помощь окажем, включая билеты туда и обратно. Надеюсь, что тебя не затруднит передать представителям Бхара также и мой личный горячий привет.<br>За сим<br>Остаюсь твоим верным другом, Л. М.<br>Вложение: координаты."');

insert into data.objects(code) values ('LK67AS1');
select data.set_attribute_value(data.get_object_id('LK67AS1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('LK67AS1'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('LK67AS1'), data.get_attribute_id('document_title'), null, jsonb '"Отчет Лианны Кеммер Джордану Квину"');
select data.set_attribute_value(data.get_object_id('LK67AS1'), data.get_attribute_id('name'), null, jsonb '"Отчет Лианны Кеммер Джордану Квину"');
select data.set_attribute_value(data.get_object_id('LK67AS1'), data.get_attribute_id('content'), null, jsonb '"Кеммер - Квину. Отчет о предвыборной кампании Мэри Кейн от 20 ноября 2257<br>Кеммер - Квину. Отчет о предвыборной кампании Мэри Кейн от 10 декабря 2257<br>Кеммер - Квину. Отчет о предвыборной кампании Мэри Кейн от 23 декабря 2257"');

insert into data.objects(code) values ('SH4567');
select data.set_attribute_value(data.get_object_id('SH4567'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('SH4567'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('SH4567'), data.get_attribute_id('document_title'), null, jsonb '"Транзакция"');
select data.set_attribute_value(data.get_object_id('SH4567'), data.get_attribute_id('name'), null, jsonb '"Транзакция"');
select data.set_attribute_value(data.get_object_id('SH4567'), data.get_attribute_id('content'), null, jsonb '"Перевод между счетами “Саул У-Хань” (отправитель) и “Лондо Моллари” (получатель). Сумма: 100000. Цель платежа: оплата препарата “NKU0503”."');

insert into data.objects(code) values ('GH67AS1');
select data.set_attribute_value(data.get_object_id('GH67AS1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('GH67AS1'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('GH67AS1'), data.get_attribute_id('document_title'), null, jsonb '"Отчёт судна №382961"');
select data.set_attribute_value(data.get_object_id('GH67AS1'), data.get_attribute_id('name'), null, jsonb '"Отчёт судна №382961"');
select data.set_attribute_value(data.get_object_id('GH67AS1'), data.get_attribute_id('content'), null, jsonb '"Данное транспортное средство борт №382961. Прыжок Станция Вавилон-5-аванпост Карма. Включен маскирующий режим, запрос на выход  в космос и отсоединение груза. Отсутствие экипажа на борту 20 минут. Запрос на допуск экипажа на борт. Прыжок Аванпост Карма-станция Вавилон-5.<br>Швартовка в доках №45"');

insert into data.objects(code) values ('IM66AM1');
select data.set_attribute_value(data.get_object_id('IM66AM1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('IM66AM1'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('IM66AM1'), data.get_attribute_id('document_title'), null, jsonb '"Соглашение о предоставлении больных"');
select data.set_attribute_value(data.get_object_id('IM66AM1'), data.get_attribute_id('name'), null, jsonb '"Соглашение о предоставлении больных"');
select data.set_attribute_value(data.get_object_id('IM66AM1'), data.get_attribute_id('content'), null, jsonb '"Тайное соглашение:<br>Дом Бхара (Антарес) - Лазаренн (Лига неприсоединившихся миров). <br>О предоставлении инфицированных больных с целью их изучения и создания на основе исследований вакцины от Драффы сроком на 2 года. <br>Дата подписания 3 сентября 2256 г."');

insert into data.objects(code) values ('PO34HG1');
select data.set_attribute_value(data.get_object_id('PO34HG1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('PO34HG1'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('PO34HG1'), data.get_attribute_id('document_title'), null, jsonb '"Ксеноартефакт"');
select data.set_attribute_value(data.get_object_id('PO34HG1'), data.get_attribute_id('name'), null, jsonb '"Ксеноартефакт"');
select data.set_attribute_value(data.get_object_id('PO34HG1'), data.get_attribute_id('content'), null, jsonb '"Ксеноартефакт. Электронное устройство, испускающее волны, воздействующие на нейроны. Требуется подключение к системе связи."');

insert into data.objects(code) values ('QW12ER2');
select data.set_attribute_value(data.get_object_id('QW12ER2'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('QW12ER2'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('QW12ER2'), data.get_attribute_id('document_title'), null, jsonb '"Письмо от неизвестного отправителя"');
select data.set_attribute_value(data.get_object_id('QW12ER2'), data.get_attribute_id('name'), null, jsonb '"Письмо от неизвестного отправителя"');
select data.set_attribute_value(data.get_object_id('QW12ER2'), data.get_attribute_id('content'), null, jsonb '"Примечание: отправителя отследить невозможно.<br>Требуем выделить нам энергетические мощности на 23 уровне. Если вы откажетесь сотрудничать,  ваш отец серьезно пострадает."');

insert into data.objects(code) values ('YU23PJ1');
select data.set_attribute_value(data.get_object_id('YU23PJ1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('YU23PJ1'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('YU23PJ1'), data.get_attribute_id('document_title'), null, jsonb '"Соглашение о предоставлении помещения"');
select data.set_attribute_value(data.get_object_id('YU23PJ1'), data.get_attribute_id('name'), null, jsonb '"Соглашение о предоставлении помещения"');
select data.set_attribute_value(data.get_object_id('YU23PJ1'), data.get_attribute_id('content'), null, jsonb '"Тайное соглашение между Милошем Йовичем  и Белой Хризантемой о предоставлении энергетических мощностей на 23 уровне станции Вавилон-5, а также о предоставлении помещения для лаборатории."');

insert into data.objects(code) values ('PQ12GH3');
select data.set_attribute_value(data.get_object_id('PQ12GH3'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('PQ12GH3'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('PQ12GH3'), data.get_attribute_id('document_title'), null, jsonb '"Договор между матерью Бутхи и матерью Рийной"');
select data.set_attribute_value(data.get_object_id('PQ12GH3'), data.get_attribute_id('name'), null, jsonb '"Договор между матерью Бутхи и матерью Рийной"');
select data.set_attribute_value(data.get_object_id('PQ12GH3'), data.get_attribute_id('content'), null, jsonb '"Договор между матерью Бутхи и матерью Рийной<br>О том, что решение, принятое по поводу матери Элайны является обоюдным, взаимных претензий по поводу последствий принятого решения у сторон к друг другу нет. Исполнитель согласован. Оплатой его услуг являются медикаменты."');

insert into data.objects(code) values ('KA45RJ1');
select data.set_attribute_value(data.get_object_id('KA45RJ1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('KA45RJ1'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('KA45RJ1'), data.get_attribute_id('document_title'), null, jsonb '"Формула препарата KRA1408"');
select data.set_attribute_value(data.get_object_id('KA45RJ1'), data.get_attribute_id('name'), null, jsonb '"Формула препарата KRA1408"');
select data.set_attribute_value(data.get_object_id('KA45RJ1'), data.get_attribute_id('content'), null, jsonb '"В документе приведена формула препарата KRA1408"');

insert into data.objects(code) values ('DF45RJ2');
select data.set_attribute_value(data.get_object_id('DF45RJ2'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('DF45RJ2'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('DF45RJ2'), data.get_attribute_id('document_title'), null, jsonb '"Формула препарата NKU0503"');
select data.set_attribute_value(data.get_object_id('DF45RJ2'), data.get_attribute_id('name'), null, jsonb '"Формула препарата NKU0503"');
select data.set_attribute_value(data.get_object_id('DF45RJ2'), data.get_attribute_id('content'), null, jsonb '"В документе приведена формула препарата NKU0503"');

insert into data.objects(code) values ('MN37AG1');
select data.set_attribute_value(data.get_object_id('MN37AG1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('MN37AG1'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('MN37AG1'), data.get_attribute_id('document_title'), null, jsonb '"Формула эликсира жизни, часть 1 из 4"');
select data.set_attribute_value(data.get_object_id('MN37AG1'), data.get_attribute_id('name'), null, jsonb '"Формула эликсира жизни, часть 1 из 4"');
select data.set_attribute_value(data.get_object_id('MN37AG1'), data.get_attribute_id('content'), null, jsonb '"В документе приведена часть формулы эликсира жизни, HDM3067"');

insert into data.objects(code) values ('VN89ZX2');
select data.set_attribute_value(data.get_object_id('VN89ZX2'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('VN89ZX2'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('VN89ZX2'), data.get_attribute_id('document_title'), null, jsonb '"Формула эликсира жизни, часть 2 из 4"');
select data.set_attribute_value(data.get_object_id('VN89ZX2'), data.get_attribute_id('name'), null, jsonb '"Формула эликсира жизни, часть 2 из 4"');
select data.set_attribute_value(data.get_object_id('VN89ZX2'), data.get_attribute_id('content'), null, jsonb '"В документе приведена часть формулы эликсира жизни, SMP7172"');

insert into data.objects(code) values ('MQ19AL3');
select data.set_attribute_value(data.get_object_id('MQ19AL3'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('MQ19AL3'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('MQ19AL3'), data.get_attribute_id('document_title'), null, jsonb '"Формула эликсира жизни, часть 3 из 4"');
select data.set_attribute_value(data.get_object_id('MQ19AL3'), data.get_attribute_id('name'), null, jsonb '"Формула эликсира жизни, часть 3 из 4"');
select data.set_attribute_value(data.get_object_id('MQ19AL3'), data.get_attribute_id('content'), null, jsonb '"В документе приведена часть формулы эликсира жизни, DKE9374"');

insert into data.objects(code) values ('HQ39JL4');
select data.set_attribute_value(data.get_object_id('HQ39JL4'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('HQ39JL4'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('HQ39JL4'), data.get_attribute_id('document_title'), null, jsonb '"Формула эликсира жизни, часть 4 из 4"');
select data.set_attribute_value(data.get_object_id('HQ39JL4'), data.get_attribute_id('name'), null, jsonb '"Формула эликсира жизни, часть 4 из 4"');
select data.set_attribute_value(data.get_object_id('HQ39JL4'), data.get_attribute_id('content'), null, jsonb '"В документе приведена часть формулы эликсира жизни, PUT2018"');

insert into data.objects(code) values ('EP81DR1');
select data.set_attribute_value(data.get_object_id('EP81DR1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('EP81DR1'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('EP81DR1'), data.get_attribute_id('document_title'), null, jsonb '"Тайное соглашение о сотрудничестве с домом Риоваль о взаимовыгодном обмене"');
select data.set_attribute_value(data.get_object_id('EP81DR1'), data.get_attribute_id('name'), null, jsonb '"Тайное соглашение о сотрудничестве с домом Риоваль о взаимовыгодном обмене"');
select data.set_attribute_value(data.get_object_id('EP81DR1'), data.get_attribute_id('content'), null, jsonb '"Я, Ежи  Пилсудски, заключаю Сделку с домом Риоваль о предоставлении появляющейся у меня секретной информации о новейших разработках ЗА в обмен на акции корпорации РокетДайн и предоставлении мне поста в Совете директоров компании.<br>Подписано матерью Рийной из дома Риоваль и Ежи Пилсудски"');

insert into data.objects(code) values ('CH73OM2');
select data.set_attribute_value(data.get_object_id('CH73OM2'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('CH73OM2'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('CH73OM2'), data.get_attribute_id('document_title'), null, jsonb '"Договор о поставках систем типа Полог невидимости"');
select data.set_attribute_value(data.get_object_id('CH73OM2'), data.get_attribute_id('name'), null, jsonb '"Договор о поставках систем типа Полог невидимости"');
select data.set_attribute_value(data.get_object_id('CH73OM2'), data.get_attribute_id('content'), null, jsonb '"Тайное соглашение Договор о поставках систем типа Полог невидимости для кораблей тип \"Черная Омега\".<br>Подписано  матерью Рийной из дома Риоваль и Теодором Бетте"');

insert into data.objects(code) values ('JK81SG2');
select data.set_attribute_value(data.get_object_id('JK81SG2'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('JK81SG2'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('JK81SG2'), data.get_attribute_id('document_title'), null, jsonb '"Транзакция"');
select data.set_attribute_value(data.get_object_id('JK81SG2'), data.get_attribute_id('name'), null, jsonb '"Транзакция"');
select data.set_attribute_value(data.get_object_id('JK81SG2'), data.get_attribute_id('content'), null, jsonb '"Перевод между счетами “Хенгист Кербер” (отправитель) и “Александра Бах” (получатель). Сумма: 10000 кредитов. 2255 г."');

insert into data.objects(code) values ('AH28GJ3');
select data.set_attribute_value(data.get_object_id('AH28GJ3'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('AH28GJ3'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('AH28GJ3'), data.get_attribute_id('document_title'), null, jsonb '"Отчет о доставке"');
select data.set_attribute_value(data.get_object_id('AH28GJ3'), data.get_attribute_id('name'), null, jsonb '"Отчет о доставке"');
select data.set_attribute_value(data.get_object_id('AH28GJ3'), data.get_attribute_id('content'), null, jsonb '"Отчет о доставке препарата с кодовым номером TUL2018.<br>Отправитель “Тойво Ларсен”, получатель “Александра Бах”."');

insert into data.objects(code) values ('SF72TL3');
select data.set_attribute_value(data.get_object_id('SF72TL3'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('SF72TL3'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('SF72TL3'), data.get_attribute_id('document_title'), null, jsonb '"Электронное письмо от Сьюзенн Франклин Терезе Лизбен"');
select data.set_attribute_value(data.get_object_id('SF72TL3'), data.get_attribute_id('name'), null, jsonb '"Электронное письмо от Сьюзенн Франклин Терезе Лизбен"');
select data.set_attribute_value(data.get_object_id('SF72TL3'), data.get_attribute_id('content'), null, jsonb '"Дорогая, где ты? Все с ума посходили - не иначе, не верю что все это правда! Помни, что у тебя всегда есть, кому ты можешь довериться!<br>С любовью, С."');

insert into data.objects(code) values ('FH93FH7');
select data.set_attribute_value(data.get_object_id('FH93FH7'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('FH93FH7'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('FH93FH7'), data.get_attribute_id('document_title'), null, jsonb '"Медицинская справка"');
select data.set_attribute_value(data.get_object_id('FH93FH7'), data.get_attribute_id('name'), null, jsonb '"Медицинская справка"');
select data.set_attribute_value(data.get_object_id('FH93FH7'), data.get_attribute_id('content'), null, jsonb '"Диагноз: В крови обнаружен вирус “Дилгарской чумы”.  Начальная стадия заражения. Диагноз поставлен 6 месяцев назад."');

insert into data.objects(code) values ('PK301');
select data.set_attribute_value(data.get_object_id('PK301'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('PK301'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('PK301'), data.get_attribute_id('document_title'), null, jsonb '"Обломки"');
select data.set_attribute_value(data.get_object_id('PK301'), data.get_attribute_id('name'), null, jsonb '"Обломки"');
select data.set_attribute_value(data.get_object_id('PK301'), data.get_attribute_id('content'), null, jsonb '"Обломки ксенотехники, надо исследовать"');

insert into data.objects(code) values ('PK302');
select data.set_attribute_value(data.get_object_id('PK302'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('PK302'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('PK302'), data.get_attribute_id('document_title'), null, jsonb '"Обломки"');
select data.set_attribute_value(data.get_object_id('PK302'), data.get_attribute_id('name'), null, jsonb '"Обломки"');
select data.set_attribute_value(data.get_object_id('PK302'), data.get_attribute_id('content'), null, jsonb '"Обломки земной техники, надо исследовать"');

insert into data.objects(code) values ('PK303');
select data.set_attribute_value(data.get_object_id('PK303'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('PK303'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('PK303'), data.get_attribute_id('document_title'), null, jsonb '"Обломки"');
select data.set_attribute_value(data.get_object_id('PK303'), data.get_attribute_id('name'), null, jsonb '"Обломки"');
select data.set_attribute_value(data.get_object_id('PK303'), data.get_attribute_id('content'), null, jsonb '"Обломки земной техники, надо исследовать"');

insert into data.objects(code) values ('PK304');
select data.set_attribute_value(data.get_object_id('PK304'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('PK304'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('PK304'), data.get_attribute_id('document_title'), null, jsonb '"Обломки"');
select data.set_attribute_value(data.get_object_id('PK304'), data.get_attribute_id('name'), null, jsonb '"Обломки"');
select data.set_attribute_value(data.get_object_id('PK304'), data.get_attribute_id('content'), null, jsonb '"Обломки компьютера, надо исследовать"');

insert into data.objects(code) values ('PK305');
select data.set_attribute_value(data.get_object_id('PK305'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('PK305'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('PK305'), data.get_attribute_id('document_title'), null, jsonb '"Биообразцы"');
select data.set_attribute_value(data.get_object_id('PK305'), data.get_attribute_id('name'), null, jsonb '"Биообразцы"');
select data.set_attribute_value(data.get_object_id('PK305'), data.get_attribute_id('content'), null, jsonb '"Биообразцы, надо исследовать"');

insert into data.objects(code) values ('PK306');
select data.set_attribute_value(data.get_object_id('PK306'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('PK306'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('PK306'), data.get_attribute_id('document_title'), null, jsonb '"Биообразцы"');
select data.set_attribute_value(data.get_object_id('PK306'), data.get_attribute_id('name'), null, jsonb '"Биообразцы"');
select data.set_attribute_value(data.get_object_id('PK306'), data.get_attribute_id('content'), null, jsonb '"Биообразцы, надо исследовать"');

insert into data.objects(code) values ('ZOMBIE2');
select data.set_attribute_value(data.get_object_id('ZOMBIE2'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('ZOMBIE2'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('ZOMBIE2'), data.get_attribute_id('document_title'), null, jsonb '"Биообразцы"');
select data.set_attribute_value(data.get_object_id('ZOMBIE2'), data.get_attribute_id('name'), null, jsonb '"Биообразцы"');
select data.set_attribute_value(data.get_object_id('ZOMBIE2'), data.get_attribute_id('content'), null, jsonb '"Биообразцы, надо исследовать"');

insert into data.objects(code) values ('ZOMBIE3');
select data.set_attribute_value(data.get_object_id('ZOMBIE3'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('ZOMBIE3'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('ZOMBIE3'), data.get_attribute_id('document_title'), null, jsonb '"Труп"');
select data.set_attribute_value(data.get_object_id('ZOMBIE3'), data.get_attribute_id('name'), null, jsonb '"Труп"');
select data.set_attribute_value(data.get_object_id('ZOMBIE3'), data.get_attribute_id('content'), null, jsonb '"Труп, надо исследовать"');

insert into data.objects(code) values ('ZOMBIE1');
select data.set_attribute_value(data.get_object_id('ZOMBIE1'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('ZOMBIE1'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('ZOMBIE1'), data.get_attribute_id('document_title'), null, jsonb '"Информация"');
select data.set_attribute_value(data.get_object_id('ZOMBIE1'), data.get_attribute_id('name'), null, jsonb '"Информация"');
select data.set_attribute_value(data.get_object_id('ZOMBIE1'), data.get_attribute_id('content'), null, jsonb '"Кровавый след тянется в 23 уровень серого сектора"');

insert into data.objects(code) values ('ZOMBIE4');
select data.set_attribute_value(data.get_object_id('ZOMBIE4'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('ZOMBIE4'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('ZOMBIE4'), data.get_attribute_id('document_title'), null, jsonb '"Информация"');
select data.set_attribute_value(data.get_object_id('ZOMBIE4'), data.get_attribute_id('name'), null, jsonb '"Информация"');
select data.set_attribute_value(data.get_object_id('ZOMBIE4'), data.get_attribute_id('content'), null, jsonb '"Разгромленная лаборатория, здесь явно проводились медицинские исследования. Есть следы препаратов как центаврианских, так и антаресса."');

insert into data.objects(code) values ('ZOMBIE5');
select data.set_attribute_value(data.get_object_id('ZOMBIE5'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('ZOMBIE5'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('ZOMBIE5'), data.get_attribute_id('document_title'), null, jsonb '"Информация"');
select data.set_attribute_value(data.get_object_id('ZOMBIE5'), data.get_attribute_id('name'), null, jsonb '"Информация"');
select data.set_attribute_value(data.get_object_id('ZOMBIE5'), data.get_attribute_id('content'), null, jsonb '"В лаборатории 2 тела, погибшие одеты в халаты медицинских сотрудников.<br>Повреждений очень много - тела практически разорваны, повсюду кровь"');

insert into data.objects(code) values ('lab03');
select data.set_attribute_value(data.get_object_id('lab03'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('lab03'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('lab03'), data.get_attribute_id('document_title'), null, jsonb '"Координаты лаборатории"');
select data.set_attribute_value(data.get_object_id('lab03'), data.get_attribute_id('name'), null, jsonb '"Координаты лаборатории"');
select data.set_attribute_value(data.get_object_id('lab03'), data.get_attribute_id('content'), null, jsonb '"В документе содержатся координаты лаборатории, выпускающей СЛЭГ<br>Находится в системе Эпсилон. Можно долететь на шаттле."');

insert into data.objects(code) values ('ert18');
select data.set_attribute_value(data.get_object_id('ert18'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('ert18'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('ert18'), data.get_attribute_id('document_title'), null, jsonb '"Устройство Ларсена"');
select data.set_attribute_value(data.get_object_id('ert18'), data.get_attribute_id('name'), null, jsonb '"Устройство Ларсена"');
select data.set_attribute_value(data.get_object_id('ert18'), data.get_attribute_id('content'), null, jsonb '"Устройство предположительно позволяет перенести слепок электрических полей головного мозга “человека, человеческого рода” на информационный носитель большого объема. При последних экспериментах, при переносе, возникала необъяснимая утечка энергии. Подопытный впадал в кому и произвести обратный перенос не получалось."');

insert into data.objects(code) values ('ekt19');
select data.set_attribute_value(data.get_object_id('ekt19'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('ekt19'), data.get_attribute_id('type'), null, jsonb '"secret_document"');
select data.set_attribute_value(data.get_object_id('ekt19'), data.get_attribute_id('document_title'), null, jsonb '"Инфокристалл"');
select data.set_attribute_value(data.get_object_id('ekt19'), data.get_attribute_id('name'), null, jsonb '"Инфокристалл"');
select data.set_attribute_value(data.get_object_id('ekt19'), data.get_attribute_id('content'), null, jsonb '"На этот кристалл записано огромное количество информации. Он явно изготовлен промышленным способом. Можно попытаться извлечь информацию на электронный носитель или в мозг живого человека."');

insert into data.logins(code, description) values
('de829', 'person1'),
('0061a', 'person2'),
('84251', 'person3'),
('3aed7', 'person4'),
('42777', 'person5'),
('77f76', 'person6'),
('c602d', 'person7'),
('64a28', 'person8'),
('48491', 'person9'),
('c3bba', 'person10'),
('98d78', 'person11'),
('c875b', 'person12'),
('b70e8', 'person13'),
('ff898', 'person14'),
('4c57e', 'person15'),
('fad96', 'person16'),
('7d544', 'person17'),
('fa153', 'person18'),
('5c90b', 'person19'),
('9f345', 'person20'),
('0e8c5', 'person21'),
('ff80a', 'person22'),
('4b8e9', 'person23'),
('70c97', 'person24'),
('1b14c', 'person25'),
('950bb', 'person26'),
('45e3e', 'person27'),
('f0638', 'person28'),
('ccfbc', 'person29'),
('98ad3', 'person30'),
('7dc88', 'person31'),
('c77ad', 'person32'),
('e14a0', 'person33'),
('81052', 'person34'),
('4704e', 'person35'),
('38764', 'person36'),
('57e5d', 'person37'),
('a001a', 'person38'),
('b88ee', 'person39'),
('d30d7', 'person40'),
('74435', 'person41'),
('49231', 'person42'),
('8b070', 'person43'),
('9a4c4', 'person44'),
('476a0', 'person45'),
('7cf46', 'person46'),
('81f4a', 'person47'),
('01914', 'person48'),
('891aa', 'person49'),
('37175', 'person50'),
('a9b95', 'person51'),
('7d96e', 'person52'),
('88dca', 'person53'),
('d7068', 'person54'),
('6a2a5', 'person55'),
('55a8c', 'person56'),
('569d9', 'person57'),
('agg4c', 'person59');

select data.add_object_to_login(data.get_object_id(l.description), id)
from data.logins l
where l.description like 'person%';

select data.add_object_to_login(data.get_object_id('person58'), id)
from data.logins l
where l.description in ('person50', 'person51', 'person52', 'person53', 'person54', 'person55', 'person56', 'person57');

select data.add_object_to_login(data.get_object_id('person60'), id)
from data.logins l
where l.description = 'person25';

select data.add_object_to_login(data.get_object_id('person61'), id)
from data.logins l
where l.description = 'person59';

select data.add_object_to_login(data.get_object_id('anonymous'), id)
from data.logins
where id = data.get_integer_param('default_login');

-- Действие для привязки клиента к логину
CREATE OR REPLACE FUNCTION action_generators.login(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer;
  v_test_object_id integer;
begin
  if v_object_id is not null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');
  v_test_object_id := json.get_integer(in_params, 'test_object_id');

  if v_user_object_id != v_test_object_id then
    return null;
  end if;

  return jsonb_build_object(
    'login',
    jsonb_build_object(
      'code', 'login',
      'name', 'Вход в систему',
      'type', 'security.login',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'password',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Персональный код',
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.login(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_password text := json.get_string(in_user_params, 'password');
  v_login_id integer;
begin
  select id
  into v_login_id
  from data.logins
  where code = v_password
  for share;

  if v_login_id is null then
    return api_utils.create_ok_result(null, 'Неправильный персональный код!');
  end if;

  perform data.set_client_login(in_client, v_login_id, in_user_object_id, 'Вход в систему');

  return api_utils.create_ok_result(null);
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- "Выход"
CREATE OR REPLACE FUNCTION action_generators.logout(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer;
  v_test_object_id integer;
begin
  if v_object_id is not null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');
  v_test_object_id := json.get_integer(in_params, 'test_object_id');

  if v_user_object_id = v_test_object_id then
    return null;
  end if;

  return jsonb_build_object(
    'logout',
    jsonb_build_object(
      'code', 'logout',
      'name', 'Выйти',
      'type', 'security.logout',
      'params', jsonb '{}',
      'warning', jsonb '"Вы действительно хотите выйти?"'));
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.logout(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
begin
  perform data.set_client_login(in_client, null, in_user_object_id);

  return api_utils.create_ok_result(null);
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для изменения статуса уведомления на "прочитано"
CREATE OR REPLACE FUNCTION action_generators.read_notification(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
begin
  return jsonb_build_object(
    'read_notification',
    jsonb_build_object(
      'code', 'read_notification',
      'name', 'Отметить как прочитанное',
      'type', 'notifications.read',
      'params', jsonb_build_object('notification_code', data.get_object_code(json.get_integer(in_params, 'object_id')))));
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.read_notification(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_notification_id integer := data.get_object_id(json.get_string(in_params, 'notification_code'));
  v_notification_status_attribute_id integer := data.get_attribute_id('notification_status');
begin
  perform data.set_attribute_value_if_changed(
    v_notification_id,
    v_notification_status_attribute_id,
    in_user_object_id,
    jsonb '"read"',
    in_user_object_id);

  return api_utils.create_ok_result(null);
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Функция для создания уведомления
CREATE OR REPLACE FUNCTION actions.create_notification(
    in_user_object_id integer,
    in_object_ids integer[],
    in_description text,
    in_notification_object_code text DEFAULT NULL::text,
    in_days_shift integer DEFAULT NULL::integer)
  RETURNS void AS
$BODY$
declare
  v_notification_id integer;
  v_notification_code text;
  v_object_id integer;
  v_notification_attribute_id integer := data.get_attribute_id('notifications');
  v_old_notifications jsonb;
begin
  assert in_user_object_id is not null;
  assert in_object_ids is not null;
  assert in_description is not null;

  insert into data.objects(id) values(default)
  returning id, code into v_notification_id, v_notification_code;

  perform data.set_attribute_value(v_notification_id, data.get_attribute_id('system_is_visible'), null, jsonb 'true', in_user_object_id);
  perform data.set_attribute_value(v_notification_id, data.get_attribute_id('notification_description'), null, to_jsonb(in_description), in_user_object_id);
  if in_notification_object_code is not null then
    perform data.set_attribute_value(v_notification_id, data.get_attribute_id('notification_object_code'), null, to_jsonb(in_notification_object_code), in_user_object_id);
  end if;
  perform data.set_attribute_value(v_notification_id, data.get_attribute_id('notification_time'), null, to_jsonb(utils.current_time(in_days_shift)), in_user_object_id);
  perform data.set_attribute_value(v_notification_id, data.get_attribute_id('notification_status'), null, jsonb '"unread"', in_user_object_id);
  perform data.set_attribute_value(v_notification_id, data.get_attribute_id('type'), null, jsonb '"notification"', in_user_object_id);

  in_object_ids := intarray.uniq(intarray.sort(in_object_ids));

  foreach v_object_id in array in_object_ids loop
    v_old_notifications := data.get_attribute_value_for_update(v_object_id, v_notification_attribute_id, v_object_id);
    perform json.get_opt_string_array(v_old_notifications);

    perform data.set_attribute_value(
      v_object_id,
      v_notification_attribute_id,
      v_object_id,
      coalesce(v_old_notifications, jsonb '[]') || jsonb_build_array(v_notification_code),
      in_user_object_id);
  end loop;
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Функция для создания транзакции
CREATE OR REPLACE FUNCTION actions.create_transaction(
    in_user_object_id integer,
    in_sender_id integer,
    in_receiver_id integer,
    in_description text,
    in_sum integer,
    in_sender_rest integer,
    in_receiver_rest integer,
    add_sender_to_transation boolean,
    add_receiver_to_transaction boolean)
  RETURNS void AS
$BODY$
declare
  v_transaction_id integer;
  v_transaction_code text;
  v_transactions_value jsonb;
  v_transactions_object_id integer := data.get_object_id('transactions');
  v_transactions_system_value_attribute_id integer := data.get_attribute_id('system_value');
  v_name_attr_id integer := data.get_attribute_id('name');
begin
  assert in_user_object_id is not null;
  assert in_receiver_id is not null;
  assert in_description is not null;
  assert in_sum > 0;
  assert not add_sender_to_transation or in_sender_rest >= 0;
  assert not add_receiver_to_transaction or in_receiver_rest >= 0;
  assert add_sender_to_transation is not null;
  assert add_receiver_to_transaction is not null;
  assert add_sender_to_transation or add_receiver_to_transaction;

  insert into data.objects(id) values(default)
  returning id, code into v_transaction_id, v_transaction_code;

  perform data.set_attribute_value(v_transaction_id, data.get_attribute_id('system_is_visible'), in_sender_id, jsonb 'true', in_user_object_id);
  perform data.set_attribute_value(v_transaction_id, data.get_attribute_id('system_is_visible'), in_receiver_id, jsonb 'true', in_user_object_id);
  perform data.set_attribute_value(v_transaction_id, data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true', in_user_object_id);
  perform data.set_attribute_value(v_transaction_id, data.get_attribute_id('type'), null, jsonb '"transaction"', in_user_object_id);
  if in_sender_rest is null then
    perform data.set_attribute_value(
      v_transaction_id,
      v_name_attr_id,
      in_sender_id,
      to_jsonb(utils.current_time() || ' добавление ' || in_sum || json.get_string(data.get_attribute_value(in_user_object_id, in_receiver_id, v_name_attr_id)) || ': ' || in_description),
      in_user_object_id);
  else
    perform data.set_attribute_value(
      v_transaction_id,
      v_name_attr_id,
      in_sender_id,
      to_jsonb(utils.current_time() || ' -' || in_sum || '(=' || in_sender_rest || ') ' || json.get_string(data.get_attribute_value(in_user_object_id, in_receiver_id, v_name_attr_id)) || ': ' || in_description),
      in_user_object_id);
  end if;
  if in_receiver_rest is null then
    perform data.set_attribute_value(
      v_transaction_id,
      v_name_attr_id,
      in_receiver_id,
      to_jsonb(utils.current_time() || ' списание ' || in_sum || json.get_string(data.get_attribute_value(in_user_object_id, in_sender_id, v_name_attr_id)) || ': ' || in_description),
      in_user_object_id);
  else
    perform data.set_attribute_value(
      v_transaction_id,
      v_name_attr_id,
      in_receiver_id,
      to_jsonb(utils.current_time() || ' +' || in_sum || '(=' || in_receiver_rest || ') ' || case when add_sender_to_transation then json.get_opt_string(data.get_attribute_value(in_receiver_id, in_sender_id, v_name_attr_id), 'Неизвестный отправитель') || ': ' else '' end || in_description),
      in_user_object_id);
  end if;
  if add_sender_to_transation then
    perform data.set_attribute_value(v_transaction_id, data.get_attribute_id('transaction_from'), null, to_jsonb(data.get_object_code(in_sender_id)), in_user_object_id);
  end if;
  if add_receiver_to_transaction then
    perform data.set_attribute_value(v_transaction_id, data.get_attribute_id('transaction_to'), null, to_jsonb(data.get_object_code(in_receiver_id)), in_user_object_id);
  end if;
  perform data.set_attribute_value(v_transaction_id, data.get_attribute_id('transaction_time'), null, to_jsonb(utils.current_time()), in_user_object_id);
  perform data.set_attribute_value(v_transaction_id, data.get_attribute_id('transaction_description'), null, to_jsonb(in_description), in_user_object_id);
  perform data.set_attribute_value(v_transaction_id, data.get_attribute_id('transaction_sum'), null, to_jsonb(in_sum), in_user_object_id);
  if in_sender_rest is not null then
    perform data.set_attribute_value(v_transaction_id, data.get_attribute_id('balance_rest'), in_sender_id, to_jsonb(in_sender_rest), in_user_object_id);
  end if;
  if in_receiver_rest is not null then
    perform data.set_attribute_value(v_transaction_id, data.get_attribute_id('balance_rest'), in_receiver_id, to_jsonb(in_receiver_rest), in_user_object_id);
  end if;

  v_transactions_value := data.get_attribute_value_for_update(v_transactions_object_id, v_transactions_system_value_attribute_id, in_sender_id);
  perform json.get_opt_string_array(v_transactions_value);

  v_transactions_value := coalesce(v_transactions_value, jsonb '[]') || jsonb_build_array(v_transaction_code);
  perform data.set_attribute_value(v_transactions_object_id, v_transactions_system_value_attribute_id, in_sender_id, v_transactions_value, in_user_object_id);

  v_transactions_value := data.get_attribute_value_for_update(v_transactions_object_id, v_transactions_system_value_attribute_id, in_receiver_id);
  perform json.get_opt_string_array(v_transactions_value);

  v_transactions_value := coalesce(v_transactions_value, jsonb '[]') || jsonb_build_array(v_transaction_code);
  perform data.set_attribute_value(v_transactions_object_id, v_transactions_system_value_attribute_id, in_receiver_id, v_transactions_value, in_user_object_id);
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действия для перечисления денег
CREATE OR REPLACE FUNCTION actions.transfer(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_receiver_id integer := data.get_object_id(json.get_string(in_user_params, 'receiver'));
  v_description text := json.get_string(in_user_params, 'description');
  v_sum integer := json.get_integer(in_user_params, 'sum');

  v_system_balance_attribute_id integer := data.get_attribute_id('system_balance');
  v_user_balance integer;
  v_receiver_balance integer;

  v_ret_val api.result;
begin
  assert in_user_object_id is not null;
  assert in_user_object_id != v_receiver_id;
  assert v_sum > 0;

  if in_user_object_id < v_receiver_id then
    v_user_balance := data.get_attribute_value_for_update(in_user_object_id, v_system_balance_attribute_id, null);
    v_receiver_balance := data.get_attribute_value_for_update(v_receiver_id, v_system_balance_attribute_id, null);
  else
    v_receiver_balance := data.get_attribute_value_for_update(v_receiver_id, v_system_balance_attribute_id, null);
    v_user_balance := data.get_attribute_value_for_update(in_user_object_id, v_system_balance_attribute_id, null);
  end if;

  if coalesce(v_user_balance, 0) < v_sum then
    v_ret_val := api_utils.get_objects(
      in_client,
      in_user_object_id,
      jsonb_build_object(
        'object_codes', jsonb_build_array(data.get_object_code(in_user_object_id)),
        'get_actions', true,
        'get_templates', true));
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Недостаточно средств!"}';
    return v_ret_val;
  end if;

  perform data.set_attribute_value(
    in_user_object_id,
    v_system_balance_attribute_id,
    null,
    to_jsonb(v_user_balance - v_sum),
    in_user_object_id,
    'Перевод средств пользователю ' || v_receiver_id);
  perform data.set_attribute_value(
    v_receiver_id,
    v_system_balance_attribute_id,
    null,
    to_jsonb(v_receiver_balance + v_sum),
    in_user_object_id,
    'Перевод средств от пользователя ' || in_user_object_id);

  perform actions.create_transaction(
    in_user_object_id,
    in_user_object_id,
    v_receiver_id,
    v_description,
    v_sum,
    v_user_balance - v_sum,
    v_receiver_balance + v_sum,
    true,
    true);

  perform actions.create_notification(
    in_user_object_id,
    array[v_receiver_id],
    (
      'Входящий перевод на сумму ' ||
      v_sum ||
      '.<br>Остаток: ' ||
      (v_receiver_balance + v_sum) ||
      '.<br>Отправитель: ' ||
      coalesce(
        json.get_opt_string(data.get_attribute_value(v_receiver_id, in_user_object_id, data.get_attribute_id('name'))),
        'Неизвестный') ||
      '.<br>Сообщение: ' ||
      v_description
    ),
    'transactions');

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb '["transactions"]',
      'get_actions', false,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

CREATE OR REPLACE FUNCTION action_generators.transfer(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_type_attr_id integer;
  v_type text;
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_system_balance_attribute_id integer;
  v_balance jsonb;
  v_balance_value integer;
begin
  if v_object_id is not null then
    if v_object_id = v_user_object_id then
      return null;
    end if;

    v_type_attr_id := data.get_attribute_id('type');

    select json.get_string(value)
    into v_type
    from data.attribute_values
    where
      object_id = v_object_id and
      attribute_id = v_type_attr_id and
      value_object_id is null;

    if v_type not in ('person', 'state', 'corporation') then
      return null;
    end if;
  end if;

  v_system_balance_attribute_id := data.get_attribute_id('system_balance');

  select value
  into v_balance
  from data.attribute_values
  where
    object_id = v_user_object_id and
    attribute_id = v_system_balance_attribute_id and
    value_object_id is null;

  if v_balance is not null then
    v_balance_value := json.get_integer(v_balance);
  end if;

  if v_balance is null or v_balance_value <= 0 then
    return jsonb_build_object(
      'transfer',
      jsonb_build_object(
        'code', 'transfer',
        'name', 'Создать перевод',
        'type', 'finances.transfer',
        'disabled', true));
  end if;

  return jsonb_build_object(
    'transfer',
    jsonb_build_object(
      'code', 'transfer',
      'name',
      case when v_object_id is null then
        'Создать перевод'
      when v_type = 'state' then
        'Перевести средства на счёт государства'
      when v_type = 'corporation' then
        'Перевести средства на счёт корпорации'
      else
        'Создать перевод'
      end,
      'type', 'finances.transfer',
      'user_params',
      jsonb_build_array(
        jsonb_build_object(
          'code', 'receiver',
          'type', 'objects',
          'data', jsonb_build_object('object_code', 'transaction_destinations', 'attribute_code', 'transaction_destinations'),
          'description', 'Получатель',
          'min_value_count', 1,
          'max_value_count', 1) ||
        case when v_object_id is not null then
          jsonb_build_object('default_value', data.get_object_code(v_object_id))
        else
          jsonb '{}'
        end,
        jsonb_build_object(
          'code', 'description',
          'type', 'string',
          'data', jsonb_build_object('min_length', '1'),
          'description', 'Назначение перевода',
          'min_value_count', 1,
          'max_value_count', 1),
        jsonb_build_object(
          'code', 'sum',
          'type', 'integer',
          'data', jsonb_build_object('min_value', 1, 'max_value', v_balance_value),
          'description', 'Сумма',
          'min_value_count', 1,
          'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

-- Действие для перевода денег государства
CREATE OR REPLACE FUNCTION actions.state_money_transfer(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_receiver_id integer := data.get_object_id(json.get_string(in_user_params, 'receiver'));
  v_description text := json.get_string(in_user_params, 'description');
  v_sum integer := json.get_integer(in_user_params, 'sum');
  v_state_code text := json.get_string(in_params, 'state_code');
  v_state_id integer := data.get_object_id(v_state_code);

  v_is_in_state boolean;

  v_system_balance_attribute_id integer := data.get_attribute_id('system_balance');
  v_state_balance integer;
  v_receiver_balance integer;

  v_ret_val api.result;
begin
  assert in_user_object_id is not null;
  assert in_user_object_id != v_receiver_id;
  assert v_sum > 0;

  select true
  into v_is_in_state
  where exists(
    select 1
    from data.object_objects
    where
      parent_object_id = v_state_id and
      object_id = in_user_object_id);

  if v_is_in_state is null then
    v_ret_val := api_utils.get_objects(
      in_client,
      in_user_object_id,
      jsonb_build_object(
        'object_codes', jsonb_build_array(v_state_code),
        'get_actions', true,
        'get_templates', true));
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Вы не можете распоряжаться средствами данного государства!"}';
    return v_ret_val;
  end if;

  if v_state_id < v_receiver_id then
    v_state_balance := data.get_attribute_value_for_update(v_state_id, v_system_balance_attribute_id, null);
    v_receiver_balance := data.get_attribute_value_for_update(v_receiver_id, v_system_balance_attribute_id, null);
  else
    v_receiver_balance := data.get_attribute_value_for_update(v_receiver_id, v_system_balance_attribute_id, null);
    v_state_balance := data.get_attribute_value_for_update(v_state_id, v_system_balance_attribute_id, null);
  end if;

  if coalesce(v_state_balance, 0) < v_sum then
    v_ret_val := api_utils.get_objects(
      in_client,
      in_user_object_id,
      jsonb_build_object(
        'object_codes', jsonb_build_array(v_state_code),
        'get_actions', true,
        'get_templates', true));
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Недостаточно средств!"}';
    return v_ret_val;
  end if;

  perform data.set_attribute_value(
    v_state_id,
    v_system_balance_attribute_id,
    null,
    to_jsonb(v_state_balance - v_sum),
    in_user_object_id,
    'Перевод средств пользователю ' || v_receiver_id);
  perform data.set_attribute_value(
    v_receiver_id,
    v_system_balance_attribute_id,
    null,
    to_jsonb(v_receiver_balance + v_sum),
    in_user_object_id,
    'Перевод средств от государства ' || v_state_id);

  perform actions.create_transaction(
    in_user_object_id,
    v_state_id,
    v_receiver_id,
    v_description,
    v_sum,
    v_state_balance - v_sum,
    v_receiver_balance + v_sum,
    true,
    true);

  perform actions.create_notification(
    in_user_object_id,
    array[v_receiver_id],
    (
      'Входящий перевод на сумму ' ||
      v_sum ||
      '.<br>Остаток: ' ||
      (v_receiver_balance + v_sum) ||
      '.<br>Отправитель: ' ||
      coalesce(
        json.get_opt_string(data.get_attribute_value(v_receiver_id, v_state_id, data.get_attribute_id('name'))),
        'Неизвестный') ||
      '.<br>Сообщение: ' ||
      v_description
    ),
    'transactions');

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_state_code),
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

CREATE OR REPLACE FUNCTION action_generators.state_money_transfer(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_system_balance_attribute_id integer := data.get_attribute_id('system_balance');
  v_balance jsonb;
  v_balance_value integer;
begin
  select value
  into v_balance
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_system_balance_attribute_id and
    value_object_id is null;

  if v_balance is not null then
    v_balance_value := json.get_integer(v_balance);
  end if;

  if v_balance is null or v_balance_value <= 0 then
    return jsonb_build_object(
      'state_money_transfer',
      jsonb_build_object(
        'code', 'state_money_transfer',
        'name', 'Перевести средства со счёта государства',
        'type', 'finances.transfer',
        'disabled', true));
  end if;

  return jsonb_build_object(
    'state_money_transfer',
    jsonb_build_object(
      'code', 'state_money_transfer',
      'name', 'Перевести средства со счёта государства',
      'type', 'finances.transfer',
      'params', jsonb_build_object('state_code', data.get_object_code(v_object_id)),
      'user_params',
      jsonb_build_array(
        jsonb_build_object(
          'code', 'receiver',
          'type', 'objects',
          'data', jsonb_build_object('object_code', 'transaction_destinations', 'attribute_code', 'transaction_destinations'),
          'description', 'Получатель',
          'min_value_count', 1,
          'max_value_count', 1),
        jsonb_build_object(
          'code', 'description',
          'type', 'string',
          'data', jsonb_build_object('min_length', '1'),
          'description', 'Назначение перевода',
          'min_value_count', 1,
          'max_value_count', 1),
        jsonb_build_object(
          'code', 'sum',
          'type', 'integer',
          'data', jsonb_build_object('min_value', 1, 'max_value', v_balance_value),
          'description', 'Сумма',
          'min_value_count', 1,
          'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

-- Действие для добавления денег
CREATE OR REPLACE FUNCTION actions.generate_money(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_receiver_id integer := data.get_object_id(json.get_string(in_user_params, 'receiver'));
  v_description text := json.get_string(in_user_params, 'description');
  v_sum integer := json.get_integer(in_user_params, 'sum');

  v_system_balance_attribute_id integer := data.get_attribute_id('system_balance');
  v_receiver_balance integer;
begin
  assert in_user_object_id is not null;
  assert v_sum > 0;

  v_receiver_balance := data.get_attribute_value_for_update(v_receiver_id, v_system_balance_attribute_id, null);

  perform data.set_attribute_value(
    v_receiver_id,
    v_system_balance_attribute_id,
    null,
    to_jsonb(v_receiver_balance + v_sum),
    in_user_object_id,
    'Добавление средств мастером');

  perform actions.create_transaction(
    in_user_object_id,
    in_user_object_id,
    v_receiver_id,
    v_description,
    v_sum,
    null,
    v_receiver_balance + v_sum,
    false,
    true);

  perform actions.create_notification(
    in_user_object_id,
    array[v_receiver_id],
    (
      'Входящий перевод на сумму ' ||
      v_sum ||
      '.<br>Остаток: ' ||
      (v_receiver_balance + v_sum) ||
      '.<br>Сообщение: ' ||
      v_description
    ),
    'transactions');

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb '["transactions"]',
      'get_actions', false,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

CREATE OR REPLACE FUNCTION action_generators.generate_money(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_type_attr_id integer;
  v_type text;
  v_user_object_id integer;
begin
  if v_object_id is not null then
    v_type_attr_id := data.get_attribute_id('type');

    select json.get_string(value)
    into v_type
    from data.attribute_values
    where
      object_id = v_object_id and
      attribute_id = v_type_attr_id and
      value_object_id is null;

    if v_type not in ('person', 'state', 'corporation') then
      return null;
    end if;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');

  return jsonb_build_object(
    'generate_money',
    jsonb_build_object(
      'code', 'generate_money',
      'name', 'Добавить средств',
      'type', 'cheats.money_generation',
      'user_params',
      jsonb_build_array(
        jsonb_build_object(
          'code', 'receiver',
          'type', 'objects',
          'data', jsonb_build_object('object_code', 'transaction_destinations', 'attribute_code', 'all_transaction_destinations'),
          'description', 'Получатель',
          'min_value_count', 1,
          'max_value_count', 1) ||
        case when v_object_id is not null then
          jsonb_build_object('default_value', data.get_object_code(v_object_id))
        else
          jsonb '{}'
        end,
        jsonb_build_object(
          'code', 'description',
          'type', 'string',
          'data', jsonb_build_object('min_length', '1'),
          'description', 'Назначение перевода',
          'min_value_count', 1,
          'max_value_count', 1),
        jsonb_build_object(
          'code', 'sum',
          'type', 'integer',
          'data', jsonb_build_object('min_value', 1),
          'description', 'Сумма',
          'min_value_count', 1,
          'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

-- Действие для создания медицинского отчёта
CREATE OR REPLACE FUNCTION action_generators.create_med_document(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer;
  v_medics_objects_id integer;
  v_medic boolean;
begin
  if v_object_id is not null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');
  v_medics_objects_id := data.get_object_id('medics');

  select true
  into v_medic
  where exists(
    select 1
    from data.object_objects
    where
      parent_object_id = v_medics_objects_id and
      object_id = v_user_object_id);

  if v_medic is null then
    return null;
  end if;

  return jsonb_build_object(
    'create_med_document',
    jsonb_build_object(
      'code', 'create_med_document',
      'name', 'Создать медицинский отчёт',
      'type', 'documents.create',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'patient',
            'type', 'objects',
            'data', jsonb_build_object('object_code', 'persons', 'attribute_code', 'persons'),
            'description', 'Пациент',
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Заголовок',
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'content',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Содержимое',
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.create_med_document(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_patient text := json.get_string(in_user_params, 'patient');
  v_title text := json.get_string(in_user_params, 'title');
  v_content text := replace(json.get_string(in_user_params, 'content'), E'\n', '<br>');

  v_document_id integer;
  v_document_code text;

  v_type_attr_id integer := data.get_attribute_id('type');
  v_notification_receiver_ids integer[];
begin
  insert into data.objects(id) values(default)
  returning id, code into v_document_id, v_document_code;

  perform data.set_attribute_value(v_document_id, data.get_attribute_id('system_is_visible'), data.get_object_id('med_documents'), jsonb 'true');
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
  perform data.set_attribute_value(v_document_id, v_type_attr_id, null, jsonb '"med_document"');
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('name'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('document_title'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('system_document_time'), null, to_jsonb(utils.system_time()));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('document_time'), null, to_jsonb(utils.current_time()));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('content'), null, to_jsonb(v_content));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('document_author'), null, to_jsonb(data.get_object_code(in_user_object_id)));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('med_document_patient'), null, to_jsonb(v_patient));

  select array_agg(distinct(av.object_id))
  into v_notification_receiver_ids
  from data.objects o
  join data.object_objects oo on
    oo.parent_object_id = o.id and
    oo.object_id != in_user_object_id
  join data.attribute_values av on
    av.object_id = oo.object_id and
    av.attribute_id = v_type_attr_id and
    av.value_object_id is null and
    av.value = jsonb '"person"'
  where
    o.code = 'med_documents';

  perform actions.create_notification(
    in_user_object_id,
    v_notification_receiver_ids,
    'Опубликован новый медицинский отчёт: ' || v_title,
    v_document_code);

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_document_code),
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для создания "зашифрованного" документа
CREATE OR REPLACE FUNCTION action_generators.create_secret_document(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer;
  v_medics_objects_id integer;
  v_medic boolean;
begin
  if v_object_id is not null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');

  return jsonb_build_object(
    'create_secret_document',
    jsonb_build_object(
      'code', 'create_secret_document',
      'name', 'Создать зашифрованный документ',
      'type', 'documents.create',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'code',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Код расшифровки',
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Заголовок',
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'content',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Содержимое',
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.create_secret_document(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_code text := json.get_string(in_user_params, 'code');
  v_title text := json.get_string(in_user_params, 'title');
  v_content text := replace(json.get_string(in_user_params, 'content'), E'\n', '<br>');

  v_document_id integer;

  v_type_attr_id integer := data.get_attribute_id('type');
  v_notification_receiver_ids integer[];
begin
  insert into data.objects(code) values(v_code)
  returning id into v_document_id;

  perform data.set_attribute_value(v_document_id, data.get_attribute_id('system_is_visible'), null, jsonb 'true');
  perform data.set_attribute_value(v_document_id, v_type_attr_id, null, jsonb '"secret_document"');
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('name'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('document_title'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('content'), null, to_jsonb(v_content));

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_code),
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;
  
-- Действие для редактирования медицинского отчёта
CREATE OR REPLACE FUNCTION action_generators.edit_med_document(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_user_object_code text := data.get_object_code(v_user_object_id);
  v_author_code text := json.get_string(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('document_author'), null));
  v_masters_object_id integer;
  v_master boolean;
begin
  if v_author_code != v_user_object_code then
    v_masters_object_id := data.get_object_id('masters');

    select true
    into v_master
    where exists(
      select 1
      from data.object_objects
      where
        parent_object_id = v_masters_object_id and
        object_id = v_user_object_id);

    if v_master is null then
      return null;
    end if;
  end if;

  return jsonb_build_object(
    'edit_med_document',
    jsonb_build_object(
      'code', 'edit_med_document',
      'name', 'Редактировать',
      'type', 'documents.edit',
      'params', jsonb_build_object('object_code', data.get_object_code(v_object_id)),
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'patient',
            'type', 'objects',
            'data', jsonb_build_object('object_code', 'persons', 'attribute_code', 'persons'),
            'description', 'Пациент',
            'default_value', data.get_raw_attribute_value(v_object_id, data.get_attribute_id('med_document_patient'), null),
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Заголовок',
            'default_value', data.get_raw_attribute_value(v_object_id, data.get_attribute_id('document_title'), null),
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'content',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Содержимое',
            'default_value', to_jsonb(replace(json.get_string(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('content'), null)), '<br>', E'\n')),
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.edit_med_document(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_object_code text := json.get_string(in_params, 'object_code');
  v_object_id integer := data.get_object_id(v_object_code);
  v_patient text := json.get_string(in_user_params, 'patient');
  v_title text := json.get_string(in_user_params, 'title');
  v_content text := replace(json.get_string(in_user_params, 'content'), E'\n', '<br>');
begin
  perform data.set_attribute_value(v_object_id, data.get_attribute_id('name'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_object_id, data.get_attribute_id('document_title'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_object_id, data.get_attribute_id('content'), null, to_jsonb(v_content));
  perform data.set_attribute_value(v_object_id, data.get_attribute_id('med_document_patient'), null, to_jsonb(v_patient));

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_object_code),
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для редактирования документа
CREATE OR REPLACE FUNCTION action_generators.edit_document(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_user_object_code text := data.get_object_code(v_user_object_id);
  v_author_code text := json.get_opt_string(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('document_author'), null));
  v_masters_object_id integer;
  v_master boolean;
begin
  if v_author_code is null or v_author_code != v_user_object_code then
    v_masters_object_id := data.get_object_id('masters');

    select true
    into v_master
    where exists(
      select 1
      from data.object_objects
      where
        parent_object_id = v_masters_object_id and
        object_id = v_user_object_id);

    if v_master is null then
      return null;
    end if;
  end if;

  return jsonb_build_object(
    'edit_document',
    jsonb_build_object(
      'code', 'edit_document',
      'name', 'Редактировать',
      'type', 'documents.edit',
      'params', jsonb_build_object('object_code', data.get_object_code(v_object_id)),
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Заголовок',
            'default_value', data.get_raw_attribute_value(v_object_id, data.get_attribute_id('document_title'), null),
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'content',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Содержимое',
            'default_value', to_jsonb(replace(json.get_string(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('content'), null)), '<br>', E'\n')),
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.edit_document(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_object_code text := json.get_string(in_params, 'object_code');
  v_object_id integer := data.get_object_id(v_object_code);
  v_title text := json.get_string(in_user_params, 'title');
  v_content text := replace(json.get_string(in_user_params, 'content'), E'\n', '<br>');
begin
  perform data.set_attribute_value(v_object_id, data.get_attribute_id('name'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_object_id, data.get_attribute_id('document_title'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_object_id, data.get_attribute_id('content'), null, to_jsonb(v_content));

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_object_code),
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для создания научного отчёта
CREATE OR REPLACE FUNCTION action_generators.create_research_document(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer;
  v_researchers_objects_id integer;
  v_researcher boolean;
begin
  if v_object_id is not null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');
  v_researchers_objects_id := data.get_object_id('researchers');

  select true
  into v_researcher
  where exists(
    select 1
    from data.object_objects
    where
      parent_object_id = v_researchers_objects_id and
      object_id = v_user_object_id);

  if v_researcher is null then
    return null;
  end if;

  return jsonb_build_object(
    'create_research_document',
    jsonb_build_object(
      'code', 'create_research_document',
      'name', 'Создать научный отчёт',
      'type', 'documents.create',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Заголовок',
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'content',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Содержимое',
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.create_research_document(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_title text := json.get_string(in_user_params, 'title');
  v_content text := replace(json.get_string(in_user_params, 'content'), E'\n', '<br>');

  v_document_id integer;
  v_document_code text;

  v_type_attr_id integer := data.get_attribute_id('type');
  v_notification_receiver_ids integer[];
begin
  insert into data.objects(id) values(default)
  returning id, code into v_document_id, v_document_code;

  perform data.set_attribute_value(v_document_id, data.get_attribute_id('system_is_visible'), data.get_object_id('research_documents'), jsonb 'true');
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
  perform data.set_attribute_value(v_document_id, v_type_attr_id, null, jsonb '"research_document"');
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('name'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('document_title'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('system_document_time'), null, to_jsonb(utils.system_time()));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('document_time'), null, to_jsonb(utils.current_time()));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('content'), null, to_jsonb(v_content));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('document_author'), null, to_jsonb(data.get_object_code(in_user_object_id)));

  select array_agg(distinct(av.object_id))
  into v_notification_receiver_ids
  from data.objects o
  join data.object_objects oo on
    oo.parent_object_id = o.id and
    oo.object_id != in_user_object_id
  join data.attribute_values av on
    av.object_id = oo.object_id and
    av.attribute_id = v_type_attr_id and
    av.value_object_id is null and
    av.value = jsonb '"person"'
  where
    o.code = 'research_documents';

  perform actions.create_notification(
    in_user_object_id,
    v_notification_receiver_ids,
    'Опубликован новый научный отчёт: ' || v_title,
    v_document_code);

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_document_code),
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для создания отчёта экипажа
CREATE OR REPLACE FUNCTION action_generators.create_crew_document(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer;
  v_crew_objects_id integer;
  v_crew boolean;
begin
  if v_object_id is not null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');
  v_crew_objects_id := data.get_object_id('crew');

  select true
  into v_crew
  where exists(
    select 1
    from data.object_objects
    where
      parent_object_id = v_crew_objects_id and
      object_id = v_user_object_id);

  if v_crew is null then
    return null;
  end if;

  return jsonb_build_object(
    'create_crew_document',
    jsonb_build_object(
      'code', 'create_crew_document',
      'name', 'Написать в журнал экипажа',
      'type', 'documents.create',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Заголовок',
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'content',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Содержимое',
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.create_crew_document(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_title text := json.get_string(in_user_params, 'title');
  v_content text := replace(json.get_string(in_user_params, 'content'), E'\n', '<br>');

  v_document_id integer;
  v_document_code text;

  v_type_attr_id integer := data.get_attribute_id('type');
  v_notification_receiver_ids integer[];
begin
  insert into data.objects(id) values(default)
  returning id, code into v_document_id, v_document_code;

  perform data.set_attribute_value(v_document_id, data.get_attribute_id('system_is_visible'), data.get_object_id('crew_documents'), jsonb 'true');
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
  perform data.set_attribute_value(v_document_id, v_type_attr_id, null, jsonb '"crew_document"');
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('name'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('document_title'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('system_document_time'), null, to_jsonb(utils.system_time()));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('document_time'), null, to_jsonb(utils.current_time()));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('content'), null, to_jsonb(v_content));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('document_author'), null, to_jsonb(data.get_object_code(in_user_object_id)));

  select array_agg(distinct(av.object_id))
  into v_notification_receiver_ids
  from data.objects o
  join data.object_objects oo on
    oo.parent_object_id = o.id and
    oo.object_id != in_user_object_id
  join data.attribute_values av on
    av.object_id = oo.object_id and
    av.attribute_id = v_type_attr_id and
    av.value_object_id is null and
    av.value = jsonb '"person"'
  where
    o.code = 'crew_documents';

  perform actions.create_notification(
    in_user_object_id,
    v_notification_receiver_ids,
    'Опубликован новый отчёт экипажа: ' || v_title,
    v_document_code);

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_document_code),
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для удаления отчётов
CREATE OR REPLACE FUNCTION action_generators.delete_document(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_return_object_code text := json.get_string(in_params, 'return_object_code');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
begin
  return jsonb_build_object(
    'delete_document',
    jsonb_build_object(
      'code', 'delete_document',
      'name', 'Удалить',
      'type', 'documents.delete',
      'params', jsonb_build_object('object_code', data.get_object_code(v_object_id), 'return_object_code', v_return_object_code),
      'warning', 'Вы действительно хотите удалить документ?'));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION action_generators.delete_library_document(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
begin
  return jsonb_build_object(
    'delete_document',
    jsonb_build_object(
      'code', 'delete_document',
      'name', 'Удалить',
      'type', 'documents.delete',
      'params', jsonb_build_object('object_code', data.get_object_code(v_object_id), 'return_object_code', data.get_raw_attribute_value(v_object_id, data.get_attribute_id('system_library_category'), null)),
      'warning', 'Вы действительно хотите удалить документ?'));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.delete_document(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_object_id integer := data.get_object_id(json.get_string(in_params, 'object_code'));
  v_system_library_category_attr_id integer := data.get_attribute_id('system_library_category');
  v_system_is_visible_attr_id integer := data.get_attribute_id('system_is_visible');
  v_type_attr_id integer := data.get_attribute_id('type');
  v_return_object_code text := json.get_string(in_params, 'return_object_code');
begin
  perform data.delete_attribute_value_if_exists(v_object_id, v_system_library_category_attr_id, null, in_user_object_id);
  perform data.set_attribute_value(v_object_id, v_type_attr_id, null, jsonb '"deleted_document"', in_user_object_id);

  perform data.delete_attribute_value_if_exists(v_object_id, v_system_is_visible_attr_id, value_object_id, in_user_object_id)
  from (
    select value_object_id
    from data.attribute_values
    where
      object_id = v_object_id and
      attribute_id = v_system_is_visible_attr_id
  ) o;

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_return_object_code),
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Поделиться документом
CREATE OR REPLACE FUNCTION action_generators.share_document(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_type_attr_id integer;
  v_type text;
begin
  if v_object_id is null then
    return null;
  end if;

  return jsonb_build_object(
    'share_document',
    jsonb_build_object(
      'code', 'send_mail',
      'name', 'Поделиться',
      'type', 'mail.send',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'receivers',
            'type', 'objects',
            'data', jsonb_build_object('object_code', 'mail_contacts', 'attribute_code', 'mail_contacts'),
            'description', 'Получатели',
            'min_value_count', 1),
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Тема',
            'default_value', 'С вами поделились документом',
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'body',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'default_value', 'Возможно, вас заинтересует документ <a href="babcom:' || data.get_object_code(v_object_id) || '">' || json.get_string(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('name'), null)) || '</a>',
            'description', 'Сообщение',
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

-- Действие для удаления персональных документов
CREATE OR REPLACE FUNCTION action_generators.delete_personal_document(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_author boolean := data.get_raw_attribute_value(v_object_id, data.get_attribute_id('document_author'), null) = to_jsonb(data.get_object_code(v_user_object_id));
begin
  if v_author is null or not v_author then
    return null;
  end if;

  return jsonb_build_object(
    'delete_personal_document',
    jsonb_build_object(
      'code', 'delete_personal_document',
      'name', 'Удалить',
      'type', 'documents.delete',
      'params', jsonb_build_object('object_code', data.get_object_code(v_object_id)),
      'warning', 'Вы действительно хотите удалить документ?'));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.delete_personal_document(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_object_id integer := data.get_object_id(json.get_string(in_params, 'object_code'));
  v_system_is_visible_attr_id integer := data.get_attribute_id('system_is_visible');
  v_system_personal_document_attr_id integer := data.get_attribute_id('system_personal_document');
  v_type_attr_id integer := data.get_attribute_id('type');
begin
  perform data.set_attribute_value(v_object_id, v_type_attr_id, null, jsonb '"deleted_document"');

  perform data.delete_attribute_value_if_exists(v_object_id, v_system_personal_document_attr_id, in_user_object_id, in_user_object_id);

  perform data.delete_attribute_value_if_exists(v_object_id, v_system_is_visible_attr_id, value_object_id, in_user_object_id)
  from (
    select value_object_id
    from data.attribute_values
    where
      object_id = v_object_id and
      attribute_id = v_system_is_visible_attr_id
  ) o;

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb '["personal_library"]',
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для чтения документа
CREATE OR REPLACE FUNCTION action_generators.read_document(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer;
  v_type_attr_id integer;
  v_type text;
begin
  if v_object_id is not null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');

  return jsonb_build_object(
    'read_document',
    jsonb_build_object(
      'code', 'read_document',
      'name', 'Дешифратор',
      'type', 'storage.read',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'code',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Введите код',
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.read_document(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_code text := json.get_string(in_user_params, 'code');
  v_type_attr_id integer := data.get_attribute_id('type');
  v_document_id integer;
begin
  select o.id
  into v_document_id
  from data.objects o
  join data.attribute_values av on
    av.object_id = o.id and
    av.attribute_id = v_type_attr_id and
    av.value_object_id is null and
    av.value = jsonb '"secret_document"'
  where
    o.code = v_code;

  if v_document_id is null then
    return api_utils.create_ok_result(null, 'Введён неправильный код документа!');
  end if;

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_code),
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для создания личного документа
CREATE OR REPLACE FUNCTION action_generators.create_personal_document(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_type_attr_id integer;
  v_type text;
begin
  return jsonb_build_object(
    'create_personal_document',
    jsonb_build_object(
      'code', 'create_personal_document',
      'name', 'Создать документ',
      'type', 'documents.personal.create',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Заголовок',
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'content',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Содержимое',
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.create_personal_document(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_title text := json.get_string(in_user_params, 'title');
  v_content text := replace(json.get_string(in_user_params, 'content'), E'\n', '<br>');
  v_document_id integer;
  v_document_code text;
begin
  insert into data.objects(id) values(default)
  returning id, code into v_document_id, v_document_code;

  perform data.set_attribute_value(v_document_id, data.get_attribute_id('system_is_visible'), null, jsonb 'true');
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('system_personal_document'), in_user_object_id, jsonb 'true');
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('type'), null, jsonb '"personal_document"');
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('name'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('document_title'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('document_author'), null, to_jsonb(data.get_object_code(in_user_object_id)));
  perform data.set_attribute_value(v_document_id, data.get_attribute_id('content'), null, to_jsonb(v_content));

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_document_code),
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для отправки письма
CREATE OR REPLACE FUNCTION action_generators.send_mail(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_type_attr_id integer;
  v_type text;
begin
  if v_object_id is not null then
    if v_object_id = v_user_object_id then
      return null;
    end if;

    v_type_attr_id := data.get_attribute_id('type');

    select json.get_string(value)
    into v_type
    from data.attribute_values
    where
      object_id = v_object_id and
      attribute_id = v_type_attr_id and
      value_object_id is null;

    if v_type != 'person' then
      return null;
    end if;
  end if;

  return jsonb_build_object(
    'send_mail',
    jsonb_build_object(
      'code', 'send_mail',
      'name', 'Написать письмо',
      'type', 'mail.send',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'receivers',
            'type', 'objects',
            'data', jsonb_build_object('object_code', 'mail_contacts', 'attribute_code', 'mail_contacts'),
            'description', 'Получатели',
            'min_value_count', 1) ||
          case when v_object_id is null then
            jsonb '{}'
          else
            jsonb_build_object('default_value', data.get_object_code(v_object_id))
          end,
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Тема',
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'body',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Сообщение',
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.send_mail(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_receivers jsonb := in_user_params->'receivers';
  v_title text := json.get_string(in_user_params, 'title');
  v_body text := replace(json.get_string(in_user_params, 'body'), E'\n', '<br>');

  v_name_attr_id integer := data.get_attribute_id('name');
  v_type_attr_id integer := data.get_attribute_id('type');
  v_inbox_attr_id integer := data.get_attribute_id('inbox');
  v_outbox_attr_id integer := data.get_attribute_id('outbox');

  v_receiver_id integer;

  v_mail_id integer;
  v_mail_code text;
  v_mails jsonb;
begin
  assert jsonb_typeof(v_receivers) in ('array', 'string');

  insert into data.objects(id) values(default)
  returning id, code into v_mail_id, v_mail_code;

  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('system_is_visible'), null, jsonb 'true');
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('type'), null, jsonb '"mail"');
  perform data.set_attribute_value(v_mail_id, v_name_attr_id, null, to_jsonb(v_title));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_title'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('system_mail_send_time'), null, to_jsonb(utils.system_time()));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_send_time'), null, to_jsonb(utils.current_time()));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_author'), null, to_jsonb(data.get_object_code(in_user_object_id)));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_receivers'), null, jsonb '[]' || v_receivers);
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_body'), null, to_jsonb(v_body));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_type'), null, jsonb '"outbox"');

  v_mails := data.get_attribute_value_for_update(in_user_object_id, v_outbox_attr_id, in_user_object_id);

  perform data.set_attribute_value(in_user_object_id, v_outbox_attr_id, in_user_object_id, coalesce(v_mails, jsonb '[]') || to_jsonb(v_mail_code), in_user_object_id);

  insert into data.objects(id) values(default)
  returning id, code into v_mail_id, v_mail_code;

  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('system_is_visible'), null, jsonb 'true');
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('type'), null, jsonb '"mail"');
  perform data.set_attribute_value(v_mail_id, v_name_attr_id, null, to_jsonb(v_title));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_title'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('system_mail_send_time'), null, to_jsonb(utils.system_time()));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_send_time'), null, to_jsonb(utils.current_time()));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_author'), null, to_jsonb(data.get_object_code(in_user_object_id)));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_receivers'), null, jsonb '[]' || v_receivers);
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_body'), null, to_jsonb(v_body));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_type'), null, jsonb '"inbox"');

  for v_receiver_id in
    select distinct(av.object_id)
    from jsonb_array_elements(jsonb '[]' || v_receivers) r
    join data.objects o on
      o.code = json.get_string(r.value)
    join data.object_objects oo on
      oo.parent_object_id = o.id
    join data.attribute_values av on
      av.object_id = oo.object_id and
      av.attribute_id = v_type_attr_id and
      av.value_object_id is null and
      av.value = jsonb '"person"'
  loop
    v_mails := data.get_attribute_value_for_update(v_receiver_id, v_inbox_attr_id, v_receiver_id);
    perform data.set_attribute_value(v_receiver_id, v_inbox_attr_id, v_receiver_id, coalesce(v_mails, jsonb '[]') || to_jsonb(v_mail_code), in_user_object_id);
    perform actions.create_notification(
      in_user_object_id,
      array[v_receiver_id],
      'Новое письмо. Отправитель: ' || json.get_string(data.get_attribute_value(v_receiver_id, in_user_object_id, v_name_attr_id)) || '. Тема: ' || v_title,
      v_mail_code);
  end loop;

  return api_utils.create_ok_result(null, 'Сообщение отправлено!');
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

CREATE OR REPLACE FUNCTION action_generators.reply(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer;
  v_mail_author_attr_id integer;
  v_title_attr_id integer;
  v_body_attr_id integer;
  v_author text;
  v_title text;
  v_body text;
begin
  if v_object_id is null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');
  v_mail_author_attr_id := data.get_attribute_id('mail_author');
  v_title_attr_id := data.get_attribute_id('mail_title');
  v_body_attr_id := data.get_attribute_id('mail_body');

  select json.get_string(value)
  into v_author
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_mail_author_attr_id and
    value_object_id is null;

  select json.get_string(value)
  into v_body
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_body_attr_id and
    value_object_id is null;

  select json.get_string(value)
  into v_title
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_title_attr_id and
    value_object_id is null;

  return jsonb_build_object(
    'reply',
    jsonb_build_object(
      'code', 'send_mail',
      'name', 'Ответить',
      'type', 'mail.reply',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'receivers',
            'type', 'objects',
            'data', jsonb_build_object('object_code', 'mail_contacts', 'attribute_code', 'mail_contacts'),
            'description', 'Получатели',
            'default_value', v_author,
            'min_value_count', 1),
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Тема',
            'default_value', 'Re: ' || v_title,
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'body',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Сообщение',
            'default_value', E'\n> ' || replace(v_body, '<br>', E'\n> '),
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION action_generators.reply_all(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer;
  v_mail_author_attr_id integer;
  v_mail_receivers_attr_id integer;
  v_title_attr_id integer;
  v_body_attr_id integer;
  v_author jsonb;
  v_receivers jsonb;
  v_title text;
  v_body text;
begin
  if v_object_id is null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');
  v_mail_author_attr_id := data.get_attribute_id('mail_author');
  v_mail_receivers_attr_id := data.get_attribute_id('mail_receivers');
  v_title_attr_id := data.get_attribute_id('mail_title');
  v_body_attr_id := data.get_attribute_id('mail_body');

  select value
  into v_author
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_mail_author_attr_id and
    value_object_id is null;

  perform json.get_string(v_author);

  select value
  into v_receivers
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_mail_receivers_attr_id and
    value_object_id is null;

  perform json.get_string_array(v_receivers);

  select json.get_string(value)
  into v_body
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_body_attr_id and
    value_object_id is null;

  select json.get_string(value)
  into v_title
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_title_attr_id and
    value_object_id is null;

  return jsonb_build_object(
    'reply_all',
    jsonb_build_object(
      'code', 'send_mail',
      'name', 'Ответить всем',
      'type', 'mail.reply_all',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'receivers',
            'type', 'objects',
            'data', jsonb_build_object('object_code', 'mail_contacts', 'attribute_code', 'mail_contacts'),
            'description', 'Получатели',
            'default_value', v_author || (v_receivers - json.get_string(v_author)),
            'min_value_count', 1),
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Тема',
            'default_value', 'Re: ' || v_title,
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'body',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Сообщение',
            'default_value', E'\n> ' || replace(v_body, '<br>', E'\n> '),
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

-- Отправка писем из будущего
CREATE OR REPLACE FUNCTION action_generators.send_mail_from_future(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_type_attr_id integer;
  v_type text;
begin
  if v_object_id is not null then
    v_type_attr_id := data.get_attribute_id('type');

    if v_object_id = v_user_object_id then
      return null;
    end if;

    select json.get_string(value)
    into v_type
    from data.attribute_values
    where
      object_id = v_object_id and
      attribute_id = v_type_attr_id and
      value_object_id is null;

    if v_type != 'person' then
      return null;
    end if;
  end if;

  return jsonb_build_object(
    'send_mail_from_future',
    jsonb_build_object(
      'code', 'send_mail_from_future',
      'name', 'Написать письмо из будущего',
      'type', 'cheats.mail.send_from_future',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'author',
            'type', 'objects',
            'data', jsonb_build_object('object_code', 'persons', 'attribute_code', 'persons'),
            'description', 'Отправитель',
            'min_value_count', 1,
            'max_value_count', 1) ||
          case when v_object_id is null then
            jsonb '{}'
          else
            jsonb_build_object('default_value', data.get_object_code(v_object_id))
          end,
          jsonb_build_object(
            'code', 'receivers',
            'type', 'objects',
            'data', jsonb_build_object('object_code', 'mail_contacts', 'attribute_code', 'mail_contacts'),
            'description', 'Получатели',
            'min_value_count', 1) ||
          case when v_object_id is null then
            jsonb '{}'
          else
            jsonb_build_object('default_value', data.get_object_code(v_object_id))
          end,
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Тема',
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'days',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 1),
            'description', 'Через сколько дней будет отправлено письмо?',
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'body',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Сообщение',
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.send_mail_from_future(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_author jsonb := in_user_params->'author';
  v_author_id integer := data.get_object_id(json.get_string(v_author));
  v_receivers jsonb := in_user_params->'receivers';
  v_title text := json.get_string(in_user_params, 'title');
  v_body text := replace(json.get_string(in_user_params, 'body'), E'\n', '<br>');
  v_days integer := json.get_integer(in_user_params, 'days');

  v_name_attr_id integer := data.get_attribute_id('name');
  v_type_attr_id integer := data.get_attribute_id('type');
  v_inbox_attr_id integer := data.get_attribute_id('inbox');

  v_receiver_id integer;

  v_mail_id integer;
  v_mail_code text;
  v_mails jsonb;
begin
  assert jsonb_typeof(v_receivers) in ('array', 'string');
  perform json.get_string(v_author);

  insert into data.objects(id) values(default)
  returning id, code into v_mail_id, v_mail_code;

  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('system_is_visible'), null, jsonb 'true');
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('type'), null, jsonb '"mail"');
  perform data.set_attribute_value(v_mail_id, v_name_attr_id, null, to_jsonb(v_title));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_title'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('system_mail_send_time'), null, to_jsonb(utils.system_time(v_days)));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_send_time'), null, to_jsonb(utils.current_time(v_days)));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_author'), null, v_author);
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_receivers'), null, jsonb '[]' || v_receivers);
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_body'), null, to_jsonb(v_body));
  perform data.set_attribute_value(v_mail_id, data.get_attribute_id('mail_type'), null, jsonb '"inbox"');

  for v_receiver_id in
    select distinct(av.object_id)
    from jsonb_array_elements(jsonb '[]' || v_receivers) r
    join data.objects o on
      o.code = json.get_string(r.value)
    join data.object_objects oo on
      oo.parent_object_id = o.id
    join data.attribute_values av on
      av.object_id = oo.object_id and
      av.attribute_id = v_type_attr_id and
      av.value_object_id is null and
      av.value = jsonb '"person"'
  loop
    v_mails := data.get_attribute_value_for_update(v_receiver_id, v_inbox_attr_id, v_receiver_id);
    perform data.set_attribute_value(v_receiver_id, v_inbox_attr_id, v_receiver_id, coalesce(v_mails, jsonb '[]') || to_jsonb(v_mail_code), in_user_object_id);
    perform actions.create_notification(
      in_user_object_id,
      array[v_receiver_id],
      'Новое письмо. Отправитель: ' || json.get_string(data.get_attribute_value(v_receiver_id, v_author_id, v_name_attr_id)) || '. Тема: ' || v_title,
      v_mail_code,
      v_days);
  end loop;

  return api_utils.create_ok_result(null, 'Сообщение отправлено!');
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Написать новость
CREATE OR REPLACE FUNCTION action_generators.write_news(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer;
begin
  if v_object_id is not null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');

  return jsonb_build_object(
    'write_news',
    jsonb_build_object(
      'code', 'write_news',
      'name', 'Написать новость',
      'type', 'news.write',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Заголовок',
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'body',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Текст',
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.write_news(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_title text := json.get_string(in_user_params, 'title');
  v_body text := replace(json.get_string(in_user_params, 'body'), E'\n', '<br>');
  v_media jsonb := data.get_raw_attribute_value(in_user_object_id, data.get_attribute_id('person_media'), null);

  v_name_attr_id integer := data.get_attribute_id('name');
  v_type_attr_id integer := data.get_attribute_id('type');

  v_media_name text := json.get_string(data.get_raw_attribute_value(data.get_object_id(json.get_string(v_media)), v_name_attr_id, null));

  v_news_id integer;
  v_news_code text;

  v_notification_receiver_ids integer[];
begin
  insert into data.objects(id) values(default)
  returning id, code into v_news_id, v_news_code;

  perform data.set_attribute_value(v_news_id, data.get_attribute_id('system_is_visible'), null, jsonb 'true');
  perform data.set_attribute_value(v_news_id, data.get_attribute_id('type'), null, jsonb '"news"');
  perform data.set_attribute_value(v_news_id, data.get_attribute_id('news_title'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_news_id, v_name_attr_id, null, to_jsonb(v_media_name || ': ' || v_title));
  perform data.set_attribute_value(v_news_id, data.get_attribute_id('news_media'), null, v_media);
  perform data.set_attribute_value(v_news_id, data.get_attribute_id('system_news_time'), null, to_jsonb(utils.system_time()));
  perform data.set_attribute_value(v_news_id, data.get_attribute_id('news_time'), null, to_jsonb(utils.current_time()));
  perform data.set_attribute_value(v_news_id, data.get_attribute_id('content'), null, to_jsonb(v_body));

  select array_agg(distinct(av.object_id))
  into v_notification_receiver_ids
  from data.objects o
  join data.object_objects oo on
    oo.parent_object_id = o.id and
    oo.object_id != in_user_object_id
  join data.attribute_values av on
    av.object_id = oo.object_id and
    av.attribute_id = v_type_attr_id and
    av.value_object_id is null and
    av.value = jsonb '"person"'
  where
    o.code = 'persons';

  perform actions.create_notification(
    in_user_object_id,
    v_notification_receiver_ids,
    v_media_name || 'сообщает: ' || v_title,
    v_news_code);

  return
    api_utils.get_objects(
      in_client,
      in_user_object_id,
      jsonb_build_object(
        'object_codes', jsonb_build_array(v_news_code),
        'get_actions', true,
        'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для редактирования новостей
CREATE OR REPLACE FUNCTION action_generators.edit_news(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_author_media text := json.get_opt_string(data.get_raw_attribute_value(v_user_object_id, data.get_attribute_id('person_media'), null));
  v_media_code text := json.get_string(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('news_media'), null));
  v_masters_object_id integer;
  v_master boolean;
begin
  if v_author_media is null or v_author_media != v_media_code then
    v_masters_object_id := data.get_object_id('masters');

    select true
    into v_master
    where exists(
      select 1
      from data.object_objects
      where
        parent_object_id = v_masters_object_id and
        object_id = v_user_object_id);

    if v_master is null then
      return null;
    end if;
  end if;

  return jsonb_build_object(
    'edit_news',
    jsonb_build_object(
      'code', 'edit_news',
      'name', 'Редактировать',
      'type', 'documents.edit',
      'params', jsonb_build_object('object_code', data.get_object_code(v_object_id)),
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'title',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Заголовок',
            'default_value', data.get_raw_attribute_value(v_object_id, data.get_attribute_id('news_title'), null),
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'content',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Текст',
            'default_value', to_jsonb(replace(json.get_string(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('content'), null)), '<br>', E'\n')),
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.edit_news(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_object_code text := json.get_string(in_params, 'object_code');
  v_object_id integer := data.get_object_id(v_object_code);
  v_media_code text := json.get_string(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('news_media'), null));
  v_name_attr_id integer := data.get_attribute_id('name');
  v_media_name text := json.get_string(data.get_raw_attribute_value(data.get_object_id(v_media_code), v_name_attr_id, null));
  v_title text := json.get_string(in_user_params, 'title');
  v_content text := replace(json.get_string(in_user_params, 'content'), E'\n', '<br>');
begin
  perform data.set_attribute_value(v_object_id, v_name_attr_id, null, to_jsonb(v_media_name || ': ' || v_title));
  perform data.set_attribute_value(v_object_id, data.get_attribute_id('document_title'), null, to_jsonb(v_title));
  perform data.set_attribute_value(v_object_id, data.get_attribute_id('content'), null, to_jsonb(v_content));

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_object_code),
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для удаления новостей
CREATE OR REPLACE FUNCTION action_generators.delete_news(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_author_media text := json.get_opt_string(data.get_raw_attribute_value(v_user_object_id, data.get_attribute_id('person_media'), null));
  v_media_code text := json.get_string(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('news_media'), null));
  v_masters_object_id integer;
  v_master boolean;
begin
  if v_author_media is null or v_author_media != v_media_code then
    v_masters_object_id := data.get_object_id('masters');

    select true
    into v_master
    where exists(
      select 1
      from data.object_objects
      where
        parent_object_id = v_masters_object_id and
        object_id = v_user_object_id);

    if v_master is null then
      return null;
    end if;
  end if;

  return jsonb_build_object(
    'delete_news',
    jsonb_build_object(
      'code', 'delete_news',
      'name', 'Удалить',
      'type', 'documents.delete',
      'params', jsonb_build_object('object_code', data.get_object_code(v_object_id), 'return_object_code', 'news_hub'),
      'warning', 'Вы действительно хотите удалить новость?'));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.delete_news(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_object_id integer := data.get_object_id(json.get_string(in_params, 'object_code'));
  v_system_is_visible_attr_id integer := data.get_attribute_id('system_is_visible');
  v_type_attr_id integer := data.get_attribute_id('type');
  v_news_media_attr_id integer := data.get_attribute_id('news_media');
  v_return_object_code text := json.get_string(in_params, 'return_object_code');
begin
  perform data.set_attribute_value(v_object_id, v_type_attr_id, null, jsonb '"deleted_news"');
  perform data.delete_attribute_value(v_object_id, v_news_media_attr_id, null);

  perform data.delete_attribute_value_if_exists(v_object_id, v_system_is_visible_attr_id, value_object_id, in_user_object_id)
  from (
    select value_object_id
    from data.attribute_values
    where
      object_id = v_object_id and
      attribute_id = v_system_is_visible_attr_id
  ) o;

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_return_object_code),
      'get_actions', true,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Просмотр списков транзакций
CREATE OR REPLACE FUNCTION action_generators.show_transaction_list(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer;
  v_type_attr_id integer;
  v_type text;
begin
  if v_object_id is null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');

  if v_object_id = v_user_object_id then
    return null;
  end if;

  v_type_attr_id := data.get_attribute_id('type');

  select json.get_string(value)
  into v_type
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_type_attr_id and
    value_object_id is null;

  if v_type not in ('person', 'state', 'corporation', 'assembly') then
    return null;
  end if;

  return jsonb_build_object(
    'show_transaction_list',
    jsonb_build_object(
      'code', 'show_transaction_list',
      'name', 'Просмотреть транзакции',
      'type', 'finances.transactions',
      'params', jsonb_build_object('object_code', data.get_object_code(v_object_id))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.show_transaction_list(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_object_code text := json.get_string(in_params, 'object_code');
  v_name_attr_id integer := data.get_attribute_id('name');
  v_list_id integer;
  v_list_code text;
begin
  insert into data.objects(id) values(default)
  returning id, code into v_list_id, v_list_code;

  perform data.set_attribute_value(v_list_id, data.get_attribute_id('system_is_visible'), in_user_object_id, jsonb 'true');
  perform data.set_attribute_value(v_list_id, data.get_attribute_id('system_value'), null, to_jsonb(v_object_code));
  perform data.set_attribute_value(v_list_id, data.get_attribute_id('type'), null, jsonb '"transaction_list"');
  perform data.set_attribute_value(v_list_id, v_name_attr_id, null, to_jsonb(json.get_string(data.get_attribute_value(in_user_object_id, data.get_object_id(v_object_code), v_name_attr_id)) || ', список транзакций'));

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb_build_array(v_list_code),
      'get_actions', false,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Отправка уведомлений
CREATE OR REPLACE FUNCTION action_generators.send_notification(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_type_attr_id integer;
  v_type text;
begin
  if v_object_id is not null then
    v_type_attr_id := data.get_attribute_id('type');

    if v_object_id = v_user_object_id then
      return null;
    end if;

    select json.get_string(value)
    into v_type
    from data.attribute_values
    where
      object_id = v_object_id and
      attribute_id = v_type_attr_id and
      value_object_id is null;

    if v_type != 'person' then
      return null;
    end if;
  end if;

  return jsonb_build_object(
    'send_notification',
    jsonb_build_object(
      'code', 'send_notification',
      'name', 'Написать уведомление',
      'type', 'notification.send',
      'params', jsonb '{}',
      'user_params',
        jsonb_build_array(
          jsonb_build_object(
            'code', 'receivers',
            'type', 'objects',
            'data', jsonb_build_object('object_code', 'mail_contacts', 'attribute_code', 'mail_contacts'),
            'description', 'Получатели',
            'min_value_count', 1) ||
          case when v_object_id is null then
            jsonb '{}'
          else
            jsonb_build_object('default_value', data.get_object_code(v_object_id))
          end,
          jsonb_build_object(
            'code', 'message',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'description', 'Сообщение',
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.send_notification(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_receivers jsonb := in_user_params->'receivers';
  v_message text := replace(json.get_string(in_user_params, 'message'), E'\n', '<br>');
  v_type_attr_id integer := data.get_attribute_id('type');

  v_receiver_id integer;

  v_notification_id integer;
  v_notification_code text;

  v_receiver_ids integer[];
begin
  assert jsonb_typeof(v_receivers) in ('array', 'string');

  select array_agg(distinct(av.object_id))
  into v_receiver_ids
  from jsonb_array_elements(jsonb '[]' || v_receivers) r
  join data.objects o on
    o.code = json.get_string(r.value)
  join data.object_objects oo on
    oo.parent_object_id = o.id
  join data.attribute_values av on
    av.object_id = oo.object_id and
    av.attribute_id = v_type_attr_id and
    av.value_object_id is null and
    av.value = jsonb '"person"';

  perform actions.create_notification(
    in_user_object_id,
    v_receiver_ids,
    v_message);

  return api_utils.create_ok_result(null, 'Уведомление отправлено!');
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Удаление писем
CREATE OR REPLACE FUNCTION action_generators.delete_outbox_mail(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');

  v_user_object_id integer;
  v_mail_author_attr_id integer;

  v_person_id integer;

  v_outbox_attr_id integer;

  v_value jsonb;
  v_mail_code text;
begin
  if v_object_id is null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');
  v_mail_author_attr_id := data.get_attribute_id('mail_author');

  select data.get_object_id(json.get_string(value))
  into v_person_id
  from data.attribute_values
  where
    object_id = v_object_id and
    attribute_id = v_mail_author_attr_id and
    value_object_id is null;

  if v_person_id != v_user_object_id then
    return null;
  end if;

  v_outbox_attr_id := data.get_attribute_id('outbox');

  select value
  into v_value
  from data.attribute_values
  where
    object_id = v_user_object_id and
    attribute_id = v_outbox_attr_id and
    value_object_id = v_user_object_id;

  if v_value is null then
    return null;
  end if;

  perform json.get_string_array(v_value);

  v_mail_code := data.get_object_code(v_object_id);

  if not v_value ? v_mail_code then
    return null;
  end if;

  return jsonb_build_object(
    'delete_mail',
    jsonb_build_object(
      'code', 'delete_outbox_mail',
      'name', 'Удалить',
      'type', 'mail.delete',
      'params', jsonb_build_object('mail_code', v_mail_code),
      'warning', 'Вы действительно хотите удалить письмо?'));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.delete_outbox_mail(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_mail_code text := json.get_string(in_params, 'mail_code');
  v_outbox_attr_id integer := data.get_attribute_id('outbox');
  v_value jsonb;
begin
  v_value := data.get_attribute_value_for_update(in_user_object_id, v_outbox_attr_id, in_user_object_id);
  if v_value is not null and v_value ? v_mail_code then
    v_value := v_value - v_mail_code;
    if jsonb_array_length(v_value) = 0 then
      perform data.delete_attribute_value(in_user_object_id, v_outbox_attr_id, in_user_object_id);
    else
      perform data.set_attribute_value(in_user_object_id, v_outbox_attr_id, in_user_object_id, v_value, in_user_object_id);
    end if;
  end if;

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb '["mailbox"]',
      'get_actions', false,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

CREATE OR REPLACE FUNCTION action_generators.delete_inbox_mail(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_object_id integer := json.get_opt_integer(in_params, null, 'object_id');

  v_user_object_id integer;

  v_inbox_attr_id integer;

  v_value jsonb;
  v_mail_code text;
begin
  if v_object_id is null then
    return null;
  end if;

  v_user_object_id := json.get_integer(in_params, 'user_object_id');

  v_inbox_attr_id := data.get_attribute_id('inbox');

  select value
  into v_value
  from data.attribute_values
  where
    object_id = v_user_object_id and
    attribute_id = v_inbox_attr_id and
    value_object_id = v_user_object_id;

  if v_value is null then
    return null;
  end if;

  perform json.get_string_array(v_value);

  v_mail_code := data.get_object_code(v_object_id);

  if not v_value ? v_mail_code then
    return null;
  end if;

  return jsonb_build_object(
    'delete_mail',
    jsonb_build_object(
      'code', 'delete_inbox_mail',
      'name', 'Удалить',
      'type', 'mail.delete',
      'params', jsonb_build_object('mail_code', v_mail_code),
      'warning', 'Вы действительно хотите удалить письмо?'));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.delete_inbox_mail(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_mail_code text := json.get_string(in_params, 'mail_code');
  v_inbox_attr_id integer := data.get_attribute_id('inbox');
  v_value jsonb;
begin
  v_value := data.get_attribute_value_for_update(in_user_object_id, v_inbox_attr_id, in_user_object_id);
  if v_value is not null and v_value ? v_mail_code then
    v_value := v_value - v_mail_code;
    if jsonb_array_length(v_value) = 0 then
      perform data.delete_attribute_value(in_user_object_id, v_inbox_attr_id, in_user_object_id);
    else
      perform data.set_attribute_value(in_user_object_id, v_inbox_attr_id, in_user_object_id, v_value, in_user_object_id);
    end if;
  end if;

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb '["mailbox"]',
      'get_actions', false,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для изменения процента налога для страны
CREATE OR REPLACE FUNCTION action_generators.change_state_tax(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
begin
  return jsonb_build_object(
    'change_state_tax',
    jsonb_build_object(
      'code', 'change_state_tax',
      'name', 'Изменить процентную ставку налога',
      'type', 'financial.tax.change',
      'params', jsonb_build_object('state_code', data.get_object_code(json.get_integer(in_params, 'object_id'))),
      'user_params', 
        jsonb_build_array(
          jsonb_build_object(
            'code', 'tax',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0, 'max_value', 100),
            'description', 'Процентная ставка',
            'default_value', data.get_attribute_value(json.get_integer(in_params, 'user_object_id'),json.get_integer(in_params, 'object_id'), data.get_attribute_id('state_tax')),
            'min_value_count', 1,
            'max_value_count', 1))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.change_state_tax(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_state_code text := json.get_string(in_params, 'state_code');
  v_state_id integer := data.get_object_id(v_state_code);
  v_state_tax_attribute_id integer := data.get_attribute_id('state_tax');
  v_tax integer := json.get_integer(in_user_params, 'tax');
begin
  perform data.set_attribute_value_if_changed(
    v_state_id,
    v_state_tax_attribute_id,
    null,
    v_tax::text::jsonb,
    in_user_object_id);

  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_state_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для голосования за выплату дивидендов
CREATE OR REPLACE FUNCTION action_generators.set_dividend_vote(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
begin
  select count(1) into v_is_in_group 
  from data.object_objects oo
   where oo.parent_object_id = json.get_integer(in_params, 'object_id')
   and oo.object_id = json.get_opt_integer(in_params, null, 'user_object_id');

  if v_is_in_group = 0 or json.get_opt_string(data.get_attribute_value(json.get_integer(in_params, 'user_object_id'),
								       json.get_integer(in_params, 'object_id'), 
								       data.get_attribute_id('dividend_vote'))) = 'Да' then
    return null;
  end if;
  
  return jsonb_build_object(
    'set_dividend_vote',
    jsonb_build_object(
      'code', 'set_dividend_vote',
      'name', 'Проголосовать за выплату дивидендов',
      'type', 'vote.dividend',
      'warning', 'Вы уверены, что хотите проголосовать за выплату дивидендов? Это решение нельзя будет изменить до конца цикла.',
      'params', jsonb_build_object('corporation_code', data.get_object_code(json.get_integer(in_params, 'object_id')))));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.set_dividend_vote(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_corporation_code text := json.get_string(in_params, 'corporation_code');
  v_corporation_id integer := data.get_object_id(v_corporation_code);
  v_dividend_vote_attribute_id integer := data.get_attribute_id('dividend_vote');
begin
  perform data.set_attribute_value_if_changed(
    v_corporation_id,
    v_dividend_vote_attribute_id,
    in_user_object_id,
    jsonb '"Да"',
    in_user_object_id);

  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_corporation_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для создания сделки
CREATE OR REPLACE FUNCTION action_generators.create_deal(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
begin
  select count(1) into v_is_in_group 
  from data.object_objects oo
   where oo.parent_object_id = json.get_integer(in_params, 'object_id')
   and oo.object_id = v_user_object_id;

  if v_is_in_group = 0 and
    not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false) then
    return null;
  end if;
  
  return jsonb_build_object(
    'create_deal',
    jsonb_build_object(
      'code', 'create_deal',
      'name', 'Создать сделку',
      'type', 'financial.deal',
      'params', jsonb_build_object('corporation_code', data.get_object_code(json.get_integer(in_params, 'object_id'))),
      'user_params', 
       jsonb_build_array(
         jsonb_build_object(
            'code', 'deal_name',
            'type', 'string',
            'description', 'Название сделки',
             'data', jsonb_build_object('min_length', 1),
            'min_value_count', 1,
            'max_value_count', 1),
         jsonb_build_object(
            'code', 'description',
            'type', 'string',
            'description', 'Описание сделки',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'min_value_count', 1,
            'max_value_count', 1),
         jsonb_build_object(
            'code', 'deal_sector',
            'type', 'objects',
            'description', 'Рынок сделки',
            'data', jsonb_build_object('object_code', 'market', 'attribute_code', 'sectors'),
            'min_value_count', 1,
            'max_value_count', 1),
         jsonb_build_object(
            'code', 'asset_name',
            'type', 'string',
            'description', 'Название актива',
            'data', jsonb_build_object('min_length', 1),
            'min_value_count', 1,
            'max_value_count', 1),
        jsonb_build_object(
            'code', 'percent_asset',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0, 'max_value', 100),
            'description', '% владения активом для вашей корпорации',
            'min_value_count', 1,
            'max_value_count', 1),
        jsonb_build_object(
            'code', 'percent_income',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0, 'max_value', 100),
            'description', '% дохода от сделки для вашей корпорации',
            'min_value_count', 1,
            'max_value_count', 1),
        jsonb_build_object(
            'code', 'deal_cost',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0),
            'description', 'Вложения в сделку для вашей корпорации',
            'min_value_count', 1,
            'max_value_count', 1)))
      );
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.create_deal(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_corporation_code text := json.get_string(in_params, 'corporation_code');
  v_corporation_id integer := data.get_object_id(v_corporation_code);
  v_deal_id integer;
  v_deal_code text;
  v_deal_name text := json.get_string(in_user_params, 'deal_name');
  v_description text := json.get_string(in_user_params, 'description');
  v_asset_name text := json.get_string(in_user_params, 'asset_name');
  v_deal_sector text := json.get_string(in_user_params, 'deal_sector');
  v_percent_asset integer := json.get_integer(in_user_params, 'percent_asset');
  v_percent_income integer := json.get_integer(in_user_params, 'percent_income');
  v_deal_cost integer := json.get_integer(in_user_params, 'deal_cost');

  v_system_corporation_draft_deals_attribute_id integer := data.get_attribute_id('system_corporation_draft_deals');
  v_value jsonb;
begin
insert into data.objects(id) values(default)
  returning id, code into v_deal_id, v_deal_code;

  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('system_is_visible'), null, jsonb 'true', in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('type'), null, jsonb '"deal"', in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('name'), null, to_jsonb(v_deal_name), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('deal_author'), null, to_jsonb(in_user_object_id), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('description'), null, to_jsonb(v_description), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('deal_sector'), null, to_jsonb(v_deal_sector), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('asset_name'), null, to_jsonb(v_asset_name), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('system_deal_time'), null, to_jsonb(utils.system_time()), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('deal_status'), null, jsonb '"draft"', in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('asset_cost'), null, to_jsonb(round(v_deal_cost * 0.7)), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('asset_amortization'), null, to_jsonb(round(v_deal_cost * 0.07)), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "' || v_corporation_code || '","percent_asset" : ' || v_percent_asset || ', "percent_income" : ' || v_percent_income || ', "deal_cost": ' || v_deal_cost || '}')::jsonb, in_user_object_id);

-- Вставим сделку в подготавливаемые для этой корпорации
    v_value := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_corporation_id,
          v_system_corporation_draft_deals_attribute_id,
          null));
    v_value := coalesce(v_value, jsonb '[]') || jsonb_build_array(v_deal_code);
    perform data.set_attribute_value(v_corporation_id, v_system_corporation_draft_deals_attribute_id, null, v_value, in_user_object_id);

  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для добавления участника сделки
CREATE OR REPLACE FUNCTION action_generators.add_deal_member(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_i integer;
  v_j integer;
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  
begin
 -- Показываем только для автора сделки или мастера, и если она ещё черновик
  if json.get_opt_integer(data.get_attribute_value(v_user_object_id,
					       v_object_id, 
					       data.get_attribute_id('deal_author')),0) <> v_user_object_id and
    not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false)  or 
     json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' then
    return null;
  end if;

  -- Проверка, что остались свободные ячейки под участников сделки
  for v_i in 1..10 loop
    if data.get_attribute_value(v_user_object_id, v_object_id, data.get_attribute_id('system_deal_participant' || v_i)) is null then
      v_j := v_i;
      exit;
    end if;
  end loop;
  
  if v_j is null then
    return null;
  end if;
  
  return jsonb_build_object(
    'add_deal_member',
    jsonb_build_object(
      'code', 'add_deal_member',
      'name', 'Добавить участника сделки',
      'type', 'financial.deal',
      'params', jsonb_build_object('deal_code', data.get_object_code(json.get_integer(in_params, 'object_id'))),
      'user_params', 
       jsonb_build_array(
         jsonb_build_object(
            'code', 'member',
            'type', 'objects',
            'description', 'Добавляемый участник',
            'data', jsonb_build_object('object_code', 'corporations', 'attribute_code', 'corporations'),
            'min_value_count', 1,
            'max_value_count', 1),
        jsonb_build_object(
            'code', 'percent_asset',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0, 'max_value', 100),
            'description', '% владения активом',
            'min_value_count', 1,
            'max_value_count', 1),
        jsonb_build_object(
            'code', 'percent_income',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0, 'max_value', 100),
            'description', '% дохода от сделки',
            'min_value_count', 1,
            'max_value_count', 1),
        jsonb_build_object(
            'code', 'deal_cost',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0),
            'description', 'Вложения в сделку',
            'min_value_count', 1,
            'max_value_count', 1)))
      );
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.add_deal_member(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_deal_code text := json.get_string(in_params, 'deal_code');
  v_deal_id integer := data.get_object_id(v_deal_code);
  v_member text := json.get_string(in_user_params, 'member');
  v_corporation_id integer := data.get_object_id(v_member);
  v_percent_asset integer := json.get_integer(in_user_params, 'percent_asset');
  v_percent_income integer := json.get_integer(in_user_params, 'percent_income');
  v_deal_cost integer := json.get_integer(in_user_params, 'deal_cost');

  v_i integer;
  v_j integer;

  v_system_corporation_draft_deals_attribute_id integer := data.get_attribute_id('system_corporation_draft_deals');
  v_value jsonb;
  v_sum_percent_asset integer := 0;
  v_sum_percent_income integer := 0;
  v_sum_deal_cost integer := 0;
  v_curent_member text;
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_deal_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус сделки изменился!"}';
    return v_ret_val;
   end if;
  for v_i in 1..10 loop
    v_value := data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('system_deal_participant' || v_i));
    if v_j is null and v_value is null then
      v_j := v_i;
    end if;
    if v_value is not null then
      select c.member,
             v_sum_percent_asset + coalesce(c.percent_asset, 0),
             v_sum_percent_income + coalesce(c.percent_income, 0),
             v_sum_deal_cost + coalesce(c.deal_cost, 0)
      into v_curent_member,
           v_sum_percent_asset,
           v_sum_percent_income,
           v_sum_deal_cost
      from jsonb_to_record(v_value) as c (member text, percent_asset int, percent_income int, deal_cost int);
      if v_curent_member = v_member then
        v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Эта корпорация уже участвует в данной сделке!"}';
    return v_ret_val;
      end if;
    end if;    
  end loop;

  if v_j is null then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Достигнуто максимальное количество участников сделки!"}';
    return v_ret_val;
  elsif v_sum_percent_asset + v_percent_asset > 100 then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Суммарный процент владения активом превысил 100!"}';
    return v_ret_val;
  elsif v_sum_percent_income + v_percent_income > 100 then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Суммарный процент распределения доходов сделки превысил 100!"}';
    return v_ret_val;
  end if;

  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('asset_cost'), null, to_jsonb(round((v_sum_deal_cost + v_deal_cost) * 0.7)), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('asset_amortization'), null, to_jsonb(round((v_sum_deal_cost + v_deal_cost) * 0.07)), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('system_deal_participant' || v_j), null, ('{"member" : "' || v_member || '","percent_asset" : ' || v_percent_asset || ', "percent_income" : ' || v_percent_income || ', "deal_cost": ' || v_deal_cost || '}')::jsonb, in_user_object_id);

  -- Вставим сделку в подготавливаемые для этой корпорации
  v_value := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_corporation_id,
          v_system_corporation_draft_deals_attribute_id,
          null));
  v_value := coalesce(v_value, jsonb '[]') || jsonb_build_array(v_deal_code);
  perform data.set_attribute_value(v_corporation_id, v_system_corporation_draft_deals_attribute_id, null, v_value, in_user_object_id);


  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для изменения участника сделки 
CREATE OR REPLACE FUNCTION action_generators.edit_deal_member(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_row_num integer := json.get_integer(in_params, 'row_num');
  v_value jsonb;
  v_member text;
begin
  -- Показываем, если соответствующий участник уже добавлен
  v_value := data.get_attribute_value(v_user_object_id,
				       v_object_id, 
			               data.get_attribute_id('system_deal_participant' || v_row_num));
  if v_value is null then
    return null;
  else
   v_member := json.get_opt_string(v_value -> 'member');
  end if;
 -- Показываем только для автора сделки или мастера, и если она ещё черновик 
  if json.get_opt_integer(data.get_attribute_value(v_user_object_id,
					       v_object_id, 
					       data.get_attribute_id('deal_author')), 0) <> v_user_object_id and
    not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false) or 
     json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' or
     v_member is null then
    return null;
  end if;

  return jsonb_build_object(
    'edit_deal_member' || v_row_num,
    jsonb_build_object(
      'code', 'edit_deal_member',
      'name', 'Изменить параметры участника сделки',
      'type', 'financial.deal',
      'params', jsonb_build_object('deal_code', data.get_object_code(v_object_id), 'corporation_code' , v_member),
      'user_params', 
       jsonb_build_array(
        jsonb_build_object(
            'code', 'percent_asset',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0, 'max_value', 100),
            'description', '% владения активом',
            'default_value', json.get_opt_integer(v_value -> 'percent_asset'),
            'min_value_count', 1,
            'max_value_count', 1),
        jsonb_build_object(
            'code', 'percent_income',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0, 'max_value', 100),
            'description', '% дохода от сделки',
             'default_value', json.get_opt_integer(v_value -> 'percent_income'),
            'min_value_count', 1,
            'max_value_count', 1),
        jsonb_build_object(
            'code', 'deal_cost',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0),
            'description', 'Вложения в сделку',
            'default_value', json.get_opt_integer(v_value -> 'deal_cost'),
            'min_value_count', 1,
            'max_value_count', 1)))
      );
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.edit_deal_member(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_deal_code text := json.get_string(in_params, 'deal_code');
  v_deal_id integer := data.get_object_id(v_deal_code);
  v_member text := json.get_string(in_params, 'corporation_code');
  v_corporation_id integer := data.get_object_id(v_member);
  v_percent_asset integer := json.get_integer(in_user_params, 'percent_asset');
  v_percent_income integer := json.get_integer(in_user_params, 'percent_income');
  v_deal_cost integer := json.get_integer(in_user_params, 'deal_cost');

  v_i integer;
  v_j integer;

  v_value jsonb;
  v_sum_percent_asset integer := 0;
  v_sum_percent_income integer := 0;
  v_sum_deal_cost integer := 0;
  v_curent_member text;
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_deal_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус сделки изменился!"}';
    return v_ret_val;
  end if;
  for v_i in 1..10 loop
    v_value := data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('system_deal_participant' || v_i));
    if v_value is not null then
      if json.get_opt_string(v_value -> 'member') = v_member then
        v_j := v_i;
      else
        select v_sum_percent_asset + coalesce(c.percent_asset, 0),
               v_sum_percent_income + coalesce(c.percent_income, 0),
               v_sum_deal_cost + coalesce(c.deal_cost, 0)
        into v_sum_percent_asset,
             v_sum_percent_income,
             v_sum_deal_cost
        from jsonb_to_record(v_value) as c (percent_asset int, percent_income int, deal_cost int);
      end if;
    end if;    
  end loop;

  if v_sum_percent_asset + v_percent_asset > 100 then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Сумарный процент владения активом превысил 100!"}';
    return v_ret_val;
  elsif v_sum_percent_income + v_percent_income > 100 then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Сумарный процент распределения доходов сделки превысил 100!"}';
    return v_ret_val;
  end if;

  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('asset_cost'), null, to_jsonb(round((v_sum_deal_cost + v_deal_cost) * 0.7)), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('asset_amortization'), null, to_jsonb(round((v_sum_deal_cost + v_deal_cost) * 0.07)), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('system_deal_participant' || v_j), null, ('{"member" : "' || v_member || '","percent_asset" : ' || v_percent_asset || ', "percent_income" : ' || v_percent_income || ', "deal_cost": ' || v_deal_cost || '}')::jsonb, in_user_object_id);

  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

 -- Действие для удаления участника сделки 
CREATE OR REPLACE FUNCTION action_generators.delete_deal_member(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_row_num integer := json.get_integer(in_params, 'row_num');
  v_value jsonb;
  v_member text;
begin
  -- Показываем, если соответствующий участник уже добавлен
  v_value := data.get_attribute_value(v_user_object_id,
				       v_object_id, 
			               data.get_attribute_id('system_deal_participant' || v_row_num));
  if v_value is null then
    return null;
  else
   v_member := json.get_opt_string(v_value -> 'member');
  end if;
 -- Показываем только для автора сделки или мастера, и если она ещё черновик 
  if json.get_opt_integer(data.get_attribute_value(v_user_object_id,
					       v_object_id, 
					       data.get_attribute_id('deal_author')),0) <> v_user_object_id and
    not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false) or 
     json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' or
     v_member is null then
    return null;
  end if;

  return jsonb_build_object(
    'delete_deal_member' || v_row_num,
    jsonb_build_object(
      'code', 'delete_deal_member',
      'name', 'Удалить участника сделки',
      'type', 'financial.deal',
      'warning', 'Вы действительно хотите удалить ' || json.get_string(data.get_attribute_value(v_user_object_id, data.get_object_id(v_member), data.get_attribute_id('name'))) || ' из участников сделки?',
      'params', jsonb_build_object('deal_code', data.get_object_code(v_object_id), 'corporation_code' , v_member))
      );
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.delete_deal_member(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_deal_code text := json.get_string(in_params, 'deal_code');
  v_deal_id integer := data.get_object_id(v_deal_code);
  v_member text := json.get_string(in_params, 'corporation_code');
  v_corporation_id integer := data.get_object_id(v_member);

  v_i integer;
  v_j integer := 1;

  v_value jsonb;
  v_sum_deal_cost integer := 0;
  v_system_corporation_draft_deals_attribute_id integer := data.get_attribute_id('system_corporation_draft_deals');
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_deal_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус сделки изменился!"}';
    return v_ret_val;
   end if;
  for v_i in 1..10 loop
    v_value := data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('system_deal_participant' || v_i));
    if v_value is not null then
      if json.get_opt_string(v_value -> 'member') = v_member then
        v_j := v_j - 1;
      else
        if v_j < v_i then
          perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('system_deal_participant' || v_j), null, v_value, in_user_object_id);
        end if;
        v_sum_deal_cost := v_sum_deal_cost + json.get_opt_integer(v_value -> 'deal_cost', 0);
      end if;
    elsif v_j < v_i then
      perform data.delete_attribute_value_if_exists(v_deal_id, data.get_attribute_id('system_deal_participant' || v_j), null, in_user_object_id);
    end if; 
    v_j := v_j + 1; 
  end loop;

  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('asset_cost'), null, to_jsonb(round(v_sum_deal_cost  * 0.7)), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('asset_amortization'), null, to_jsonb(round(v_sum_deal_cost * 0.07)), in_user_object_id);

  -- Удалим сделку из подготавливаемых для этой корпорации
  v_value := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_corporation_id,
          v_system_corporation_draft_deals_attribute_id,
          null));
  v_value := coalesce(v_value, jsonb '[]') - v_deal_code;
  if v_value = '[]' then
    perform data.delete_attribute_value(v_corporation_id, v_system_corporation_draft_deals_attribute_id, null, in_user_object_id);
  else
    perform data.set_attribute_value(v_corporation_id, v_system_corporation_draft_deals_attribute_id, null, v_value, in_user_object_id);
  end if;

  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

 -- Действие для редактирования сделки
CREATE OR REPLACE FUNCTION action_generators.edit_deal(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для автора сделки или мастера, и если она ещё черновик 
  if json.get_opt_integer(data.get_attribute_value(v_user_object_id,
					       v_object_id, 
					       data.get_attribute_id('deal_author')),0) <> v_user_object_id and
    not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false) or 
     json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' then
     return null;
   end if;
  
  return jsonb_build_object(
    'edit_deal',
    jsonb_build_object(
      'code', 'edit_deal',
      'name', 'Редактировать сделку',
      'type', 'financial.deal',
      'params', jsonb_build_object('deal_code', data.get_object_code(v_object_id)),
      'user_params', 
       jsonb_build_array(
         jsonb_build_object(
            'code', 'deal_name',
            'type', 'string',
            'description', 'Название сделки',
            'data', jsonb_build_object('min_length', 1),
            'default_value', json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('name'))),
            'min_value_count', 1,
            'max_value_count', 1),
         jsonb_build_object(
            'code', 'description',
            'type', 'string',
            'description', 'Описание сделки',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'default_value', json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('description'))),
            'min_value_count', 1,
            'max_value_count', 1),
         jsonb_build_object(
            'code', 'deal_sector',
            'type', 'objects',
            'description', 'Рынок сделки',
            'data', jsonb_build_object('object_code', 'market', 'attribute_code', 'sectors'),
            'default_value', json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('deal_sector'))),
            'min_value_count', 1,
            'max_value_count', 1),
         jsonb_build_object(
            'code', 'asset_name',
            'type', 'string',
            'description', 'Название актива',
            'data', jsonb_build_object('min_length', 1),
            'default_value', json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('asset_name'))),
            'min_value_count', 1,
            'max_value_count', 1)))
      );
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.edit_deal(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_deal_code text := json.get_string(in_params, 'deal_code');
  v_deal_id integer := data.get_object_id(v_deal_code);
  v_deal_name text := json.get_string(in_user_params, 'deal_name');
  v_description text := json.get_string(in_user_params, 'description');
  v_asset_name text := json.get_string(in_user_params, 'asset_name');
  v_deal_sector text := json.get_string(in_user_params, 'deal_sector');

  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_deal_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус сделки изменился!"}';
    return v_ret_val;
   end if;

  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('name'), null, to_jsonb(v_deal_name), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('deal_author'), null, to_jsonb(in_user_object_id), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('description'), null, to_jsonb(v_description), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('deal_sector'), null, to_jsonb(v_deal_sector), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('asset_name'), null, to_jsonb(v_asset_name), in_user_object_id);

  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для удаления сделки
CREATE OR REPLACE FUNCTION action_generators.delete_deal(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для автора сделки или мастера, и если она ещё черновик 
  if json.get_opt_integer(data.get_attribute_value(v_user_object_id,
					       v_object_id, 
					       data.get_attribute_id('deal_author')),0) <> v_user_object_id and
    not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false) or 
     json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' then
     return null;
   end if;
  
  return jsonb_build_object(
    'delete_deal',
    jsonb_build_object(
      'code', 'delete_deal',
      'name', 'Удалить сделку',
      'type', 'financial.deal',
      'params', jsonb_build_object('deal_code', data.get_object_code(v_object_id)),
      'warning', 'Вы действительно хотите удалить сделку ' || json.get_string(data.get_attribute_value(v_user_object_id, v_object_id, data.get_attribute_id('name'))) || ' ?'
      )
      );
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.delete_deal(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_deal_code text := json.get_string(in_params, 'deal_code');
  v_deal_id integer := data.get_object_id(v_deal_code);
  v_corporation_id integer;

  v_system_corporation_draft_deals_attribute_id integer := data.get_attribute_id('system_corporation_draft_deals');
  v_value jsonb;
  v_value_draft_deals jsonb;
  v_i integer;
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_deal_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус сделки изменился!"}';
    return v_ret_val;
   end if;

  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('deal_status'), null, jsonb '"deleted"', in_user_object_id);

  -- Удалим сделку из подготавливаемых для всех корпораций
  for v_i in 1..10 loop
    v_value := data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('system_deal_participant' || v_i));
    if v_value is not null then
      v_corporation_id := data.get_object_id(json.get_opt_string(v_value -> 'member'));
      v_value_draft_deals := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_corporation_id,
          v_system_corporation_draft_deals_attribute_id,
          null));
      v_value_draft_deals := coalesce(v_value_draft_deals, jsonb '[]') - v_deal_code;
      if v_value_draft_deals = '[]' then
        perform data.delete_attribute_value(v_corporation_id, v_system_corporation_draft_deals_attribute_id, null, in_user_object_id);
      else
        perform data.set_attribute_value(v_corporation_id, v_system_corporation_draft_deals_attribute_id, null, v_value_draft_deals, in_user_object_id);
      end if;
    end if;    
  end loop;

  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(data.get_object_code(in_user_object_id)),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для проверки сделки перед утверждением
CREATE OR REPLACE FUNCTION action_generators.check_deal(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для автора сделки или мастера, и если она ещё черновик 
  if json.get_opt_integer(data.get_attribute_value(v_user_object_id,
					       v_object_id, 
					       data.get_attribute_id('deal_author')),0) <> v_user_object_id and
    not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false) or 
     json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' then
     return null;
   end if;
  
  return jsonb_build_object(
    'check_deal',
    jsonb_build_object(
      'code', 'check_deal',
      'name', 'Проверить сделку',
      'type', 'financial.deal',
      'params', jsonb_build_object('deal_code', data.get_object_code(v_object_id)))
      );
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.check_deal(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_deal_code text := json.get_string(in_params, 'deal_code');
  v_deal_id integer := data.get_object_id(v_deal_code);
  v_corporation_id integer;

  v_corporation_capitalization_attribute_id integer := data.get_attribute_id('corporation_capitalization');
  v_min_capitalization integer;
  v_capitalization integer;
  v_value jsonb;
  v_i integer;
  v_number integer := 0;

  v_sum_percent_asset integer := 0;
  v_sum_percent_income integer := 0;

  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_deal_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус сделки изменился!"}';
    return v_ret_val;
   end if;

  -- В сделке должно участвовать не меньше 2 корпораций
  -- Суммарно проценты владения активом и проценты доходов должны быть 100 и 100
  -- Стоимость актива должна быть >= 1000 000

  if json.get_opt_integer(data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('asset_cost')), 0) < 1000000 then
   v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Стоимость актива должна быть не меньше 1 000 000"}';
   return v_ret_val;
  end if;


  for v_i in 1..10 loop
    v_value := data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('system_deal_participant' || v_i));
    if v_value is not null then
    v_number := v_number + 1;
      v_corporation_id := data.get_object_id(json.get_opt_string(v_value -> 'member'));
      v_capitalization := json.get_opt_integer(data.get_attribute_value(in_user_object_id, v_corporation_id, v_corporation_capitalization_attribute_id),0);
      if v_min_capitalization is null or v_min_capitalization > v_capitalization then
        v_min_capitalization := v_capitalization;
      end if;
      select v_sum_percent_asset + coalesce(c.percent_asset, 0),
               v_sum_percent_income + coalesce(c.percent_income, 0)
        into v_sum_percent_asset,
             v_sum_percent_income
        from jsonb_to_record(v_value) as c (percent_asset int, percent_income int);
    end if;    
  end loop;

  if v_number < 2 then
   v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "В сделке должно участвовать не меньше двух корпораций"}';
   return v_ret_val;
  end if;

  if v_sum_percent_asset != 100 then
   v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Суммарное владение активом должно составлять 100%"}';
   return v_ret_val;
  end if;

  if v_sum_percent_income != 100 then
   v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Суммарное процент распределения дохода должен составлять 100%"}';
   return v_ret_val;
  end if;

  v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Проверка корректности заполнения сделки завершилась успешно"}';
  return v_ret_val;
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.transfer_to_null(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_receiver_id integer := data.get_object_id(json.get_string(in_user_params, 'receiver'));
  v_description text := json.get_string(in_user_params, 'description');
  v_sum integer := json.get_integer(in_user_params, 'sum');

  v_system_balance_attribute_id integer := data.get_attribute_id('system_balance');
  v_user_balance integer;
  v_receiver_balance integer;

  v_ret_val api.result;
begin
  assert in_user_object_id is not null;
  assert in_user_object_id != v_receiver_id;
  assert v_sum > 0;

  if in_user_object_id < v_receiver_id then
    v_user_balance := data.get_attribute_value_for_update(in_user_object_id, v_system_balance_attribute_id, null);
    v_receiver_balance := data.get_attribute_value_for_update(v_receiver_id, v_system_balance_attribute_id, null);
  else
    v_receiver_balance := data.get_attribute_value_for_update(v_receiver_id, v_system_balance_attribute_id, null);
    v_user_balance := data.get_attribute_value_for_update(in_user_object_id, v_system_balance_attribute_id, null);
  end if;

  if coalesce(v_user_balance, 0) < v_sum then
    v_ret_val := api_utils.get_objects(
      in_client,
      in_user_object_id,
      jsonb_build_object(
        'object_codes', jsonb_build_array(data.get_object_code(in_user_object_id)),
        'get_actions', true,
        'get_templates', true));
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Недостаточно средств!"}';
    return v_ret_val;
  end if;

  perform data.set_attribute_value(
    in_user_object_id,
    v_system_balance_attribute_id,
    null,
    to_jsonb(v_user_balance - v_sum),
    in_user_object_id,
    'Перевод средств пользователю ' || v_receiver_id);
  perform data.set_attribute_value(
    v_receiver_id,
    v_system_balance_attribute_id,
    null,
    to_jsonb(v_receiver_balance + v_sum),
    in_user_object_id,
    'Перевод средств от пользователя ' || in_user_object_id);

  perform actions.create_transaction(
    in_user_object_id,
    in_user_object_id,
    v_receiver_id,
    v_description,
    v_sum,
    v_user_balance - v_sum,
    v_receiver_balance + v_sum,
    true,
    false);

  return api_utils.get_objects(
    in_client,
    in_user_object_id,
    jsonb_build_object(
      'object_codes', jsonb '["transactions"]',
      'get_actions', false,
      'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

-- Действие для утверждения сделки
CREATE OR REPLACE FUNCTION action_generators.confirm_deal(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для мастера, и если она ещё черновик 
  if not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false) or 
     json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' then
     return null;
   end if;
  
  return jsonb_build_object(
    'confirm_deal',
    jsonb_build_object(
      'code', 'confirm_deal',
      'name', 'Утвердить сделку',
      'type', 'financial.deal',
      'warning', 'Проверьте, что достаточное количество акционеров всех корпораций-участников согласны с проведением сделки!',
      'params', jsonb_build_object('deal_code', data.get_object_code(v_object_id)))
      );
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.confirm_deal(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_deal_code text := json.get_string(in_params, 'deal_code');
  v_deal_id integer := data.get_object_id(v_deal_code);
  v_deal_name text;
  v_asset_cost integer;
  v_deal_sector text;
  v_deal_income integer;
  
  v_corporation_id integer;
  v_corporation_code text;

  v_min_capitalization integer;
  v_capitalization integer;
  v_value jsonb;
  v_i integer;
  v_number integer := 0;

  v_sum_percent_asset integer := 0;
  v_sum_percent_income integer := 0;
  v_sum_deals_income integer;

  v_balance integer;
  v_sector_volume integer;
  v_coef decimal;
  v_percent_income integer;
  v_corporation_state text;
  v_state_tax integer;

  v_corporation_capitalization_attribute_id integer := data.get_attribute_id('corporation_capitalization');
  v_system_balance_attribute_id integer := data.get_attribute_id('system_balance');
  v_name_attribute_id integer := data.get_attribute_id('name');
  v_asset_cost_attribute_id integer := data.get_attribute_id('asset_cost');
  v_deal_sector_attribute_id integer := data.get_attribute_id('deal_sector');
  v_deal_income_attribute_id integer := data.get_attribute_id('deal_income');
  v_sector_volume_attribute_id integer := data.get_attribute_id('sector_volume');
  v_corporation_state_attribute_id integer := data.get_attribute_id('corporation_state');
  v_state_tax_attribute_id integer := data.get_attribute_id('state_tax');
  v_system_corporation_draft_deals_attribute_id integer := data.get_attribute_id('system_corporation_draft_deals');
  v_system_corporation_deals_attribute_id integer := data.get_attribute_id('system_corporation_deals');
  
  v_corp_income jsonb := jsonb '{}';
  v_corporation record;
  v_value_draft_deals jsonb;
  v_value_deals jsonb;
    
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_deal_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'draft' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус сделки изменился!"}';
    return v_ret_val;
   end if;

   -- Вытащим нужную информацию про нашу сделку
  select json.get_string(av.value)
    into v_deal_name
  from data.attribute_values av
      where av.object_id = v_deal_id
        and av.attribute_id = v_name_attribute_id
        and av.value_object_id is null;
  select json.get_opt_integer(av.value, 0)
    into v_asset_cost
  from data.attribute_values av
      where av.object_id = v_deal_id
        and av.attribute_id = v_asset_cost_attribute_id
        and av.value_object_id is null;
  select json.get_string(av.value)
    into v_deal_sector
  from data.attribute_values av
      where av.object_id = v_deal_id
        and av.attribute_id = v_deal_sector_attribute_id
        and av.value_object_id is null;
  select json.get_opt_integer(av.value, 0)
    into v_deal_income
  from data.attribute_values av
      where av.object_id = v_deal_id
        and av.attribute_id = v_deal_income_attribute_id
        and av.value_object_id is null;
     
  -- В сделке должно участвовать не меньше 2 корпораций
  -- Суммарно проценты владения активом и проценты доходов должны быть 100 и 100
  -- Стоимость актива должна быть >= 1000 000

  if v_asset_cost < 1000000 then
   v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Стоимость актива должна быть больше 1000 000"}';
   return v_ret_val;
  end if;

  for v_i in 1..10 loop
    v_value := data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('system_deal_participant' || v_i));
    if v_value is not null then
    v_number := v_number + 1;
      v_corporation_id := data.get_object_id(json.get_opt_string(v_value -> 'member'));
      v_capitalization := json.get_opt_integer(data.get_attribute_value(in_user_object_id, v_corporation_id, v_corporation_capitalization_attribute_id),0);
      if v_min_capitalization is null or v_min_capitalization > v_capitalization then
        v_min_capitalization := v_capitalization;
      end if;
      select v_sum_percent_asset + coalesce(c.percent_asset, 0),
               v_sum_percent_income + coalesce(c.percent_income, 0)
        into v_sum_percent_asset,
             v_sum_percent_income
        from jsonb_to_record(v_value) as c (percent_asset int, percent_income int);
    end if;    
  end loop;

  if v_number < 2 then
   v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "В сделке должно участвовать не меньше двух корпораций"}';
   return v_ret_val;
  end if;

  if v_sum_percent_asset != 100 then
   v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Суммарное владение активом должно составлять 100%"}';
   return v_ret_val;
  end if;

  if v_sum_percent_income != 100 then
   v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Суммарное процент распределения дохода должен составлять 100%"}';
   return v_ret_val;
  end if;

  -- проверить, что у всех хватает денег на оплату сделки
  for v_i in 1..10 loop
    v_value := data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('system_deal_participant' || v_i));
    if v_value is not null then
      v_corporation_id := data.get_object_id(json.get_opt_string(v_value, null, 'member'));
      select av.value 
        into v_balance
      from data.attribute_values av
      where av.object_id = v_corporation_id
        and av.attribute_id = v_system_balance_attribute_id
        and av.value_object_id is null
      for share;
      if v_balance < json.get_opt_integer(v_value, 0, 'deal_cost') then 
        v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "На балансе одной из корпораций не хватает средств для заключения этой сделки"}';
        return v_ret_val;
      end if;
    end if;    
  end loop;
  
  v_deal_income = round(v_min_capitalization * 0.06); 
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('deal_income'), null, to_jsonb(v_deal_income), in_user_object_id);    
       
  -- снять оплату сделки и пересчитать капитализацию всех корпораций участников
  for v_i in 1..10 loop
    v_value := data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('system_deal_participant' || v_i));
    if v_value is not null then
      v_corporation_id := data.get_object_id(json.get_opt_string(v_value, null, 'member'));
      if json.get_opt_integer(v_value, 0, 'deal_cost') > 0 then
        perform actions.transfer_to_null(in_client, v_corporation_id, null, jsonb_build_object('receiver', v_deal_code, 'description', 'Оплата сделки ' || v_deal_name, 'sum', json.get_integer(v_value, 'deal_cost')));
      end if;
      v_capitalization := json.get_opt_integer(data.get_attribute_value(in_user_object_id, v_corporation_id, v_corporation_capitalization_attribute_id), 0);
      perform data.set_attribute_value_if_changed(v_corporation_id, v_corporation_capitalization_attribute_id, null, to_jsonb(v_capitalization + round(v_asset_cost * json.get_opt_integer(v_value, 0, 'percent_asset') / 100)), in_user_object_id);
    end if;    
  end loop;  
 
  -- посчитать доход каждой компании по этой сделке:
  -- вначале посчитаем суммарный доход всех активных сделок по рынку
  select sum(json.get_opt_integer(av_income.value, 0))
    into v_sum_deals_income
    from data.object_objects oo
    join data.attribute_values av on av.object_id = oo.object_id 
				and av.attribute_id = v_deal_sector_attribute_id 
				and av.value_object_id is null 
				and json.get_string(av.value) = v_deal_sector
    join data.attribute_values av_income on av_income.object_id = oo.object_id 
					and av_income.attribute_id = v_deal_income_attribute_id 
					and av_income.value_object_id is null 
   where oo.parent_object_id = data.get_object_id('normal_deals')
     and oo.object_id <> oo.parent_object_id;

  -- объём рынка
  select json.get_opt_integer(av.value, 0)
    into v_sector_volume
  from data.attribute_values av
      where av.object_id = data.get_object_id(v_deal_sector)
        and av.attribute_id = v_sector_volume_attribute_id
        and av.value_object_id is null;
  -- Если рынка на всех не хватает, нужен коэффициент пропорционального уменьшения дохода
  if v_sector_volume >= v_sum_deals_income + v_deal_income then 
    v_coef := 1;
  else
    v_coef := v_sector_volume / (v_sum_deals_income + v_deal_income);
  end if;
  
  for v_i in 1..10 loop
    v_value := data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('system_deal_participant' || v_i));
    if v_value is not null then
        v_corporation_code := json.get_opt_string(v_value, null, 'member');
        v_corporation_id := data.get_object_id(v_corporation_code);
        v_percent_income := json.get_opt_integer(v_value, 0, 'percent_income');
        v_corp_income :=  jsonb_set(v_corp_income, array_agg(v_corporation_code), to_jsonb(round(v_deal_income * v_coef * v_percent_income / 100)));
     end if;
  end loop; 
  
  -- перечисляем доход и налог каждой компании по этой сделке  

  for v_corporation in (select key, json.get_opt_integer(value, 0) val from jsonb_each(v_corp_income)) loop
    if v_corporation.val > 0 then
      perform actions.generate_money(in_client, v_deal_id, null, jsonb_build_object('receiver', v_corporation.key, 'description', 'Доход от сделки ' || v_deal_name, 'sum', v_corporation.val));
	  if v_deal_sector <> 'sector_black_market' then
      -- Страна для налога
		  select json.get_opt_string(av.value)
		  into v_corporation_state
		  from data.attribute_values av
		  where av.object_id = data.get_object_id(v_corporation.key)
			and av.attribute_id = v_corporation_state_attribute_id
			and av.value_object_id is null;
		  if v_corporation_state is not null then
			select json.get_opt_integer(av.value, 0)
			into v_state_tax
			from data.attribute_values av
			where av.object_id = data.get_object_id(v_corporation_state)
			  and av.attribute_id = v_state_tax_attribute_id
			  and av.value_object_id is null;
			if v_state_tax > 0 and round(v_corporation.val * v_state_tax / 100) > 0 then
			  perform actions.transfer(in_client, data.get_object_id(v_corporation.key), null, jsonb_build_object('receiver', v_corporation_state, 'description', 'Налог на доход по сделке ' || v_deal_name, 'sum', round(v_corporation.val * v_state_tax / 100)));
			end if;
	    end if;
      end if;
    end if;
  end loop;    

  -- поменять статус сделки и даты
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('deal_status'), null, jsonb '"normal"', in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('system_deal_time'), null, to_jsonb(utils.system_time()), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('deal_time'), null, to_jsonb(utils.current_time()), in_user_object_id);
  
  -- Удалим сделку из подготавливаемых для всех корпораций
  -- добавляем сделку в список активных для всех компаний
  for v_i in 1..10 loop
    v_value := data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('system_deal_participant' || v_i));
    if v_value is not null then
      v_corporation_id := data.get_object_id(json.get_opt_string(v_value -> 'member'));
      v_value_draft_deals := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_corporation_id,
          v_system_corporation_draft_deals_attribute_id,
          null));
      v_value_deals := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_corporation_id,
          v_system_corporation_deals_attribute_id,
          null));
      v_value_draft_deals := coalesce(v_value_draft_deals, jsonb '[]') - v_deal_code;
      if v_value_draft_deals = '[]' then
        perform data.delete_attribute_value_if_exists(v_corporation_id, v_system_corporation_draft_deals_attribute_id, null, in_user_object_id);
      else
        perform data.set_attribute_value(v_corporation_id, v_system_corporation_draft_deals_attribute_id, null, v_value_draft_deals, in_user_object_id);
      end if;
      v_value_deals := coalesce(v_value_deals, jsonb '[]') || to_jsonb(v_deal_code);
      perform data.set_attribute_value(v_corporation_id, v_system_corporation_deals_attribute_id, null, v_value_deals, in_user_object_id);
    end if;    
  end loop;

  return api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для расторжения сделки
CREATE OR REPLACE FUNCTION action_generators.cancel_deal(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для мастера, и если сделка утверждена 
  if not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false) or 
     json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'normal' then
     return null;
   end if;
  
  return jsonb_build_object(
    'cancel_deal',
    jsonb_build_object(
      'code', 'cancel_deal',
      'name', 'Расторгнуть сделку',
      'type', 'financial.deal',
      'warning', 'Проверьте, что достаточное количество акционеров всех корпораций-участников согласны с расторжением сделки!',
      'params', jsonb_build_object('deal_code', data.get_object_code(v_object_id)))
      );
end;
$BODY$
  LANGUAGE plpgsql IMMUTABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.cancel_deal(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_deal_code text := json.get_string(in_params, 'deal_code');
  v_deal_id integer := data.get_object_id(v_deal_code);
  v_asset_cost integer;
  
  v_corporation_id integer;
  v_capitalization integer;
  v_value jsonb;
  v_i integer;

  v_corporation_capitalization_attribute_id integer := data.get_attribute_id('corporation_capitalization');
  v_asset_cost_attribute_id integer := data.get_attribute_id('asset_cost');
  v_system_corporation_canceled_deals_attribute_id integer := data.get_attribute_id('system_corporation_canceled_deals');
  v_system_corporation_deals_attribute_id integer := data.get_attribute_id('system_corporation_deals');
  
  v_value_canceled_deals jsonb;
  v_value_deals jsonb;
    
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_deal_id, 
					          data.get_attribute_id('deal_status')),'~') <> 'normal' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус сделки изменился!"}';
    return v_ret_val;
   end if;

   -- Вытащим нужную информацию про нашу сделку
  select json.get_opt_integer(av.value, 0)
    into v_asset_cost
  from data.attribute_values av
      where av.object_id = v_deal_id
        and av.attribute_id = v_asset_cost_attribute_id
        and av.value_object_id is null;
       
  -- пересчитать капитализацию всех корпораций участников
  for v_i in 1..10 loop
    v_value := data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('system_deal_participant' || v_i));
    if v_value is not null then
      v_corporation_id := data.get_object_id(json.get_opt_string(v_value, null, 'member'));
      v_capitalization := json.get_opt_integer(data.get_attribute_value(in_user_object_id, v_corporation_id, v_corporation_capitalization_attribute_id), 0);
      perform data.set_attribute_value_if_changed(v_corporation_id, v_corporation_capitalization_attribute_id, null, to_jsonb(v_capitalization - round(v_asset_cost * json.get_opt_integer(v_value, 0, 'percent_asset') / 100)), in_user_object_id);
    end if;    
  end loop;  

  -- поменять статус сделки и даты
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('deal_status'), null, jsonb '"canceled"', in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('system_deal_time'), null, to_jsonb(utils.system_time()), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('deal_cancel_time'), null, to_jsonb(utils.current_time()), in_user_object_id);
  
  -- Удалим сделку из активных для всех корпораций
  -- добавляем сделку в список расторгнутых для всех компаний
  for v_i in 1..10 loop
    v_value := data.get_attribute_value(in_user_object_id, v_deal_id, data.get_attribute_id('system_deal_participant' || v_i));
    if v_value is not null then
      v_corporation_id := data.get_object_id(json.get_opt_string(v_value -> 'member'));
      v_value_deals := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_corporation_id,
          v_system_corporation_deals_attribute_id,
          null));
      v_value_canceled_deals := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_corporation_id,
          v_system_corporation_canceled_deals_attribute_id,
          null));
      v_value_deals := coalesce(v_value_deals, jsonb '[]') - v_deal_code;
      if v_value_deals = '[]' then
        perform data.set_attribute_value(v_corporation_id, v_system_corporation_deals_attribute_id, null, in_user_object_id);
      else
        perform data.set_attribute_value(v_corporation_id, v_system_corporation_deals_attribute_id, null, v_value_deals, in_user_object_id);
      end if;
      v_value_canceled_deals := coalesce(v_value_canceled_deals, jsonb '[]') || to_jsonb(v_deal_code);
      perform data.set_attribute_value(v_corporation_id, v_system_corporation_canceled_deals_attribute_id, null, v_value_canceled_deals, in_user_object_id);
    end if;    
  end loop;

  return api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для изменения объёма рынка
CREATE OR REPLACE FUNCTION action_generators.change_sector_volume(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
begin
 -- Показываем только для мастера
  if not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false) then
     return null;
   end if;

  return jsonb_build_object(
    'change_sector_volume',
    jsonb_build_object(
      'code', 'change_sector_volume',
      'name', 'Изменить объём рынка',
      'type', 'financial.sector_volume.change',
      'params', jsonb_build_object('sector_code', data.get_object_code(json.get_integer(in_params, 'object_id'))),
      'user_params', 
        jsonb_build_array(
          jsonb_build_object(
            'code', 'sector_volume',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0),
            'description', 'Объём рынка',
            'default_value', data.get_attribute_value(json.get_integer(in_params, 'user_object_id'),json.get_integer(in_params, 'object_id'), data.get_attribute_id('sector_volume')),
            'min_value_count', 1,
            'max_value_count', 1),
          jsonb_build_object(
            'code', 'sector_volume_change',
            'type', 'string',
            'data', jsonb_build_object('min_length', 1),
            'description', 'Комментарий',
            'min_value_count', 1,
            'max_value_count', 1)
            )));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.change_sector_volume(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_sector_code text := json.get_string(in_params, 'sector_code');
  v_sector_id integer := data.get_object_id(v_sector_code);
  v_sector_volume_attribute_id integer := data.get_attribute_id('sector_volume');
  v_sector_volume_changes_attribute_id integer := data.get_attribute_id('sector_volume_changes');
  
  v_sector_volume integer := json.get_integer(in_user_params, 'sector_volume');
  v_sector_volume_change text := json.get_opt_string(in_user_params, null, 'sector_volume_change');
  v_sector_volume_old integer;
  v_sector_volume_changes_old text;
begin

  v_sector_volume_old := json.get_opt_integer(data.get_raw_attribute_value(v_sector_id, v_sector_volume_attribute_id, null), 0);
  v_sector_volume_changes_old := json.get_opt_string(data.get_raw_attribute_value(v_sector_id, v_sector_volume_changes_attribute_id, null));
  
  perform data.set_attribute_value_if_changed(
    v_sector_id,
    v_sector_volume_attribute_id,
    null,
    to_jsonb(v_sector_volume),
    in_user_object_id);
  perform data.set_attribute_value_if_changed(
    v_sector_id,
    v_sector_volume_changes_attribute_id,
    null,
    to_jsonb(v_sector_volume_changes_old || '<br>' || utils.current_time() || ' было '|| v_sector_volume_old || ' стало ' || v_sector_volume || ' - ' || v_sector_volume_change),
    in_user_object_id);
    
  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_sector_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для рассчёта дохода за цикл
CREATE OR REPLACE FUNCTION action_generators.calc_money(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_market_last_time_attribute_id integer := data.get_attribute_id('market_last_time');
  v_market_last_time text;
begin
   -- Показываем только для мастера
  if not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false) then
     return null;
   end if;

  v_market_last_time := json.get_opt_string(data.get_raw_attribute_value(v_object_id, v_market_last_time_attribute_id, null));
  
  return jsonb_build_object(
    'calc_money',
    jsonb_build_object(
      'code', 'calc_money',
      'name', 'Пересчитать доходы и расходы за цикл',
      'type', 'financial.money',
      'warning', 'Последний раз это расчёт вызывался в ' || coalesce(v_market_last_time, 'прошлом тысячелетии') || '. Вы уверены, что время пришло?',
      'params', jsonb_build_object('last_time', v_market_last_time, 'market_code', data.get_object_code(json.get_integer(in_params, 'object_id'))))
      );
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

CREATE OR REPLACE FUNCTION actions.calc_money(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_last_time text := json.get_opt_string(in_params, '~', 'last_time');
  v_market_code text := json.get_string(in_params, 'market_code');
  v_market_id integer := data.get_object_id(v_market_code);
  
  v_corporation_id integer;
  v_corporation_code text;

  v_value jsonb;
  v_i integer;

  v_sum_deals_income integer;

  v_sector_volume integer;
  v_coef decimal;
  v_percent_income integer;
  v_percent_asset integer;
  v_corporation_state text;
  v_state_tax integer;
  v_money integer;
  v_dividend_vote_percent integer;
  v_sector_name text;
  
  v_name_attribute_id integer := data.get_attribute_id('name');
  v_asset_cost_attribute_id integer := data.get_attribute_id('asset_cost');
  v_deal_sector_attribute_id integer := data.get_attribute_id('deal_sector');
  v_deal_income_attribute_id integer := data.get_attribute_id('deal_income');
  v_sector_volume_attribute_id integer := data.get_attribute_id('sector_volume');
  v_corporation_state_attribute_id integer := data.get_attribute_id('corporation_state');
  v_state_tax_attribute_id integer := data.get_attribute_id('state_tax');
  v_asset_amortization_attribute_id integer := data.get_attribute_id('asset_amortization');
  v_corporation_capitalization_attribute_id integer := data.get_attribute_id('corporation_capitalization');
  v_dividend_vote_attribute_id integer := data.get_attribute_id('dividend_vote');
  v_system_corporation_members_attribute_id integer := data.get_attribute_id('system_corporation_members');
  v_system_balance_attribute_id integer := data.get_attribute_id('system_balance');
  v_system_person_salary_attribute_id integer := data.get_attribute_id('system_person_salary');
  v_system_person_votes_num_attribute_id integer := data.get_attribute_id('system_person_votes_num');
  

  v_corp_income jsonb := jsonb '{}';
  v_corporation record;
  v_deal_sector record;
  v_deals record;
  v_persons record;
    
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_market_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value_for_share( v_market_id, 
					                    data.get_attribute_id('market_last_time'),
					                    null),'~') <> v_last_time then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Время последнего вызова команды поменялось! Перезагрузите рынок"}';
    return v_ret_val;
   end if;
   perform data.set_attribute_value_if_changed(v_market_id, data.get_attribute_id('market_last_time'), null, to_jsonb(utils.current_time()), in_user_object_id);

  -- Будем считать по очереди для каждого рынка
  for v_deal_sector in (select oo.object_id id,
			       data.get_object_code(oo.object_id) code 
			 from data.object_objects oo 
                        where oo.parent_object_id = v_market_id
                          and oo.object_id <> oo.parent_object_id) loop

     v_sector_name := json.get_string(data.get_raw_attribute_value(v_deal_sector.id, v_name_attribute_id, null));

    v_corp_income := jsonb '{}';

    -- вначале посчитаем суммарный доход всех активных сделок по рынку
    select sum(json.get_opt_integer(av_income.value, 0))
      into v_sum_deals_income
      from data.object_objects oo
      join data.attribute_values av on av.object_id = oo.object_id 
				   and av.attribute_id = v_deal_sector_attribute_id 
				   and av.value_object_id is null 
				   and json.get_string(av.value) = v_deal_sector.code
      join data.attribute_values av_income on av_income.object_id = oo.object_id 
					  and av_income.attribute_id = v_deal_income_attribute_id 
					  and av_income.value_object_id is null 
     where oo.parent_object_id = data.get_object_id('normal_deals')
       and oo.object_id <> oo.parent_object_id;
     
    -- объём рынка
    v_sector_volume := json.get_opt_integer(data.get_raw_attribute_value(v_deal_sector.id, v_sector_volume_attribute_id, null), 0);

    -- Если рынка на всех не хватает, нужен коэффициент пропорционального уменьшения дохода
    if v_sector_volume >= v_sum_deals_income then 
      v_coef := 1;
    else
      v_coef := v_sector_volume / v_sum_deals_income;
    end if;

    -- Для каждой активной сделки считаем доходы
    for v_deals in (
      select oo.object_id as id,
             o.code as code,
             json.get_opt_integer(av_income.value, 0) as income, 
             json.get_opt_integer(av_amo.value, 0) as amo,
             json.get_string(av_name.value) as name
      from data.object_objects oo
      join data.attribute_values av on av.object_id = oo.object_id 
				   and av.attribute_id = v_deal_sector_attribute_id 
				   and av.value_object_id is null 
				   and json.get_string(av.value) = v_deal_sector.code
      join data.attribute_values av_income on av_income.object_id = oo.object_id 
					  and av_income.attribute_id = v_deal_income_attribute_id 
					  and av_income.value_object_id is null 
      join data.attribute_values av_amo on av_amo.object_id = oo.object_id 
					and av_amo.attribute_id = v_asset_amortization_attribute_id 
					and av_amo.value_object_id is null
      join data.attribute_values av_name on av_name.object_id = oo.object_id 
					and av_name.attribute_id = v_name_attribute_id 
					and av_name.value_object_id is null
      join data.objects o on o.id = oo.object_id	  
     where oo.parent_object_id = data.get_object_id('normal_deals')
       and oo.object_id <> oo.parent_object_id) loop
      for v_i in 1..10 loop
        v_value := data.get_raw_attribute_value(v_deals.id, data.get_attribute_id('system_deal_participant' || v_i), null);
        if v_value is not null then
	  v_corporation_code := json.get_opt_string(v_value, null, 'member');
	  v_corporation_id := data.get_object_id(v_corporation_code);
	  v_percent_income := json.get_opt_integer(v_value, 0, 'percent_income');
	  v_percent_asset := json.get_opt_integer(v_value, 0, 'percent_asset');
	  v_money := round(v_deals.income * v_coef * v_percent_income / 100);
	  if v_money > 0 then
	    v_corp_income :=  jsonb_set(v_corp_income, array_agg(v_corporation_code), to_jsonb(v_money));
	    perform actions.generate_money(in_client, v_deals.id, null, jsonb_build_object('receiver', v_corporation_code, 'description', 'Доход от сделки ' || v_deals.name, 'sum', to_jsonb(v_money)));
	  end if;
	  if round(v_deals.amo * v_percent_asset / 100) > 0 then
            perform actions.transfer_to_null(in_client, v_corporation_id, null, jsonb_build_object('receiver', v_deals.code, 'description', 'Расход за амортизацию актива по сделке ' || v_deals.name, 'sum', to_jsonb(round(v_deals.amo * v_percent_asset / 100))));
          end if;
        end if;
      end loop; 
    end loop;
	
	if data.get_object_code(v_deal_sector.id) <> 'sector_black_market' then  
    -- перечисляем налог от каждой компании   
    for v_corporation in (select key, json.get_opt_integer(value, 0) val from jsonb_each(v_corp_income)) loop
      if v_corporation.val > 0 then
	-- Страна для налога
	v_corporation_state := json.get_opt_string(data.get_raw_attribute_value(data.get_object_id(v_corporation.key),v_corporation_state_attribute_id, null));
	if v_corporation_state is not null then
	  v_state_tax := json.get_opt_integer(data.get_raw_attribute_value(data.get_object_id(v_corporation_state), v_state_tax_attribute_id, null), 0);
	  if round(v_corporation.val * v_state_tax / 100) > 0 then
	    perform actions.transfer(in_client, 
				     data.get_object_id(v_corporation.key),
				     null, 
				     jsonb_build_object('receiver', v_corporation_state, 'description', 'Налог на доход за экономический цикл за сделки рынка ' || v_sector_name, 'sum', round(v_corporation.val * v_state_tax / 100)));
	  end if;
	end if;
      end if;
    end loop;
   end if;    
  end loop;

  -- Для каждой компании проверяем, соглашались ли акционеры не выплату дивидендов
  for v_corporation in (
      select oo.object_id as id,
             o.code as code,
             json.get_string(av_name.value) as name,
             json.get_opt_integer(av_capi.value,0) as capi,
             av_member.value as member,
             json.get_opt_integer(av_balance.value, 0) as balance
      from data.object_objects oo
      join data.objects o on o.id = oo.object_id
      join data.attribute_values av_capi on av_capi.object_id = oo.object_id 
					and av_capi.attribute_id = v_corporation_capitalization_attribute_id 
					and av_capi.value_object_id is null 
      join data.attribute_values av_name on av_name.object_id = oo.object_id 
					and av_name.attribute_id = v_name_attribute_id 
					and av_name.value_object_id is null
      join data.attribute_values av_member on av_member.object_id = oo.object_id 
					  and av_member.attribute_id = v_system_corporation_members_attribute_id 
					  and av_member.value_object_id is null
      join data.attribute_values av_balance on av_balance.object_id = oo.object_id 
					  and av_balance.attribute_id = v_system_balance_attribute_id 
					  and av_balance.value_object_id is null
      where oo.parent_object_id = data.get_object_id('corporations')
        and oo.object_id <> oo.parent_object_id) loop
        -- Если 5% от капитализации не превышает остатка на счёте корпорации
    if v_corporation.capi * 5 / 100 <= v_corporation.balance then
      select coalesce(sum(c.percent), 0) 
        into v_dividend_vote_percent
      from data.attribute_values av
      join data.objects o on o.id = av.value_object_id
      join jsonb_to_recordset(v_corporation.member) as c (member text, percent integer) on c.member = o.code
      where av.object_id = v_corporation.id
        and av.attribute_id = v_dividend_vote_attribute_id
        and av.value_object_id is not null
        and av.value = jsonb '"Да"';
      if v_dividend_vote_percent >= 80 then
        perform
        (case when round((v_corporation.capi * 5 / 100) * c.percent / 100) > 0 then
          actions.transfer(in_client, v_corporation.id, null, jsonb_build_object('receiver', c.member, 'description', 'Дивиденды от корпорации ' || v_corporation.name, 'sum', round((v_corporation.capi * 5 / 100) * c.percent / 100)))
        else null
        end) 
        from jsonb_to_recordset(v_corporation.member) as c (member text, percent integer);
      end if; 
    end if;
    perform
      data.delete_attribute_value_if_exists(v_corporation.id, v_dividend_vote_attribute_id, data.get_object_id(c.member),in_user_object_id)
    from jsonb_to_recordset(v_corporation.member) as c (member text, percent integer);
  end loop;

  -- Личные зарплаты персонажей
  for v_persons in (select o.code, json.get_opt_integer(av_sal.value, 0) sal
           from data.object_objects oo
           join data.objects o on o.id = oo.object_id
           join data.attribute_values av_sal on av_sal.object_id = oo.object_id 
					and av_sal.attribute_id = v_system_person_salary_attribute_id 
					and av_sal.value_object_id is null 
    where oo.parent_object_id = data.get_object_id('persons')
      and oo.object_id <> oo.parent_object_id
      and json.get_opt_integer(av_sal.value) > 0) loop
    perform actions.generate_money(in_client, v_market_id, null, jsonb_build_object('receiver', v_persons.code, 'description', 'Доход за экономический цикл', 'sum', to_jsonb(v_persons.sal)));
  end loop;

	for v_persons in (select o.code, json.get_opt_integer(av_vote.value, 0) vote
			  from data.object_objects oo
			  join data.objects o on o.id = oo.object_id
			  join data.attribute_values av_vote on av_vote.object_id = oo.object_id 
							and av_vote.attribute_id = v_system_person_votes_num_attribute_id 
							and av_vote.value_object_id is null 
			  where oo.parent_object_id = data.get_object_id('senators')
			      and oo.object_id <> oo.parent_object_id
			      and oo.intermediate_object_ids is null
			      and json.get_opt_integer(av_vote.value, 0) > 0) loop
      perform actions.generate_money(in_client, v_market_id, null, jsonb_build_object('receiver', v_persons.code, 'description', 'Доход за голосования за экономический цикл', 'sum', to_jsonb(v_persons.vote * 150000)));
  end loop;

  -- Обнулить счётчики голосований
    for v_persons in (select oo.object_id, json.get_opt_integer(av_vote.value, 0) vote
			  from data.object_objects oo
			  join data.attribute_values av_vote on av_vote.object_id = oo.object_id 
							and av_vote.attribute_id = v_system_person_votes_num_attribute_id 
							and av_vote.value_object_id is null 
			  where oo.parent_object_id = data.get_object_id('senators')
			      and oo.object_id <> oo.parent_object_id
			      and oo.intermediate_object_ids is null
			      and json.get_opt_integer(av_vote.value, 0) > 0) loop
      perform data.set_attribute_value_if_changed(v_persons.object_id, v_system_person_votes_num_attribute_id, null, to_jsonb(0), in_user_object_id);
    end loop;
  
  return api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_market_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для создания сделки
CREATE OR REPLACE FUNCTION action_generators.create_percent_deal(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_member_value jsonb;
  v_percent integer;
begin
  select count(1) into v_is_in_group 
  from data.object_objects oo
   where oo.parent_object_id = v_object_id
   and oo.object_id = v_user_object_id;

  if v_is_in_group = 0 then
    return null;
  end if;

  v_member_value := data.get_raw_attribute_value(v_object_id, data.get_attribute_id('system_corporation_members'), null);
  
  select percent into v_percent
  from jsonb_to_recordset(v_member_value) as (member text, percent integer)
  where member = data.get_object_code(v_user_object_id);
  
  return jsonb_build_object(
    'create_percent_deal',
    jsonb_build_object(
      'code', 'create_percent_deal',
      'name', 'Продать акции',
      'type', 'financial.deal',
      'params', jsonb_build_object('corporation_code', data.get_object_code(json.get_integer(in_params, 'object_id'))),
      'user_params', 
       jsonb_build_array(
         jsonb_build_object(
            'code', 'receiver',
            'type', 'objects',
            'description', 'Покупатель',
            'data', jsonb_build_object('object_code', 'persons', 'attribute_code', 'persons'),
            'min_value_count', 1,
            'max_value_count', 1),
        jsonb_build_object(
            'code', 'percent',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0, 'max_value', v_percent),
            'description', 'Процент акций',
            'min_value_count', 1,
            'max_value_count', 1),
        jsonb_build_object(
            'code', 'deal_sum',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0),
            'description', 'Сумма сделки',
            'min_value_count', 1,
            'max_value_count', 1)))
      );
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.create_percent_deal(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_corporation_code text := json.get_string(in_params, 'corporation_code');
  v_corporation_id integer := data.get_object_id(v_corporation_code);
  v_deal_id integer;
  v_deal_code text;
  v_receiver text := json.get_string(in_user_params, 'receiver');
  v_receiver_id integer;
  v_percent integer := json.get_integer(in_user_params, 'percent');
  v_deal_sum integer := json.get_integer(in_user_params, 'deal_sum');

  v_name text;

  v_meta_id integer := data.get_object_id('person_draft_percent_deals');

  v_name_attribute_id integer := data.get_attribute_id('name');
  v_percent_deals_attribute_id integer := data.get_attribute_id('percent_deals');
  v_value jsonb;
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_corporation_code),
			    'get_actions', true,
			    'get_templates', true));
			    
  v_receiver_id := data.get_object_id(v_receiver);
  if v_receiver_id = in_user_object_id then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Нет смысла продавать акции самому себе"}';
    return v_ret_val;
   end if;  

  insert into data.objects(id) values(default)
  returning id, code into v_deal_id, v_deal_code;
  
  v_name := v_percent || '% акций ' || json.get_string(data.get_raw_attribute_value(v_corporation_id, v_name_attribute_id, null)) || ', ' || json.get_string(data.get_raw_attribute_value(in_user_object_id, v_name_attribute_id, null)) ||' -> '|| json.get_string(data.get_raw_attribute_value(v_receiver_id, v_name_attribute_id, null));
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true', in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('system_is_visible'), in_user_object_id, jsonb 'true', in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('system_is_visible'), v_receiver_id, jsonb 'true', in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('type'), null, jsonb '"percent_deal"', in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('name'), null, to_jsonb(v_name), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('percent_deal_sender'), null, to_jsonb(data.get_object_code(in_user_object_id)), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('percent_deal_corporation'), null, to_jsonb(v_corporation_code), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('percent_deal_receiver'), null, to_jsonb(v_receiver), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('percent_deal_percent'), null, to_jsonb(v_percent), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('system_percent_deal_time'), null, to_jsonb(utils.system_time()), in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('percent_deal_status'), null, jsonb '"draft"', in_user_object_id);
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('percent_deal_sum'), null, to_jsonb(v_deal_sum), in_user_object_id);
  
-- Вставим сделку в метаобъект для отправителя и для получателя
    v_value := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_meta_id,
          v_percent_deals_attribute_id,
          in_user_object_id));
    v_value := coalesce(v_value, jsonb '[]') || jsonb_build_array(v_deal_code);
    perform data.set_attribute_value(v_meta_id, v_percent_deals_attribute_id, in_user_object_id, v_value, in_user_object_id);

    v_value := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_meta_id,
          v_percent_deals_attribute_id,
          v_receiver_id));
    v_value := coalesce(v_value, jsonb '[]') || jsonb_build_array(v_deal_code);
    perform data.set_attribute_value(v_meta_id, v_percent_deals_attribute_id, v_receiver_id, v_value, in_user_object_id);

  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие для редактирования сделки продажи акций
CREATE OR REPLACE FUNCTION action_generators.edit_percent_deal(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_user_code text := data.get_object_code(v_user_object_id);
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_member_value jsonb;
  v_percent integer;
  v_corporation_id integer;
begin
   -- Показываем только автора сделки и для мастера и когда сделка - черновик
  if (json.get_opt_string(data.get_raw_attribute_value(v_object_id,
                         data.get_attribute_id('percent_deal_sender'),
			 null), '~') <> v_user_code
  and not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false))
  or json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('percent_deal_status')),'~') <> 'draft' then
     return null;
  end if;

  v_corporation_id := data.get_object_id(json.get_string(data.get_raw_attribute_value(v_object_id,
                                                                                      data.get_attribute_id('percent_deal_corporation'),
			                                                              null)));
  v_member_value := data.get_raw_attribute_value(v_corporation_id, data.get_attribute_id('system_corporation_members'), null);
  
  select percent into v_percent
  from jsonb_to_recordset(v_member_value) as (member text, percent integer)
  where member = json.get_opt_string(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('percent_deal_sender'), null));
  
  return jsonb_build_object(
    'edit_percent_deal',
    jsonb_build_object(
      'code', 'edit_percent_deal',
      'name', 'Изменить условия',
      'type', 'financial.deal',
      'params', jsonb_build_object('deal_code', data.get_object_code(v_object_id)),
      'user_params', 
       jsonb_build_array(
        jsonb_build_object(
            'code', 'percent',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0, 'max_value', v_percent),
            'description', 'Процент акций',
            'default_value', json.get_opt_integer(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('percent_deal_percent'), null)),
            'min_value_count', 1,
            'max_value_count', 1),
        jsonb_build_object(
            'code', 'deal_sum',
            'type', 'integer',
            'data', jsonb_build_object('min_value', 0),
            'description', 'Сумма сделки',
            'default_value', json.get_opt_integer(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('percent_deal_sum'), null)),
            'min_value_count', 1,
            'max_value_count', 1)))
      );
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.edit_percent_deal(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare

  v_deal_code text := json.get_string(in_params, 'deal_code');
  v_deal_id integer := data.get_object_id(v_deal_code);
  v_corporation_id integer; 
  v_receiver_id integer;
  v_sender_id integer;
  v_percent integer := json.get_integer(in_user_params, 'percent');
  v_deal_sum integer := json.get_integer(in_user_params, 'deal_sum');

  v_name text;

  v_name_attribute_id integer := data.get_attribute_id('name');
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_deal_id, 
					          data.get_attribute_id('percent_deal_status')),'~') <> 'draft' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус сделки изменился!"}';
    return v_ret_val;
   end if;
  v_corporation_id := data.get_object_id(json.get_string(data.get_raw_attribute_value(v_deal_id,
                                                                                      data.get_attribute_id('percent_deal_corporation'),
			                                                              null)));
  v_receiver_id := data.get_object_id(json.get_string(data.get_raw_attribute_value(v_deal_id,
                                                                                      data.get_attribute_id('percent_deal_receiver'),
			                                                              null)));
  v_sender_id := data.get_object_id(json.get_string(data.get_raw_attribute_value(v_deal_id,
                                                                                      data.get_attribute_id('percent_deal_sender'),
			                                                              null)));
  v_name := v_percent || '% акций ' || json.get_string(data.get_raw_attribute_value(v_corporation_id, v_name_attribute_id, null)) || ', ' || json.get_string(data.get_raw_attribute_value(v_sender_id, v_name_attribute_id, null)) ||' -> '|| json.get_string(data.get_raw_attribute_value(v_receiver_id, v_name_attribute_id, null));
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('name'), null, to_jsonb(v_name), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('percent_deal_percent'), null, to_jsonb(v_percent), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('percent_deal_sum'), null, to_jsonb(v_deal_sum), in_user_object_id);

  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

  -- Действие для отклонения сделки продажи акций
CREATE OR REPLACE FUNCTION action_generators.cancel_percent_deal(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_user_code text := data.get_object_code(v_user_object_id);
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только автора сделки, для покупателя и для мастера и когда сделка - черновик
  if (json.get_opt_string(data.get_raw_attribute_value(v_object_id,
                         data.get_attribute_id('percent_deal_sender'),
			 null), '~') <> v_user_code
  and json.get_opt_string(data.get_raw_attribute_value(v_object_id,
                         data.get_attribute_id('percent_deal_receiver'),
			 null), '~') <> v_user_code
  and not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false))
  or json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('percent_deal_status')),'~') <> 'draft'  then
     return null;
   end if;

  return jsonb_build_object(
    'cancel_percent_deal',
    jsonb_build_object(
      'code', 'cancel_percent_deal',
      'name', 'Отклонить сделку',
      'type', 'financial.deal',
      'warning', 'Вы точно хотите отклонить сделку?',
      'params', jsonb_build_object('deal_code', data.get_object_code(v_object_id)))
      );
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.cancel_percent_deal(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_deal_code text := json.get_string(in_params, 'deal_code');
  v_deal_id integer := data.get_object_id(v_deal_code);
  v_receiver_id integer;
  v_sender_id integer;

  v_name_attribute_id integer := data.get_attribute_id('name');

  v_meta_id integer := data.get_object_id('person_draft_percent_deals');

  v_percent_deals_attribute_id integer := data.get_attribute_id('percent_deals');
  v_value jsonb;
  v_description text;
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_deal_id, 
					          data.get_attribute_id('percent_deal_status')),'~') <> 'draft' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус сделки изменился!"}';
    return v_ret_val;
   end if;
  v_receiver_id := data.get_object_id(json.get_string(data.get_raw_attribute_value(v_deal_id,
                                                                                      data.get_attribute_id('percent_deal_receiver'),
			                                                              null)));
  v_sender_id := data.get_object_id(json.get_string(data.get_raw_attribute_value(v_deal_id,
                                                                                      data.get_attribute_id('percent_deal_sender'),
			                                                              null)));
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('system_is_visible'), v_sender_id, jsonb 'false', in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('system_is_visible'), v_receiver_id, jsonb 'false', in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('system_percent_deal_time'), null, to_jsonb(utils.system_time()), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('percent_deal_status'), null, jsonb '"canceled"', in_user_object_id);
  v_description := 'Сделка отклонена ' || json.get_string(data.get_raw_attribute_value(in_user_object_id, v_name_attribute_id, null));
  perform data.set_attribute_value(v_deal_id, data.get_attribute_id('description'), null, to_jsonb(v_description), in_user_object_id);
  
  -- Исключим сделку из метаобъекта для отправителя и для получателя
    v_value := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_meta_id,
          v_percent_deals_attribute_id,
          v_sender_id));
    v_value := coalesce(v_value, jsonb '[]') - v_deal_code;
    if v_value = '[]' then
      perform data.delete_attribute_value(v_meta_id, v_percent_deals_attribute_id, v_sender_id, in_user_object_id);
    else
      perform data.set_attribute_value(v_meta_id, v_percent_deals_attribute_id, v_sender_id, v_value, in_user_object_id);
    end if;

    v_value := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_meta_id,
          v_percent_deals_attribute_id,
          v_receiver_id));
    v_value := coalesce(v_value, jsonb '[]') - v_deal_code;
    if v_value = '[]' then
      perform data.delete_attribute_value(v_meta_id, v_percent_deals_attribute_id, v_receiver_id, in_user_object_id);
    else
      perform data.set_attribute_value(v_meta_id, v_percent_deals_attribute_id, v_receiver_id, v_value, in_user_object_id);
    end if;


  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(data.get_object_code(in_user_object_id)),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

  -- Действие для подтверждения сделки продажи акций
CREATE OR REPLACE FUNCTION action_generators.confirm_percent_deal(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_user_code text := data.get_object_code(v_user_object_id);
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для покупателя и для мастера и когда сделка - черновик
  if (json.get_opt_string(data.get_raw_attribute_value(v_object_id,
                         data.get_attribute_id('percent_deal_receiver'),
			 null), '~') <> v_user_code
  and not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false))
  or json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('percent_deal_status')),'~') <> 'draft'  then
     return null;
   end if;
  
  return jsonb_build_object(
    'confirm_percent_deal',
    jsonb_build_object(
      'code', 'confirm_percent_deal',
      'name', 'Подвердить сделку',
      'type', 'financial.deal',
      'warning', 'Вы точно хотите подтвердить сделку?',
      'params', jsonb_build_object('deal_code', data.get_object_code(v_object_id)))
      );
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.confirm_percent_deal(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_deal_code text := json.get_string(in_params, 'deal_code');
  v_deal_id integer := data.get_object_id(v_deal_code);
  v_receiver_id integer;
  v_sender_id integer;
  v_sender_code text;
  v_receiver_code text;
  v_corporation_id integer;

  v_name_attribute_id integer := data.get_attribute_id('name');

  v_meta_id integer := data.get_object_id('person_draft_percent_deals');

  v_balance integer;
  v_percent_deal_sum integer;
  v_member_value jsonb;
  v_percent_old integer;
  v_percent_old_receiver integer;
  v_percent_deal_percent integer;

  v_percent_deals_attribute_id integer := data.get_attribute_id('percent_deals');
  v_system_balance_attribute_id integer := data.get_attribute_id('system_balance');
  v_percent_deal_sum_attribute_id integer := data.get_attribute_id('percent_deal_sum');
  v_percent_deal_percent_attribute_id integer := data.get_attribute_id('percent_deal_percent');
  v_value jsonb;
  v_description text;
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_deal_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_deal_id, 
					          data.get_attribute_id('percent_deal_status')),'~') <> 'draft' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус сделки изменился!"}';
    return v_ret_val;
  end if;
  v_sender_code := json.get_string(data.get_raw_attribute_value(v_deal_id,
                                                                data.get_attribute_id('percent_deal_sender'),
			                                        null));
  v_receiver_code := json.get_string(data.get_raw_attribute_value(v_deal_id,
                                                                  data.get_attribute_id('percent_deal_receiver'),
			                                          null));
  v_receiver_id := data.get_object_id(v_receiver_code);
  v_sender_id := data.get_object_id(v_sender_code);

  v_percent_deal_percent := json.get_integer(data.get_attribute_value_for_share(v_deal_id, v_percent_deal_percent_attribute_id, null));

  v_corporation_id := data.get_object_id(json.get_string(data.get_raw_attribute_value(v_deal_id,
                                                                                      data.get_attribute_id('percent_deal_corporation'),
			                                                              null)));
  v_member_value := data.get_raw_attribute_value(v_corporation_id, data.get_attribute_id('system_corporation_members'), null);
  
  select coalesce(percent, 0) into v_percent_old
  from jsonb_to_recordset(v_member_value) as (member text, percent integer)
  where member = v_sender_code;

  select coalesce(percent, 0) into v_percent_old_receiver
  from jsonb_to_recordset(v_member_value) as (member text, percent integer)
  where member = v_receiver_code;

  -- Если у продавца больше нет такого количества акций, то продавать нечего
  if v_percent_deal_percent > v_percent_old then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Продавец не владеет нужным количеством акций"}';
    return v_ret_val;
  end if;

  -- Проверяем, что у покупателя достаточно денег на счёте
  v_balance := json.get_opt_integer(data.get_attribute_value_for_share(v_receiver_id, v_system_balance_attribute_id, null), 0);
  v_percent_deal_sum := json.get_opt_integer
  (data.get_attribute_value_for_share(v_deal_id, v_percent_deal_sum_attribute_id, null), 0);
  if v_percent_deal_sum > 0 and v_balance < v_percent_deal_sum then 
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "У покупателя недостаточно средств"}';
    return v_ret_val;
  end if;

  -- Меняем владельцев корпорации
  select (array_to_json(array_agg(row_to_json(c))))::jsonb into v_member_value
  from jsonb_to_recordset(v_member_value) as c (member text, percent integer)
  where c.member not in (v_sender_code, v_receiver_code) ;

  -- Если у продавца ещё остались акции, добавляем их
  if v_percent_old - v_percent_deal_percent > 0 then
    v_member_value := coalesce(v_member_value, jsonb '[]') || jsonb_build_object('member', v_sender_code, 'percent', v_percent_old - v_percent_deal_percent);
  else
    -- Если не осталось, удаляем голосовательный параметр
    perform data.delete_attribute_value_if_exists(v_corporation_id, data.get_attribute_id('dividend_vote'), v_sender_id, in_user_object_id);
  end if;
  -- Добавляем покупателя
  v_member_value := coalesce(v_member_value, jsonb '[]') || jsonb_build_object('member', v_receiver_code, 'percent', v_percent_deal_percent + coalesce(v_percent_old_receiver, 0));

  -- Переводим деньги
  if v_percent_deal_sum > 0 then
    perform actions.transfer(in_client, v_receiver_id, null, jsonb_build_object('receiver', v_sender_code, 'description', 'Оплата за ' || json.get_opt_string(data.get_raw_attribute_value(v_deal_id, v_name_attribute_id , null)), 'sum', v_percent_deal_sum));
  end if;

  perform data.set_attribute_value_if_changed(v_corporation_id, data.get_attribute_id('system_corporation_members'), null, v_member_value, in_user_object_id);  
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('system_is_visible'), v_sender_id, jsonb 'false', in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('system_is_visible'), v_receiver_id, jsonb 'false', in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('system_percent_deal_time'), null, to_jsonb(utils.system_time()), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('percent_deal_time'), null, to_jsonb(utils.system_time()), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_deal_id, data.get_attribute_id('percent_deal_status'), null, jsonb '"done"', in_user_object_id);
  
  -- Исключим сделку из метаобъекта для отправителя и для получателя
    v_value := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_meta_id,
          v_percent_deals_attribute_id,
          v_sender_id));
    v_value := coalesce(v_value, jsonb '[]') - v_deal_code;
    if v_value = '[]' then
      perform data.delete_attribute_value_if_exists(v_meta_id, v_percent_deals_attribute_id, v_sender_id, in_user_object_id);
    else
      perform data.set_attribute_value(v_meta_id, v_percent_deals_attribute_id, v_sender_id, v_value, in_user_object_id);
    end if;

    v_value := json.get_opt_array(
        data.get_attribute_value_for_update(
          v_meta_id,
          v_percent_deals_attribute_id,
          v_receiver_id));
    v_value := coalesce(v_value, jsonb '[]') - v_deal_code;
    if v_value = '[]' then
      perform data.delete_attribute_value_if_exists(v_meta_id, v_percent_deals_attribute_id, v_receiver_id, in_user_object_id);
    else
      perform data.set_attribute_value(v_meta_id, v_percent_deals_attribute_id, v_receiver_id, v_value, in_user_object_id);
    end if;


  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(data.get_object_code(in_user_object_id)),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

  -- Действие для начала голосования
CREATE OR REPLACE FUNCTION action_generators.start_vote(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_user_code text := data.get_object_code(v_user_object_id);
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для секретаря и для мастера и когда голосование не началось
  if (not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_secretary')), false)
  and not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false))
  or json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('vote_status')),'~') = 'yes'  then
     return null;
   end if;
  
  return jsonb_build_object(
    'start_vote',
    jsonb_build_object(
      'code', 'start_vote',
      'name', 'Начать голосование',
      'type', 'politics.vote',
      'params', jsonb_build_object('vote', data.get_object_code(v_object_id)),
      'user_params', jsonb_build_array(
         jsonb_build_object(
            'code', 'vote_theme',
            'type', 'string',
            'description', 'Тема голосования',
            'data', jsonb_build_object('min_length', 1),
            'min_value_count', 1,
            'max_value_count', 1)
      )
      ));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.start_vote(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_vote_code text := json.get_string(in_params, 'vote');
  v_vote_id integer := data.get_object_id(v_vote_code);
  v_vote_theme text := json.get_string(in_user_params, 'vote_theme');
  v_vote_last_number integer;
  v_receiver_ids integer[];
  
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_vote_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_vote_id, 
					          data.get_attribute_id('vote_status')),'~') <> 'no' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус голосования изменился!"}';
    return v_ret_val;
  end if;
  
  perform data.set_attribute_value_if_changed(v_vote_id, data.get_attribute_id('vote_theme'), null, to_jsonb(v_vote_theme), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_vote_id, data.get_attribute_id('vote_status'), null, jsonb '"yes"', in_user_object_id);

  perform data.delete_attribute_value_if_exists(v_vote_id, data.get_attribute_id('vote_yes'), oo.object_id, in_user_object_id),
          data.delete_attribute_value_if_exists(v_vote_id, data.get_attribute_id('vote_no'), oo.object_id, in_user_object_id)
  from data.object_objects oo
  where oo.parent_object_id = data.get_object_id('senators')
      and oo.object_id <> oo.parent_object_id
      and oo.intermediate_object_ids is null;

  select
    array_agg(distinct(oo.object_id))
    into v_receiver_ids
  from data.object_objects oo
  where oo.parent_object_id = data.get_object_id('senators')
      and oo.object_id <> oo.parent_object_id
      and oo.intermediate_object_ids is null;


  perform actions.create_notification(
    in_user_object_id,
    v_receiver_ids,
    'Началось голосование на тему '||  v_vote_theme,
    v_vote_code
    );


  v_vote_last_number := json.get_opt_integer(data.get_raw_attribute_value(v_vote_id, data.get_attribute_id('vote_last_number'), null), 0);
  perform data.set_attribute_value_if_changed(v_vote_id, data.get_attribute_id('vote_last_number'), null, to_jsonb(v_vote_last_number + 1), in_user_object_id);


  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_vote_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

 -- Действие голосования за
CREATE OR REPLACE FUNCTION action_generators.vote_yes(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_user_code text := data.get_object_code(v_user_object_id);
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_disabled boolean := false;
begin
   -- Показываем только для политиков и когда голосование началось
  if not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_politician')), false)

  or json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('vote_status')),'~') <> 'yes'  then
     return null;
  end if;

  if json.get_opt_integer(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('vote_yes'))) is not null 
  or json.get_opt_integer(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('vote_no'))) is not null then
    v_disabled := true;
  end if;

  return jsonb_build_object(
    'vote_yes',
    jsonb_build_object(
      'code', 'vote_yes',
      'name', 'За',
      'type', 'politics.vote',
      'disabled', v_disabled,
      'params', jsonb_build_object('vote', data.get_object_code(v_object_id), 'vote_last_number', json.get_opt_integer(data.get_attribute_value(v_user_object_id,
																		v_object_id, 
																		data.get_attribute_id('vote_last_number')),0))
      ));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.vote_yes(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_vote_code text := json.get_string(in_params, 'vote');
  v_vote_id integer := data.get_object_id(v_vote_code);
  v_vote_last_number integer := json.get_opt_integer(in_params, 0, 'vote_last_number');
  v_system_political_influence integer;
  v_system_person_votes_num integer;

  v_system_person_votes_num_attribute_id integer := data.get_attribute_id('system_person_votes_num');
  
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_vote_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_vote_id, 
					          data.get_attribute_id('vote_status')),'~') <> 'yes' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус голосования изменился. Перезагрузите страницу"}';
    return v_ret_val;
  end if;
  if json.get_opt_integer(data.get_attribute_value(in_user_object_id,
					          v_vote_id, 
					          data.get_attribute_id('vote_last_number')),0) <> v_vote_last_number then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Тема голосования изменилась. Перезагрузите страницу"}';
    return v_ret_val;
  end if;
  if json.get_opt_integer(data.get_attribute_value(in_user_object_id,
					          v_vote_id, 
					          data.get_attribute_id('vote_yes'))) is not null 
  or json.get_opt_integer(data.get_attribute_value(in_user_object_id,
					          v_vote_id, 
					          data.get_attribute_id('vote_no'))) is not null  then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Вы уже сделали выбор в этом голосовании"}';
    return v_ret_val;
  end if;

  v_system_political_influence := json.get_opt_integer(data.get_raw_attribute_value(in_user_object_id, data.get_attribute_id('system_political_influence'), null), 0);
  perform data.set_attribute_value_if_changed(v_vote_id, data.get_attribute_id('vote_yes'), in_user_object_id, to_jsonb(v_system_political_influence), in_user_object_id);

  v_system_person_votes_num := json.get_opt_integer(data.get_raw_attribute_value(in_user_object_id, v_system_person_votes_num_attribute_id, null), 0);
  perform data.set_attribute_value_if_changed(in_user_object_id, v_system_person_votes_num_attribute_id, null, to_jsonb(v_system_person_votes_num + 1), in_user_object_id);


  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_vote_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

-- Действие голосования против
CREATE OR REPLACE FUNCTION action_generators.vote_no(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_user_code text := data.get_object_code(v_user_object_id);
  v_object_id integer := json.get_integer(in_params, 'object_id');
  v_disabled boolean := false;
begin
   -- Показываем только для политиков и когда голосование началось
  if not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_politician')), false)

  or json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('vote_status')),'~') <> 'yes'  then
     return null;
  end if;

  if json.get_opt_integer(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('vote_yes'))) is not null 
  or json.get_opt_integer(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('vote_no'))) is not null then
    v_disabled := true;
  end if;

  return jsonb_build_object(
    'vote_no',
    jsonb_build_object(
      'code', 'vote_no',
      'name', 'Против',
      'type', 'politics.vote',
      'disabled', v_disabled,
      'params', jsonb_build_object('vote', data.get_object_code(v_object_id), 'vote_last_number', json.get_opt_integer(data.get_attribute_value(v_user_object_id,
																		v_object_id, 
																		data.get_attribute_id('vote_last_number')),0))
      ));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.vote_no(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_vote_code text := json.get_string(in_params, 'vote');
  v_vote_id integer := data.get_object_id(v_vote_code);
  v_vote_last_number integer := json.get_opt_integer(in_params, 0, 'vote_last_number');
  v_system_political_influence integer;
  v_system_person_votes_num integer;

  v_system_person_votes_num_attribute_id integer := data.get_attribute_id('system_person_votes_num');
  
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_vote_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_vote_id, 
					          data.get_attribute_id('vote_status')),'~') <> 'yes' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус голосования изменился. Перезагрузите страницу"}';
    return v_ret_val;
  end if;
  if json.get_opt_integer(data.get_attribute_value(in_user_object_id,
					          v_vote_id, 
					          data.get_attribute_id('vote_last_number')),0) <> v_vote_last_number then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Тема голосования изменилась. Перезагрузите страницу"}';
    return v_ret_val;
  end if;
  if json.get_opt_integer(data.get_attribute_value(in_user_object_id,
					          v_vote_id, 
					          data.get_attribute_id('vote_yes'))) is not null 
  or json.get_opt_integer(data.get_attribute_value(in_user_object_id,
					          v_vote_id, 
					          data.get_attribute_id('vote_no'))) is not null  then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Вы уже сделали выбор в этом голосовании"}';
    return v_ret_val;
  end if;

  v_system_political_influence := json.get_opt_integer(data.get_raw_attribute_value(in_user_object_id, data.get_attribute_id('system_political_influence'), null), 0);
  perform data.set_attribute_value_if_changed(v_vote_id, data.get_attribute_id('vote_no'), in_user_object_id, to_jsonb(v_system_political_influence), in_user_object_id);

  v_system_person_votes_num := json.get_opt_integer(data.get_raw_attribute_value(in_user_object_id, v_system_person_votes_num_attribute_id, null), 0);
  perform data.set_attribute_value_if_changed(in_user_object_id, v_system_person_votes_num_attribute_id, null, to_jsonb(v_system_person_votes_num + 1), in_user_object_id);


  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_vote_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

 -- Действие для завершения голосования
CREATE OR REPLACE FUNCTION action_generators.stop_vote(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_user_code text := data.get_object_code(v_user_object_id);
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для секретаря и для мастера и когда голосование началось
  if (not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_secretary')), false)
  and not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false))
  or json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('vote_status')),'~') <> 'yes'  then
     return null;
   end if;
  
  return jsonb_build_object(
    'stop_vote',
    jsonb_build_object(
      'code', 'stop_vote',
      'name', 'Завершить голосование',
      'type', 'politics.vote',
      'params', jsonb_build_object('vote', data.get_object_code(v_object_id))
      ));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;

CREATE OR REPLACE FUNCTION actions.stop_vote(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_vote_code text := json.get_string(in_params, 'vote');
  v_vote_id integer := data.get_object_id(v_vote_code);
  v_vote_theme text;
  v_vote_last_number integer;

  v_yes integer;
  v_no integer;
  v_yes_percent integer;
  v_no_percent integer;

  v_system_vote_history text;
  v_system_vote_history_json jsonb;

  v_vote_yes_attribute_id integer := data.get_attribute_id('vote_yes');
  v_vote_no_attribute_id integer := data.get_attribute_id('vote_no');
  v_system_vote_history_attribute_id integer := data.get_attribute_id('system_vote_history');
  v_system_vote_history_json_attribute_id integer := data.get_attribute_id('system_vote_history_json');
  
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_vote_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_vote_id, 
					          data.get_attribute_id('vote_status')),'~') <> 'yes' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус голосования изменился!"}';
    return v_ret_val;
  end if;
  
  perform data.set_attribute_value_if_changed(v_vote_id, data.get_attribute_id('vote_status'), null, jsonb '"no"', in_user_object_id);

  v_vote_last_number := json.get_opt_integer(data.get_raw_attribute_value(v_vote_id, data.get_attribute_id('vote_last_number'), null), 0);
  v_vote_theme := json.get_opt_string(data.get_raw_attribute_value(v_vote_id, data.get_attribute_id('vote_theme'), null), '-');

  select sum(case when data.get_attribute_value(oo.object_id, v_vote_id, v_vote_yes_attribute_id) is not null then 1 else 0 end),
         sum(case when data.get_attribute_value(oo.object_id, v_vote_id, v_vote_no_attribute_id) is not null then 1 else 0 end),
         sum(json.get_opt_integer(data.get_attribute_value(oo.object_id, v_vote_id, v_vote_yes_attribute_id), 0)),
         sum(json.get_opt_integer(data.get_attribute_value(oo.object_id, v_vote_id, v_vote_no_attribute_id), 0))
    into 
    v_yes,
    v_no,
    v_yes_percent,
    v_no_percent
  from data.object_objects oo
  where oo.parent_object_id = data.get_object_id('senators')
      and oo.object_id <> oo.parent_object_id
      and oo.intermediate_object_ids is null;

  v_system_vote_history := json.get_opt_string(data.get_raw_attribute_value(v_vote_id, v_system_vote_history_attribute_id, null), '');
  v_system_vote_history_json := data.get_raw_attribute_value(v_vote_id, v_system_vote_history_json_attribute_id, null);

  v_system_vote_history := v_vote_theme || ': За - '|| coalesce(v_yes, 0) || ' (' || coalesce(v_yes_percent, 0) || '%). Против - '|| coalesce(v_no, 0) || ' (' || coalesce(v_no_percent, 0) || '%).<br>' || v_system_vote_history;
  v_system_vote_history_json := coalesce(v_system_vote_history_json, '[]'::jsonb) || jsonb_build_object('id', v_vote_last_number, 
													'name', v_vote_theme, 
													'yes', coalesce(v_yes, 0), 
													'no', coalesce(v_no, 0),
													'yes_percent', coalesce(v_yes_percent, 0),
													'no_percent', coalesce(v_no_percent, 0));

  perform data.set_attribute_value_if_changed(v_vote_id, v_system_vote_history_attribute_id, null, to_jsonb(v_system_vote_history), in_user_object_id);
  perform data.set_attribute_value_if_changed(v_vote_id, v_system_vote_history_json_attribute_id, null, v_system_vote_history_json, in_user_object_id);
  
  perform data.delete_attribute_value_if_exists(v_vote_id, data.get_attribute_id('vote_yes'), oo.object_id, in_user_object_id),
          data.delete_attribute_value_if_exists(v_vote_id, data.get_attribute_id('vote_no'), oo.object_id, in_user_object_id)
  from data.object_objects oo
  where oo.parent_object_id = data.get_object_id('senators')
      and oo.object_id <> oo.parent_object_id
      and oo.intermediate_object_ids is null;

  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_vote_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

insert into data.action_generators(function, params, description) values
('login', jsonb_build_object('test_object_id', data.get_object_id('anonymous')), 'Функция входа в систему'),
('logout', jsonb_build_object('test_object_id', data.get_object_id('anonymous')), 'Функция выхода из системы'),
('create_med_document', null, 'Функция создания медицинского отчёта'),
('create_research_document', null, 'Функция создания научного отчёта'),
('create_crew_document', null, 'Функция создания отчёта экипажа'),
(
  'generate_if_string_attribute',
  '{
    "attributes": {
      "type": {
        "mail": [
          {"function": "reply"},
          {"function": "reply_all"}
        ],
        "state": [
          {"function": "change_state_tax"},
          {"function": "generate_if_in_object", "params": {"function": "state_money_transfer"}}
        ],
        "corporation": [
          {"function": "set_dividend_vote"},
          {"function": "create_deal"},
          {"function": "create_percent_deal"}
        ],
        "deal": [
          {"function": "add_deal_member"},
          {"function": "edit_deal"},
          {"function": "delete_deal"},
          {"function": "check_deal"},
          {"function": "confirm_deal"},
          {"function": "cancel_deal"},
          {"function": "edit_deal_member", "params": {"row_num": 1}},
          {"function": "edit_deal_member", "params": {"row_num": 2}},
          {"function": "edit_deal_member", "params": {"row_num": 3}},
          {"function": "edit_deal_member", "params": {"row_num": 4}},
          {"function": "edit_deal_member", "params": {"row_num": 5}},
          {"function": "edit_deal_member", "params": {"row_num": 6}},
          {"function": "edit_deal_member", "params": {"row_num": 7}},
          {"function": "edit_deal_member", "params": {"row_num": 8}},
          {"function": "edit_deal_member", "params": {"row_num": 9}},
          {"function": "edit_deal_member", "params": {"row_num": 10}},
          {"function": "delete_deal_member", "params": {"row_num": 1}},
          {"function": "delete_deal_member", "params": {"row_num": 2}},
          {"function": "delete_deal_member", "params": {"row_num": 3}},
          {"function": "delete_deal_member", "params": {"row_num": 4}},
          {"function": "delete_deal_member", "params": {"row_num": 5}},
          {"function": "delete_deal_member", "params": {"row_num": 6}},
          {"function": "delete_deal_member", "params": {"row_num": 7}},
          {"function": "delete_deal_member", "params": {"row_num": 8}},
          {"function": "delete_deal_member", "params": {"row_num": 9}},
          {"function": "delete_deal_member", "params": {"row_num": 10}}
        ],
        "notification": [
          {"function": "generate_if_attribute_for_user", "params": {"attribute_code": "notification_status", "attribute_value": "unread", "function": "read_notification"}}
        ],
        "sector": [
          {"function": "change_sector_volume"}
        ],
        "market": [
          {"function": "calc_money"}
        ],
        "med_document": [
          {"function": "generate_if_user_attribute", "params": {"attribute_code": "system_master", "attribute_value": true, "function": "delete_document", "params": {"return_object_code": "med_library"}}},
          {"function": "edit_med_document"}
        ],
        "document": [
          {"function": "edit_document"},
          {"function": "generate_if_user_attribute", "params": {"attribute_code": "system_master", "attribute_value": true, "function": "delete_library_document"}}
        ],
        "secret_document": [
          {"function": "generate_if_user_attribute", "params": {"attribute_code": "system_master", "attribute_value": true, "function": "edit_document"}}
        ],
        "research_document": [
          {"function": "generate_if_user_attribute", "params": {"attribute_code": "system_master", "attribute_value": true, "function": "delete_document", "params": {"return_object_code": "research_library"}}},
          {"function": "edit_document"}
        ],
        "crew_document": [
          {"function": "generate_if_user_attribute", "params": {"attribute_code": "system_master", "attribute_value": true, "function": "delete_document", "params": {"return_object_code": "crew_library"}}},
          {"function": "edit_document"}
        ],
        "news": [
          {"function": "delete_news"},
          {"function": "edit_news"}
        ],
        "personal_library": [
          {"function": "create_personal_document"}
        ],
        "personal_document": [
          {"function": "delete_personal_document"},
          {"function": "edit_document"},
          {"function": "share_document"}
        ],
        "percent_deal": [
          {"function": "edit_percent_deal"},
          {"function": "cancel_percent_deal"},
          {"function": "confirm_percent_deal"}
        ],
        "vote": [
          {"function": "start_vote"},
          {"function": "vote_yes"},
          {"function": "vote_no"},
          {"function": "stop_vote"}
          ]
      },
      "mail_type": {
        "inbox": [
          {"function": "delete_inbox_mail"}
        ],
        "outbox": [
          {"function": "delete_outbox_mail"}
        ]
      }
    }
  }',
  null
),
('generate_if_user_attribute', jsonb_build_object('attribute_code', 'type', 'attribute_value', 'person', 'function', 'read_document'), 'Функция для чтения документа с флэшки'),
('generate_if_user_attribute', jsonb_build_object('attribute_code', 'type', 'attribute_value', 'person', 'function', 'transfer'), 'Функция для перевода средств'),
('generate_if_user_attribute', jsonb_build_object('attribute_code', 'type', 'attribute_value', 'person', 'function', 'send_mail'), 'Функция отправки письма'),
('generate_if_user_attribute', jsonb_build_object('attribute_code', 'system_master', 'attribute_value', true, 'function', 'generate_money'), 'Функция для добавления средств'),
('generate_if_user_attribute', jsonb_build_object('attribute_code', 'system_master', 'attribute_value', true, 'function', 'send_mail_from_future'), 'Функция отправки письма из будущего'),
('generate_if_user_attribute', '{"attribute_code": "system_master", "attribute_value": true, "function": "create_secret_document"}', 'Функция создания кодированного документа'),
('generate_if_any_user_attribute', jsonb_build_object('attribute_code', 'person_media', 'function', 'write_news'), 'Функция создания новости'),
(
  'generate_if_user_attribute',
  jsonb_build_object(
    'attribute_code',
    'system_master',
    'attribute_value',
    true,
    'function',
    'show_transaction_list'),
  'Функция просмотра транзакций'
),
('generate_if_user_attribute', jsonb_build_object('attribute_code', 'system_master', 'attribute_value', true, 'function', 'send_notification'), 'Функция отправки уведомления'),
(
  'generate_if_in_object',
  jsonb_build_object(
    'function',
    'show_transaction_list'),
  'Функция просмотра транзакций'
);

insert into data.objects(code) values
('corporation_oik');
select data.set_attribute_value(data.get_object_id('corporation_oik'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_oik'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_oik'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_oik'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_oik'), data.get_attribute_id('name'), null, jsonb '"ОИK"');
select data.set_attribute_value(data.get_object_id('corporation_oik'), data.get_attribute_id('description'), null, jsonb '"Корпорация ОИК"');
select data.set_attribute_value(data.get_object_id('corporation_oik'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ea"');
select data.set_attribute_value(data.get_object_id('corporation_oik'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('corporation_oik'), data.get_attribute_id('corporation_sectors'), null, jsonb '["sector_vpk", "sector_resources", "sector_connections","sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_oik'), data.get_attribute_id('corporation_capitalization'), null, jsonb '1000000');
select data.set_attribute_value(data.get_object_id('corporation_oik'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person26", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_oik'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_oik1"]');
select data.set_attribute_value(data.get_object_id('corporation_oik'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

insert into data.objects(code)
select 'deal_oik1' from generate_series(1, 1) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_oik' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_oik' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_oik' || o.value), data.get_attribute_id('deal_sector'), null, jsonb '"sector_vpk"'),
  data.set_attribute_value(data.get_object_id('deal_oik' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(600000)),
  data.set_attribute_value(data.get_object_id('deal_oik' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_oik' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_oik' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_oik", "percent_asset": 100, "percent_income": 100, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_oik' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"24.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_oik' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"24.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_oik' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 1) o(value);

  select data.set_attribute_value(data.get_object_id('deal_oik1'), data.get_attribute_id('name'), null, to_jsonb('ОИК'::text));
  select data.set_attribute_value(data.get_object_id('deal_oik1'), data.get_attribute_id('description'), null, to_jsonb('ОИК'::text));
  select data.set_attribute_value(data.get_object_id('deal_oik1'), data.get_attribute_id('asset_name'), null, to_jsonb('Актив ОИК'::text));
  
update data.params
set value = 
jsonb '
{
  "groups": [
    {
      "attributes": ["balance"]
    },
    {
      "attributes": ["transaction_time", "transaction_sum", "balance_rest", "transaction_from", "transaction_to", "transaction_description"]
    },
    {
      "actions": ["generate_money", "state_money_transfer", "transfer", "send_mail", "send_mail_from_future", "send_notification", "show_transaction_list", "create_personal_document"]
    },
    {
      "attributes": ["person_race", "person_state", "person_psi_scale", "person_job_position"]
    },
    {
      "attributes": ["person_biography"]
    },
    {
      "attributes": ["person_salary"]
    },
    {
      "attributes": ["political_influence"]
    },
    {
      "attributes": ["mail_type", "mail_send_time", "mail_title", "mail_author", "mail_receivers"],
      "actions": ["reply", "reply_all", "delete_mail"]
    },
    {
      "attributes": ["mail_body"]
    },
    {
      "attributes": ["news_time", "news_media", "news_title"],
      "actions": ["edit_news", "delete_news"]
    },
    {
      "attributes": ["state_tax"],
      "actions": ["change_state_tax"]
    },
    {
      "attributes": ["corporation_state", "corporation_capitalization", "corporation_sectors", "dividend_vote"],
      "actions": ["set_dividend_vote"]
    },
    {
      "attributes": ["corporation_members"],
      "actions": ["create_percent_deal"]
    },
    {
      "actions": ["create_deal"]
    },
    {
      "attributes": ["corporation_deals", "corporation_draft_deals", "corporation_canceled_deals"]
    },
    {
      "attributes": ["document_title", "document_time", "document_author"],
      "actions": ["share_document", "edit_med_document", "edit_document", "delete_document", "delete_library_document", "delete_personal_document"]
    },
    {
      "attributes": ["med_document_patient"]
    },
    {
      "attributes": ["deal_time", "deal_cancel_time", "deal_status", "deal_sector", "asset_name", "asset_cost", "asset_amortization", "deal_income"],
      "actions": ["edit_deal", "delete_deal", "check_deal", "confirm_deal", "cancel_deal"]
    },
    {
      "attributes": ["percent_deal_time", "percent_deal_status", "percent_deal_corporation", "percent_deal_sender", "percent_deal_receiver", "percent_deal_percent", "percent_deal_sum"],
      "actions": ["edit_percent_deal", "confirm_percent_deal", "cancel_percent_deal"]
    },
    {
      "attributes": ["deal_participant1"],
      "actions": ["edit_deal_member1", "delete_deal_member1"]
    },
    {
      "attributes": ["deal_participant2"],
      "actions": ["edit_deal_member2", "delete_deal_member2"]
    },
    {
      "attributes": ["deal_participant3"],
      "actions": ["edit_deal_member3", "delete_deal_member3"]
    },
    {
      "attributes": ["deal_participant4"],
      "actions": ["edit_deal_member4", "delete_deal_member4"]
    },
    {
      "attributes": ["deal_participant5"],
      "actions": ["edit_deal_member5", "delete_deal_member5"]
    },
    {
      "attributes": ["deal_participant6"],
      "actions": ["edit_deal_member6", "delete_deal_member6"]
    },
    {
      "attributes": ["deal_participant7"],
      "actions": ["edit_deal_member7", "delete_deal_member7"]
    },
    {
      "attributes": ["deal_participant8"],
      "actions": ["edit_deal_member8", "delete_deal_member8"]
    },
    {
      "attributes": ["deal_participant9"],
      "actions": ["edit_deal_member9", "delete_deal_member9"]
    },
    {
      "attributes": ["deal_participant10"],
      "actions": ["edit_deal_member10", "delete_deal_member10"]
    },
    {
      "actions": ["add_deal_member"]
    },
    {
      "attributes": ["description", "content"]
    },
    {
      "actions": ["login"]
    },
    {
      "attributes": ["sector_volume", "sector_volume_changes"],
      "actions": ["change_sector_volume"]
    },
    {
      "attributes": ["market_last_time"],
      "actions": ["calc_money"]
    },
    {
      "attributes": ["vote_status", "vote_theme", "vote_history"],
      "actions": ["start_vote", "stop_vote", "vote_yes", "vote_no"]
    },
    {
      "attributes": ["agreement_accept_cost", "agreement_cancel_cost", "agreement_status", "agreement_type", "agreement_signers"],
      "actions": ["create_agreement", "confirm_agreement", "delete_agreement", "cancel_agreement", "reject_agreement"]
    }
  ]
}
'
where code = 'template';

insert into data.objects(code) values
('agreement_types'),
('draft_agreements'),
('done_agreements'),
('deleted_agreements'),
('canceled_agreements');

insert into data.objects(code)
select 'agreement_type' || o.value from generate_series(1, 20) o(value);

CREATE OR REPLACE FUNCTION attribute_value_description_functions.agreement_status(
    in_user_object_id integer,
    in_attribute_id integer,
    in_value jsonb)
  RETURNS text AS
$BODY$
declare
  v_text_value text := json.get_string(in_value);
begin
  case when v_text_value = 'draft' then
    return 'На рассмотрении';
  when v_text_value = 'done' then
    return 'Принято';
  when v_text_value = 'canceled' then
    return 'Расторгнуто';
  when v_text_value = 'deleted' then
    return 'Удалено';
  else
    return '-';
  end case;

  return null;
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;
  
insert into data.attributes(code, name, type, value_description_function) values
('agreement_accept_cost', 'Стоимость принятия соглашения', 'NORMAL', null),
('agreement_cancel_cost', 'Стоимость расторжения соглашения', 'NORMAL', null),
('agreement_income', 'Доход за заключение соглашения', 'SYSTEM', null),
('agreement_status', 'Статус соглашения', 'NORMAL', 'agreement_status'),
('agreement_author', 'Автор соглашения', 'SYSTEM', null),
('agreement_type', 'Тип соглашения', 'NORMAL', 'code'),
('agreement_signers', 'Список подписавшихся', 'NORMAL', 'codes'),
('agreement_types', 'Типы соглашений', 'INVISIBLE', null),
('system_agreement_time', 'Дата изменения соглашения', 'SYSTEM', null)
;

insert into data.attribute_value_change_functions(attribute_id, function, params) values
(data.get_attribute_id('type'), 'string_value_to_object', jsonb '{"params": {"agreement_type": "agreement_types"}}'),
(data.get_attribute_id('type'), 'string_value_to_attribute', jsonb '{"params": {"agreement_type": {"object_code": "agreement_types", "attribute_code": "agreement_types"}}}'),
(data.get_attribute_id('agreement_status'), 'string_value_to_object', jsonb '{"params": {"done": "done_agreements", "draft": "draft_agreements", "canceled": "canceled_agreements"}}');

update data.attribute_value_fill_functions
set params = '
  {
    "blocks": [
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "news_hub"}, {"attribute_code": "type", "attribute_value": "media"}],
        "function": "fill_content",
        "params": {"placeholder": "Новостей нет", "sort_attribute_code": "system_news_time", "sort_type": "desc", "output": [{"type": "attribute", "data": "news_time"}, {"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "library_category"}],
        "function": "fill_content",
        "params": {"placeholder": "Документов нет", "sort_attribute_code": "name", "sort_type": "asc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "group"}],
        "function": "fill_if_object_attribute",
        "params": {
          "blocks": [
            {
              "conditions": [{"attribute_code": "system_meta", "attribute_value": true}],
              "function": "fill_content",
              "params": {"sort_attribute_code": "name", "sort_type": "asc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
            }
          ]
        }
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "mailbox"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "name", "sort_type": "asc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "system_mail_folder_type", "attribute_value": "inbox"}],
        "function": "fill_user_content_from_user_value_attribute",
        "params": {"source_attribute_code": "inbox", "placeholder": "Писем нет", "sort_attribute_code": "system_mail_send_time", "sort_type": "desc", "output": [{"type": "attribute", "data": "mail_send_time"}, {"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "system_mail_folder_type", "attribute_value": "outbox"}],
        "function": "fill_user_content_from_user_value_attribute",
        "params": {"source_attribute_code": "outbox", "placeholder": "Писем нет", "sort_attribute_code": "system_mail_send_time", "sort_type": "desc", "output": [{"type": "attribute", "data": "mail_send_time"}, {"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "transactions"}],
        "function": "fill_user_content_from_attribute",
        "params": {"placeholder": "Транзакций нет", "source_attribute_code": "system_value", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "personal_library"}],
        "function": "fill_personal_library"
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "person_draft_percent_deals"}],
        "function": "fill_user_content_from_attribute",
        "params": {"placeholder": "Предложений продажи акций нет", "source_attribute_code": "percent_deals", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "med_library"}],
        "function": "fill_user_content",
        "params": {"placeholder": "Отчётов нет", "sort_attribute_code": "system_document_time", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "research_library"}],
        "function": "fill_user_content",
        "params": {"placeholder": "Отчётов нет", "sort_attribute_code": "system_document_time", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "crew_library"}],
        "function": "fill_user_content",
        "params": {"placeholder": "Отчётов нет", "sort_attribute_code": "system_document_time", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "corporations"}, {"attribute_code": "type", "attribute_value": "market"}, {"attribute_code": "type", "attribute_value": "states"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "name", "sort_type": "asc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "normal_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_deal_time", "sort_type": "desc", "output": [{"type": "attribute", "data": "deal_time"}, {"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "canceled_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_deal_time", "sort_type": "desc", "output": [{"type": "attribute", "data": "deal_cancel_time"}, {"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "draft_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_deal_time", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "percent_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "name", "sort_type": "asc", "output": [{"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "done_percent_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_percent_deal_time", "sort_type": "desc", "output": [{"type": "attribute", "data": "percent_deal_time"}, {"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "canceled_percent_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_percent_deal_time", "sort_type": "desc", "output": [{"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "draft_percent_deals"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_percent_deal_time", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "transaction_list"}],
        "function": "fill_transaction_list"
      },
	  {
        "conditions": [{"attribute_code": "type", "attribute_value": "done_agreements"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_agreement_time", "sort_type": "desc", "output": [{"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "canceled_agreements"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_agreement_time", "sort_type": "desc", "output": [{"type": "string", "data": " <a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      },
      {
        "conditions": [{"attribute_code": "type", "attribute_value": "draft_agreements"}],
        "function": "fill_content",
        "params": {"sort_attribute_code": "system_agreement_time", "sort_type": "desc", "output": [{"type": "string", "data": "<a href=\"babcom:"}, {"type": "code"}, {"type": "string", "data": "\">"}, {"type": "attribute", "data": "name"}, {"type": "string", "data": "</a>"}]}
      }
    ]
  }'
   where attribute_id = data.get_attribute_id('content') and function = 'fill_if_object_attribute';
  
  select data.set_attribute_value(data.get_object_id('politicians'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
  
select data.set_attribute_value(data.get_object_id('draft_agreements'), data.get_attribute_id('system_meta'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('draft_agreements'), data.get_attribute_id('system_meta'), data.get_object_id('politicians'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('draft_agreements'), data.get_attribute_id('system_is_visible'), data.get_object_id('masters'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('draft_agreements'), data.get_attribute_id('system_is_visible'), data.get_object_id('politicians'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('draft_agreements'), data.get_attribute_id('type'), null, jsonb '"draft_agreements"');
select data.set_attribute_value(data.get_object_id('draft_agreements'), data.get_attribute_id('name'), null, jsonb '"Соглашения на рассмотрении"');

select data.set_attribute_value(data.get_object_id('done_agreements'), data.get_attribute_id('system_meta'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('done_agreements'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('done_agreements'), data.get_attribute_id('type'), null, jsonb '"done_agreements"');
select data.set_attribute_value(data.get_object_id('done_agreements'), data.get_attribute_id('name'), null, jsonb '"Принятые соглашения"');

select data.set_attribute_value(data.get_object_id('canceled_agreements'), data.get_attribute_id('system_meta'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('canceled_agreements'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('canceled_agreements'), data.get_attribute_id('type'), null, jsonb '"canceled_agreements"');
select data.set_attribute_value(data.get_object_id('canceled_agreements'), data.get_attribute_id('name'), null, jsonb '"Расторгнутые соглашения"');

select data.set_attribute_value(data.get_object_id('agreement_types'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_types'), data.get_attribute_id('type'), null, jsonb '"agreement_types"');
select data.set_attribute_value(data.get_object_id('agreement_types'), data.get_attribute_id('name'), null, jsonb '"Типы соглашений"');

select data.set_attribute_value(data.get_object_id('agreement_type1'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type1'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type1'), data.get_attribute_id('name'), null, jsonb '"1.1.Об объявлении войны"');
select data.set_attribute_value(data.get_object_id('agreement_type1'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(1000000));
select data.set_attribute_value(data.get_object_id('agreement_type1'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(100000));
select data.set_attribute_value(data.get_object_id('agreement_type1'), data.get_attribute_id('agreement_income'), null, to_jsonb(1200000));

select data.set_attribute_value(data.get_object_id('agreement_type2'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type2'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type2'), data.get_attribute_id('name'), null, jsonb '"1.2.О режиме содержания и обмене военнопленными"');
select data.set_attribute_value(data.get_object_id('agreement_type2'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(1000000));
select data.set_attribute_value(data.get_object_id('agreement_type2'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(100000));
select data.set_attribute_value(data.get_object_id('agreement_type2'), data.get_attribute_id('agreement_income'), null, to_jsonb(1200000));

select data.set_attribute_value(data.get_object_id('agreement_type3'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type3'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type3'), data.get_attribute_id('name'), null, jsonb '"1.3.О прекращении огня"');
select data.set_attribute_value(data.get_object_id('agreement_type3'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(1000000));
select data.set_attribute_value(data.get_object_id('agreement_type3'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(100000));
select data.set_attribute_value(data.get_object_id('agreement_type3'), data.get_attribute_id('agreement_income'), null, to_jsonb(1200000));

select data.set_attribute_value(data.get_object_id('agreement_type4'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type4'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type4'), data.get_attribute_id('name'), null, jsonb '"1.4.О капитуляции и контрибуции"');
select data.set_attribute_value(data.get_object_id('agreement_type4'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(1000000));
select data.set_attribute_value(data.get_object_id('agreement_type4'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(100000));
select data.set_attribute_value(data.get_object_id('agreement_type4'), data.get_attribute_id('agreement_income'), null, to_jsonb(1200000));

select data.set_attribute_value(data.get_object_id('agreement_type5'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type5'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type5'), data.get_attribute_id('name'), null, jsonb '"2.1.О разграничении сфер влияния"');
select data.set_attribute_value(data.get_object_id('agreement_type5'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(800000));
select data.set_attribute_value(data.get_object_id('agreement_type5'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(200000));
select data.set_attribute_value(data.get_object_id('agreement_type5'), data.get_attribute_id('agreement_income'), null, to_jsonb(1000000));

select data.set_attribute_value(data.get_object_id('agreement_type6'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type6'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type6'), data.get_attribute_id('name'), null, jsonb '"2.2.Об установлении дипломатических отношений"');
select data.set_attribute_value(data.get_object_id('agreement_type6'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(800000));
select data.set_attribute_value(data.get_object_id('agreement_type6'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(200000));
select data.set_attribute_value(data.get_object_id('agreement_type6'), data.get_attribute_id('agreement_income'), null, to_jsonb(1000000));

select data.set_attribute_value(data.get_object_id('agreement_type7'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type7'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type7'), data.get_attribute_id('name'), null, jsonb '"2.3.О ненападении"');
select data.set_attribute_value(data.get_object_id('agreement_type7'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(800000));
select data.set_attribute_value(data.get_object_id('agreement_type7'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(200000));
select data.set_attribute_value(data.get_object_id('agreement_type7'), data.get_attribute_id('agreement_income'), null, to_jsonb(1000000));

select data.set_attribute_value(data.get_object_id('agreement_type8'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type8'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type8'), data.get_attribute_id('name'), null, jsonb '"2.4.О культурных и гуманитарных контактах"');
select data.set_attribute_value(data.get_object_id('agreement_type8'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(800000));
select data.set_attribute_value(data.get_object_id('agreement_type8'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(200000));
select data.set_attribute_value(data.get_object_id('agreement_type8'), data.get_attribute_id('agreement_income'), null, to_jsonb(1000000));

select data.set_attribute_value(data.get_object_id('agreement_type9'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type9'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type9'), data.get_attribute_id('name'), null, jsonb '"3.1.О пошлинах"');
select data.set_attribute_value(data.get_object_id('agreement_type9'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(500000));
select data.set_attribute_value(data.get_object_id('agreement_type9'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(500000));
select data.set_attribute_value(data.get_object_id('agreement_type9'), data.get_attribute_id('agreement_income'), null, to_jsonb(800000));

select data.set_attribute_value(data.get_object_id('agreement_type10'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type10'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type10'), data.get_attribute_id('name'), null, jsonb '"3.2.Об экстрадиции преступников"');
select data.set_attribute_value(data.get_object_id('agreement_type10'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(500000));
select data.set_attribute_value(data.get_object_id('agreement_type10'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(500000));
select data.set_attribute_value(data.get_object_id('agreement_type10'), data.get_attribute_id('agreement_income'), null, to_jsonb(800000));

select data.set_attribute_value(data.get_object_id('agreement_type11'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type11'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type11'), data.get_attribute_id('name'), null, jsonb '"3.3.О культурном обмене"');
select data.set_attribute_value(data.get_object_id('agreement_type11'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(500000));
select data.set_attribute_value(data.get_object_id('agreement_type11'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(500000));
select data.set_attribute_value(data.get_object_id('agreement_type11'), data.get_attribute_id('agreement_income'), null, to_jsonb(800000));

select data.set_attribute_value(data.get_object_id('agreement_type12'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type12'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type12'), data.get_attribute_id('name'), null, jsonb '"3.4.Об оборонительном союзе"');
select data.set_attribute_value(data.get_object_id('agreement_type12'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(500000));
select data.set_attribute_value(data.get_object_id('agreement_type12'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(500000));
select data.set_attribute_value(data.get_object_id('agreement_type12'), data.get_attribute_id('agreement_income'), null, to_jsonb(800000));

select data.set_attribute_value(data.get_object_id('agreement_type13'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type13'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type13'), data.get_attribute_id('name'), null, jsonb '"3.5.О визовом режиме"');
select data.set_attribute_value(data.get_object_id('agreement_type13'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(500000));
select data.set_attribute_value(data.get_object_id('agreement_type13'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(500000));
select data.set_attribute_value(data.get_object_id('agreement_type13'), data.get_attribute_id('agreement_income'), null, to_jsonb(800000));

select data.set_attribute_value(data.get_object_id('agreement_type14'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type14'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type14'), data.get_attribute_id('name'), null, jsonb '"4.1.О партнёрстве"');
select data.set_attribute_value(data.get_object_id('agreement_type14'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(200000));
select data.set_attribute_value(data.get_object_id('agreement_type14'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(800000));
select data.set_attribute_value(data.get_object_id('agreement_type14'), data.get_attribute_id('agreement_income'), null, to_jsonb(600000));

select data.set_attribute_value(data.get_object_id('agreement_type15'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type15'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type15'), data.get_attribute_id('name'), null, jsonb '"4.2.О научно-техническом сотрудничестве"');
select data.set_attribute_value(data.get_object_id('agreement_type15'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(200000));
select data.set_attribute_value(data.get_object_id('agreement_type15'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(800000));
select data.set_attribute_value(data.get_object_id('agreement_type15'), data.get_attribute_id('agreement_income'), null, to_jsonb(600000));

select data.set_attribute_value(data.get_object_id('agreement_type16'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type16'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type16'), data.get_attribute_id('name'), null, jsonb '"4.3.О военном альянсе"');
select data.set_attribute_value(data.get_object_id('agreement_type16'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(200000));
select data.set_attribute_value(data.get_object_id('agreement_type16'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(800000));
select data.set_attribute_value(data.get_object_id('agreement_type16'), data.get_attribute_id('agreement_income'), null, to_jsonb(600000));

select data.set_attribute_value(data.get_object_id('agreement_type17'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type17'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type17'), data.get_attribute_id('name'), null, jsonb '"4.4.О беспошлинной торговле"');
select data.set_attribute_value(data.get_object_id('agreement_type17'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(200000));
select data.set_attribute_value(data.get_object_id('agreement_type17'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(800000));
select data.set_attribute_value(data.get_object_id('agreement_type17'), data.get_attribute_id('agreement_income'), null, to_jsonb(600000));

select data.set_attribute_value(data.get_object_id('agreement_type18'), data.get_attribute_id('system_is_visible'), data.get_object_id('persons'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('agreement_type18'), data.get_attribute_id('type'), null, jsonb '"agreement_type"');
select data.set_attribute_value(data.get_object_id('agreement_type18'), data.get_attribute_id('name'), null, jsonb '"4.5.О режиме свободного посещения"');
select data.set_attribute_value(data.get_object_id('agreement_type18'), data.get_attribute_id('agreement_accept_cost'), null, to_jsonb(200000));
select data.set_attribute_value(data.get_object_id('agreement_type18'), data.get_attribute_id('agreement_cancel_cost'), null, to_jsonb(800000));
select data.set_attribute_value(data.get_object_id('agreement_type18'), data.get_attribute_id('agreement_income'), null, to_jsonb(600000));

 -- Действие для создания соглашения
CREATE OR REPLACE FUNCTION action_generators.create_agreement(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_user_code text := data.get_object_code(v_user_object_id);
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для политиков и для мастера и когда голосование началось
  if (not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_politician')), false)
  and not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false)) then
     return null;
   end if;
  
  return jsonb_build_object(
    'create_agreement',
    jsonb_build_object(
      'code', 'create_agreement',
      'name', 'Создать соглашение',
      'type', 'politics.agreement',
	  'user_params', 
       jsonb_build_array(
	     jsonb_build_object(
            'code', 'name',
            'type', 'string',
            'description', 'Заголовок соглашения',
             'data', jsonb_build_object('min_length', 1),
            'min_value_count', 1,
            'max_value_count', 1),
         jsonb_build_object(
            'code', 'description',
            'type', 'string',
            'description', 'Текст соглашения',
            'data', jsonb_build_object('min_length', 1, 'multiline', true),
            'min_value_count', 1,
            'max_value_count', 1),
         jsonb_build_object(
            'code', 'signers',
            'type', 'objects',
            'description', 'Список подписавшихся',
            'data', jsonb_build_object('object_code', 'politicians', 'attribute_code', 'politicians'),
            'min_value_count', 2,
            'max_value_count', 100),
         jsonb_build_object(
            'code', 'agreement_type',
            'type', 'objects',
            'description', 'Тип соглашения',
            'data', jsonb_build_object('object_code', 'agreement_types', 'attribute_code', 'agreement_types'),
            'min_value_count', 1,
            'max_value_count', 1)
      )));
end;
$BODY$
  LANGUAGE plpgsql STABLE
  COST 100;
  
CREATE OR REPLACE FUNCTION actions.create_agreement(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_agreement_id integer;
  v_agreement_code text;
  v_name text := json.get_string(in_user_params, 'name');
  v_description text := json.get_string(in_user_params, 'description');
  v_signers jsonb := '[]'::jsonb || (in_user_params->'signers');
  v_agreement_type text := json.get_string(in_user_params, 'agreement_type');
  v_agreement_type_id integer := data.get_object_id(v_agreement_type);
  v_agreement_accept_cost integer;
  v_agreement_cancel_cost integer;
  v_agreement_accept_cost_attribute_id integer := data.get_attribute_id('agreement_accept_cost');
  v_agreement_cancel_cost_attribute_id integer := data.get_attribute_id('agreement_cancel_cost');
begin
  insert into data.objects(id) values(default)
  returning id, code into v_agreement_id, v_agreement_code;

  v_agreement_accept_cost := json.get_integer(data.get_raw_attribute_value(v_agreement_type_id, v_agreement_accept_cost_attribute_id, null));
  v_agreement_cancel_cost := json.get_integer(data.get_raw_attribute_value(v_agreement_type_id, v_agreement_cancel_cost_attribute_id, null));
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('system_is_visible'), null, jsonb 'true', in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('type'), null, jsonb '"agreement"', in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('name'), null, to_jsonb(v_name), in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('agreement_author'), null, to_jsonb(in_user_object_id), in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('description'), null, to_jsonb(v_description), in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('agreement_signers'), null, v_signers, in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('system_agreement_time'), null, to_jsonb(utils.system_time()), in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('agreement_status'), null, jsonb '"draft"', in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('agreement_type'), null, to_jsonb(v_agreement_type), in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, v_agreement_accept_cost_attribute_id, null, to_jsonb(v_agreement_accept_cost), in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, v_agreement_cancel_cost_attribute_id, null, to_jsonb(v_agreement_cancel_cost), in_user_object_id);

  return api_utils.get_objects(in_client,
			  in_user_object_id,
			  jsonb_build_object(
			    'object_codes', jsonb_build_array(v_agreement_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

  -- Действие для утверждения соглашений
CREATE OR REPLACE FUNCTION action_generators.confirm_agreement(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для мастера, и если она ещё черновик 
  if not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false) or 
     json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('agreement_status')),'~') <> 'draft' then
     return null;
   end if;
  
  return jsonb_build_object(
    'confirm_agreement',
    jsonb_build_object(
      'code', 'confirm_agreement',
      'name', 'Подтвердить соглашение',
      'type', 'politics.agreement',
      'warning', 'Проверьте, что стороны имеют нужный уровень отношений для заключения такого договора!',
      'params', jsonb_build_object('agreement_code', data.get_object_code(v_object_id)))
      );
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

CREATE OR REPLACE FUNCTION actions.confirm_agreement(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_agreement_code text := json.get_string(in_params, 'agreement_code');
  v_agreement_id integer := data.get_object_id(v_agreement_code);
  v_agreement_name text;
  v_agreement_signers jsonb;
  v_author_id integer;
  v_balance integer;
  v_agreement_accept_cost integer;
  v_agreement_income integer;
  v_agreement_type text;

  v_system_balance_attribute_id integer := data.get_attribute_id('system_balance');
  v_name_attribute_id integer := data.get_attribute_id('name');
  v_politics record;
  
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_agreement_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_agreement_id, 
					          data.get_attribute_id('agreement_status')),'~') <> 'draft' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус соглашения изменился!"}';
    return v_ret_val;
   end if;

  
  v_author_id := json.get_opt_integer(data.get_raw_attribute_value(v_agreement_id, data.get_attribute_id('agreement_author'), null));
  v_agreement_accept_cost := json.get_opt_integer(data.get_raw_attribute_value(v_agreement_id, data.get_attribute_id('agreement_accept_cost'), null), 0);
  v_agreement_type := json.get_string(data.get_raw_attribute_value(v_agreement_id, data.get_attribute_id('agreement_type'), null));
  v_agreement_income := json.get_opt_integer(data.get_raw_attribute_value(data.get_object_id(v_agreement_type), data.get_attribute_id('agreement_income'), null), 0);
  v_agreement_name := json.get_opt_string(data.get_raw_attribute_value(v_agreement_id, v_name_attribute_id, null), '-');
  v_agreement_signers := '[]'::jsonb || data.get_raw_attribute_value(v_agreement_id, data.get_attribute_id('agreement_signers'), null);

  if v_agreement_accept_cost > 0 then
  -- проверить, что у всех хватает денег на оплату соглашения
  for v_politics in (select distinct value from jsonb_array_elements_text(v_agreement_signers)) loop
    v_balance := json.get_opt_integer(data.get_attribute_value_for_share(data.get_object_id(v_politics.value), v_system_balance_attribute_id, null));
  
    if v_balance < v_agreement_accept_cost then 
        v_ret_val.data := v_ret_val.data::jsonb || jsonb ('{"message": "На балансе '|| json.get_string(data.get_raw_attribute_value(data.get_object_id(v_politics.value),v_name_attribute_id, null)) || 'недостаточно средств для оплаты соглашения"}');
        return v_ret_val;
    end if;
   end loop;
   for v_politics in (select distinct value from jsonb_array_elements_text(v_agreement_signers)) loop
       perform actions.transfer_to_null(in_client, data.get_object_id(v_politics.value), null, jsonb_build_object('receiver', 'assembly', 'description', 'Оплата за подтверждение соглашения ' || v_agreement_name, 'sum', v_agreement_accept_cost));
   end loop;
  end if;
  if v_agreement_income > 0 then
    for v_politics in (select distinct value from jsonb_array_elements_text(v_agreement_signers)) loop
       perform actions.generate_money(in_client, data.get_object_id('assembly'), null, jsonb_build_object('receiver', v_politics.value, 'description', 'Доход за подтверждение соглашения ' || v_agreement_name, 'sum', v_agreement_income));
     end loop; 
  end if;
   
  -- поменять статус сделки и даты
  perform data.set_attribute_value_if_changed(v_agreement_id, data.get_attribute_id('agreement_status'), null, jsonb '"done"', in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('system_agreement_time'), null, to_jsonb(utils.system_time()), in_user_object_id);

  
  return api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_agreement_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

  -- Действие для отклонения соглашения
CREATE OR REPLACE FUNCTION action_generators.reject_agreement(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_is_in_group integer; 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для мастера, и если она ещё черновик 
  if not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false) or 
     json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('agreement_status')),'~') <> 'draft' then
     return null;
   end if;
  
  return jsonb_build_object(
    'reject_agreement',
    jsonb_build_object(
      'code', 'reject_agreement',
      'name', 'Отклонить соглашение',
      'type', 'politics.agreement',
      'warning', 'Вы уверены, что хотите отклонить соглашение?',
      'params', jsonb_build_object('agreement_code', data.get_object_code(v_object_id)))
      );
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

CREATE OR REPLACE FUNCTION actions.reject_agreement(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_agreement_code text := json.get_string(in_params, 'agreement_code');
  v_agreement_id integer := data.get_object_id(v_agreement_code);
  
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_agreement_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_agreement_id, 
					          data.get_attribute_id('agreement_status')),'~') <> 'draft' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус соглашения изменился!"}';
    return v_ret_val;
   end if;

  -- поменять статус соглашения даты
  perform data.set_attribute_value_if_changed(v_agreement_id, data.get_attribute_id('agreement_status'), null, jsonb '"deleted"', in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('system_agreement_time'), null, to_jsonb(utils.system_time()), in_user_object_id);

  
  return api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_agreement_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

CREATE OR REPLACE FUNCTION action_generators.cancel_agreement(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для мастера и для участников соглашения, и если оно подтверждено
  if (not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false)
      and not(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('agreement_signers'), null)?data.get_object_code(v_user_object_id))) or 
     json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('agreement_status')),'~') <> 'done' then
     return null;
   end if;
  
  return jsonb_build_object(
    'cancel_agreement',
    jsonb_build_object(
      'code', 'cancel_agreement',
      'name', 'Расторгнуть',
      'type', 'politics.agreement',
      'warning', 'Вы уверены, что хотите расторгнуть соглашение?',
      'params', jsonb_build_object('agreement_code', data.get_object_code(v_object_id)))
      );
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

CREATE OR REPLACE FUNCTION actions.cancel_agreement(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_agreement_code text := json.get_string(in_params, 'agreement_code');
  v_agreement_id integer := data.get_object_id(v_agreement_code);
  v_agreement_name text;
  v_balance integer;
  v_agreement_cancel_cost integer;

  v_system_balance_attribute_id integer := data.get_attribute_id('system_balance');
  
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_agreement_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_agreement_id, 
					          data.get_attribute_id('agreement_status')),'~') <> 'done' then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус соглашения изменился!"}';
    return v_ret_val;
   end if;

  v_agreement_cancel_cost := json.get_opt_integer(data.get_raw_attribute_value(v_agreement_id, data.get_attribute_id('agreement_cancel_cost'), null), 0);
  v_agreement_name := json.get_opt_string(data.get_raw_attribute_value(v_agreement_id, data.get_attribute_id('name'), null), '-');
  
  if v_agreement_cancel_cost > 0 then
  -- проверить, что у юзера хватает денег на оплату расторжения соглашения
    v_balance := json.get_opt_integer(data.get_attribute_value_for_share(in_user_object_id, v_system_balance_attribute_id, null));
  
    if v_balance < v_agreement_cancel_cost then 
        v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "На вашем счету недостаточно средств для оплаты расторжения соглашения"}';
        return v_ret_val;
    end if;
    perform actions.transfer_to_null(in_client, in_user_object_id, null, jsonb_build_object('receiver', 'assembly', 'description', 'Оплата за расторжение соглашения ' || v_agreement_name, 'sum', v_agreement_cancel_cost));
  end if;
 
  -- поменять статус сделки и даты
  perform data.set_attribute_value_if_changed(v_agreement_id, data.get_attribute_id('agreement_status'), null, jsonb '"canceled"', in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('system_agreement_time'), null, to_jsonb(utils.system_time()), in_user_object_id);

  
  return api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_agreement_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

  -- Действие для удаления соглашения
CREATE OR REPLACE FUNCTION action_generators.delete_agreement(
    in_params in jsonb)
  RETURNS jsonb AS
$BODY$
declare 
  v_user_object_id integer := json.get_integer(in_params, 'user_object_id');
  v_object_id integer := json.get_integer(in_params, 'object_id');
begin
   -- Показываем только для мастера и {для участников соглашения, если оно не подтверждено}
  if (not json.get_opt_boolean(data.get_attribute_value(v_user_object_id,
					       v_user_object_id, 
					       data.get_attribute_id('system_master')), false)
      and (not(data.get_raw_attribute_value(v_object_id, data.get_attribute_id('agreement_signers'), null)?data.get_object_code(v_user_object_id)) or 
     json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('agreement_status')),'~') <> 'draft'))
     or json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('agreement_status')),'~') = 'deleted' then
     return null;
   end if;
  
  return jsonb_build_object(
    'delete_agreement',
    jsonb_build_object(
      'code', 'delete_agreement',
      'name', 'Удалить',
      'type', 'politics.agreement',
      'warning', 'Вы уверены, что хотите удалить соглашение?',
      'params', jsonb_build_object('agreement_code', data.get_object_code(v_object_id), 'agreement_status', json.get_opt_string(data.get_attribute_value(v_user_object_id,
					          v_object_id, 
					          data.get_attribute_id('agreement_status')),'~')))
      );
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

CREATE OR REPLACE FUNCTION actions.delete_agreement(
    in_client text,
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS api.result AS
$BODY$
declare
  v_agreement_code text := json.get_string(in_params, 'agreement_code');
  v_agreement_id integer := data.get_object_id(v_agreement_code);
  v_agreement_status text := json.get_string(in_params, 'agreement_status');
  
  v_ret_val api.result;
begin
  v_ret_val := api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_agreement_code),
			    'get_actions', true,
			    'get_templates', true));
  if json.get_opt_string(data.get_attribute_value(in_user_object_id,
					          v_agreement_id, 
					          data.get_attribute_id('agreement_status')),'~') <> v_agreement_status then
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Статус соглашения изменился!"}';
    return v_ret_val;
   end if;

  -- поменять статус соглашения даты
  perform data.set_attribute_value_if_changed(v_agreement_id, data.get_attribute_id('agreement_status'), null, jsonb '"deleted"', in_user_object_id);
  perform data.set_attribute_value(v_agreement_id, data.get_attribute_id('system_agreement_time'), null, to_jsonb(utils.system_time()), in_user_object_id);

  
  return api_utils.get_objects(in_client,
				     in_user_object_id,
				     jsonb_build_object(
			    'object_codes', jsonb_build_array(v_agreement_code),
			    'get_actions', true,
			    'get_templates', true));
end;
$BODY$
  LANGUAGE plpgsql volatile
  COST 100;

insert into data.action_generators(function, params, description) values
(
  'generate_if_string_attribute',
  '{
    "attributes": {
      "type": {
        "draft_agreements": [
          {"function": "create_agreement"}
          ],
        "agreement": [
          {"function": "confirm_agreement"},
          {"function": "reject_agreement"},
          {"function": "cancel_agreement"},
          {"function": "delete_agreement"}
          ]
      }
    }
  }',
  null
);

select data.set_attribute_value(data.get_object_id('person7'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person8'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person9'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person10'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person11'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person13'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person14'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person15'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person16'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person17'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person18'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person19'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person20'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person21'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person22'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person23'), data.get_attribute_id('system_politician'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person24'), data.get_attribute_id('system_politician'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('system_meta'), data.get_object_id('politicians'), jsonb 'false');
select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('system_is_visible'), data.get_object_id('politicians'), jsonb 'false');
select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('system_meta'), data.get_object_id('senators'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('vote'), data.get_attribute_id('system_is_visible'), data.get_object_id('senators'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('senators'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');

select data.set_attribute_value(data.get_object_id('person1'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person3'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person27'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person29'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person30'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person31'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person32'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person33'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person34'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person35'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person36'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person37'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person39'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person41'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person43'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person44'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person46'), data.get_attribute_id('system_senator'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('person49'), data.get_attribute_id('system_senator'), null, jsonb 'true');

insert into data.objects(code) values
('corporation_ikkara');
select data.set_attribute_value(data.get_object_id('corporation_ikkara'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_ikkara'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_ikkara'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_ikkara'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_ikkara'), data.get_attribute_id('name'), null, jsonb '"Иккара"');
select data.set_attribute_value(data.get_object_id('corporation_ikkara'), data.get_attribute_id('description'), null, jsonb '"Корпорация Иккара"');
select data.set_attribute_value(data.get_object_id('corporation_ikkara'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ikarra"');
select data.set_attribute_value(data.get_object_id('corporation_ikkara'), data.get_attribute_id('system_balance'), null, jsonb '5000000');
select data.set_attribute_value(data.get_object_id('corporation_ikkara'), data.get_attribute_id('corporation_sectors'), null, jsonb '["sector_vpk", "sector_resources", "sector_connections","sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_ikkara'), data.get_attribute_id('corporation_capitalization'), null, jsonb '50000000');
select data.set_attribute_value(data.get_object_id('corporation_ikkara'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person18", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_ikkara'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_ikkara1"]');
select data.set_attribute_value(data.get_object_id('corporation_ikkara'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

insert into data.objects(code)
select 'deal_ikkara1' from generate_series(1, 1) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_ikkara' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_ikkara' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_ikkara' || o.value), data.get_attribute_id('deal_sector'), null, jsonb '"sector_vpk"'),
  data.set_attribute_value(data.get_object_id('deal_ikkara' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(30000)),
  data.set_attribute_value(data.get_object_id('deal_ikkara' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(50000000)),
  data.set_attribute_value(data.get_object_id('deal_ikkara' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(3000)),
  data.set_attribute_value(data.get_object_id('deal_ikkara' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_ikkara", "percent_asset": 100, "percent_income": 100, "deal_cost": 143000000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_ikkara' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"24.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_ikkara' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"24.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_ikkara' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 1) o(value);

  select data.set_attribute_value(data.get_object_id('deal_ikkara1'), data.get_attribute_id('name'), null, to_jsonb('Иккара'::text));
  select data.set_attribute_value(data.get_object_id('deal_ikkara1'), data.get_attribute_id('description'), null, to_jsonb('Иккара'::text));
  select data.set_attribute_value(data.get_object_id('deal_ikkara1'), data.get_attribute_id('asset_name'), null, to_jsonb('Актив Иккара'::text));
  
  insert into data.objects(code) values
('corporation_dilgar');
select data.set_attribute_value(data.get_object_id('corporation_dilgar'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_dilgar'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_dilgar'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_dilgar'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_dilgar'), data.get_attribute_id('name'), null, jsonb '"Корпорация 731"');
select data.set_attribute_value(data.get_object_id('corporation_dilgar'), data.get_attribute_id('description'), null, jsonb '"Корпорация Дилгар"');
select data.set_attribute_value(data.get_object_id('corporation_dilgar'), data.get_attribute_id('corporation_state'), null, jsonb '"state_dilgar"');
select data.set_attribute_value(data.get_object_id('corporation_dilgar'), data.get_attribute_id('system_balance'), null, jsonb '2000000');
select data.set_attribute_value(data.get_object_id('corporation_dilgar'), data.get_attribute_id('corporation_sectors'), null, jsonb '["sector_vpk", "sector_resources", "sector_connections","sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_dilgar'), data.get_attribute_id('corporation_capitalization'), null, jsonb '5000000');
select data.set_attribute_value(data.get_object_id('corporation_dilgar'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person19", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_dilgar'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_dilgar1"]');
select data.set_attribute_value(data.get_object_id('corporation_dilgar'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

insert into data.objects(code)
select 'deal_dilgar1' from generate_series(1, 1) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_dilgar' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_dilgar' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_dilgar' || o.value), data.get_attribute_id('deal_sector'), null, jsonb '"sector_resources"'),
  data.set_attribute_value(data.get_object_id('deal_dilgar' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(3000)),
  data.set_attribute_value(data.get_object_id('deal_dilgar' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(5000000)),
  data.set_attribute_value(data.get_object_id('deal_dilgar' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(300)),
  data.set_attribute_value(data.get_object_id('deal_dilgar' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_dilgar", "percent_asset": 100, "percent_income": 100, "deal_cost": 14300000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_dilgar' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"24.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_dilgar' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"24.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_dilgar' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 1) o(value);

  select data.set_attribute_value(data.get_object_id('deal_dilgar1'), data.get_attribute_id('name'), null, to_jsonb('Дилгар Co'::text));
  select data.set_attribute_value(data.get_object_id('deal_dilgar1'), data.get_attribute_id('description'), null, to_jsonb('Дилгар Co'::text));
  select data.set_attribute_value(data.get_object_id('deal_dilgar1'), data.get_attribute_id('asset_name'), null, to_jsonb('Актив Дилгар Co'::text));
  
insert into data.objects(code) values
('corporation_unlim');
select data.set_attribute_value(data.get_object_id('corporation_unlim'), data.get_attribute_id('system_is_visible'), null, jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_unlim'), data.get_attribute_id('type'), null, jsonb '"corporation"');
select data.set_attribute_value(data.get_object_id('corporation_unlim'), data.get_attribute_id('system_meta'), data.get_object_id('corporation_unlim'), jsonb 'true');
select data.set_attribute_value(data.get_object_id('corporation_unlim'), data.get_attribute_id('name'), null, jsonb '"Galactic Unlim"');
select data.set_attribute_value(data.get_object_id('corporation_unlim'), data.get_attribute_id('description'), null, jsonb '"Galactic Unlim"');
select data.set_attribute_value(data.get_object_id('corporation_unlim'), data.get_attribute_id('corporation_state'), null, jsonb '"state_ea"');
select data.set_attribute_value(data.get_object_id('corporation_unlim'), data.get_attribute_id('system_balance'), null, jsonb '0');
select data.set_attribute_value(data.get_object_id('corporation_unlim'), data.get_attribute_id('corporation_sectors'), null, jsonb '["sector_vpk", "sector_resources", "sector_connections","sector_medicine"]');
select data.set_attribute_value(data.get_object_id('corporation_unlim'), data.get_attribute_id('corporation_capitalization'), null, jsonb '100000000');
select data.set_attribute_value(data.get_object_id('corporation_unlim'), data.get_attribute_id('system_corporation_members'), null, jsonb '[{"member": "person56", "percent": 100}]');
select data.set_attribute_value(data.get_object_id('corporation_unlim'), data.get_attribute_id('system_corporation_deals'), null, jsonb '["deal_unlim1"]');
select data.set_attribute_value(data.get_object_id('corporation_unlim'), data.get_attribute_id('dividend_vote'), null, jsonb '"Нет"');

insert into data.objects(code)
select 'deal_unlim1' from generate_series(1, 1) o1(value);

select
  data.set_attribute_value(data.get_object_id('deal_unlim' || o.value), data.get_attribute_id('system_is_visible'), null, jsonb 'true'),
  data.set_attribute_value(data.get_object_id('deal_unlim' || o.value), data.get_attribute_id('type'), null, jsonb '"deal"'),
  data.set_attribute_value(data.get_object_id('deal_unlim' || o.value), data.get_attribute_id('deal_sector'), null, jsonb '"sector_vpk"'),
  data.set_attribute_value(data.get_object_id('deal_unlim' || o.value), data.get_attribute_id('deal_income'), null, to_jsonb(1000000)),
  data.set_attribute_value(data.get_object_id('deal_unlim' || o.value), data.get_attribute_id('asset_cost'), null, to_jsonb(100000000)),
  data.set_attribute_value(data.get_object_id('deal_unlim' || o.value), data.get_attribute_id('asset_amortization'), null, to_jsonb(100000)),
  data.set_attribute_value(data.get_object_id('deal_unlim' || o.value), data.get_attribute_id('system_deal_participant1'), null, ('{"member" : "corporation_unlim", "percent_asset": 0, "percent_income": 0, "deal_cost": 1430000}')::jsonb),
  data.set_attribute_value(data.get_object_id('deal_unlim' || o.value), data.get_attribute_id('system_deal_time'), null, jsonb '"24.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_unlim' || o.value), data.get_attribute_id('deal_time'), null, jsonb '"24.02.2258 12:00"'),
  data.set_attribute_value(data.get_object_id('deal_unlim' || o.value), data.get_attribute_id('deal_status'), null, jsonb '"normal"')
from generate_series(1, 1) o(value);

  select data.set_attribute_value(data.get_object_id('deal_unlim1'), data.get_attribute_id('name'), null, to_jsonb('Galactic Unlim'::text));
  select data.set_attribute_value(data.get_object_id('deal_unlim1'), data.get_attribute_id('description'), null, to_jsonb('Galactic Unlim'::text));
  select data.set_attribute_value(data.get_object_id('deal_unlim1'), data.get_attribute_id('asset_name'), null, to_jsonb('Актив Galactic Unlim'::text));
  
 -- Упрощённый перевод (без клиента и возвращаемого объекта)
  CREATE OR REPLACE FUNCTION actions.transfer_simple(
    in_user_object_id integer,
    in_params jsonb,
    in_user_params jsonb)
  RETURNS void AS
$BODY$
declare
  v_receiver_id integer := data.get_object_id(json.get_string(in_user_params, 'receiver'));
  v_description text := json.get_string(in_user_params, 'description');
  v_sum integer := json.get_integer(in_user_params, 'sum');

  v_system_balance_attribute_id integer := data.get_attribute_id('system_balance');
  v_user_balance integer;
  v_receiver_balance integer;

  v_ret_val api.result;
begin
  assert in_user_object_id is not null;
  assert in_user_object_id != v_receiver_id;
  assert v_sum > 0;

  if in_user_object_id < v_receiver_id then
    v_user_balance := data.get_attribute_value_for_update(in_user_object_id, v_system_balance_attribute_id, null);
    v_receiver_balance := data.get_attribute_value_for_update(v_receiver_id, v_system_balance_attribute_id, null);
  else
    v_receiver_balance := data.get_attribute_value_for_update(v_receiver_id, v_system_balance_attribute_id, null);
    v_user_balance := data.get_attribute_value_for_update(in_user_object_id, v_system_balance_attribute_id, null);
  end if;

  if coalesce(v_user_balance, 0) < v_sum then
    v_ret_val := api_utils.get_objects(
      in_client,
      in_user_object_id,
      jsonb_build_object(
        'object_codes', jsonb_build_array(data.get_object_code(in_user_object_id)),
        'get_actions', true,
        'get_templates', true));
    v_ret_val.data := v_ret_val.data::jsonb || jsonb '{"message": "Недостаточно средств!"}';

  end if;

  perform data.set_attribute_value(
    in_user_object_id,
    v_system_balance_attribute_id,
    null,
    to_jsonb(v_user_balance - v_sum),
    in_user_object_id,
    'Перевод средств пользователю ' || v_receiver_id);
  perform data.set_attribute_value(
    v_receiver_id,
    v_system_balance_attribute_id,
    null,
    to_jsonb(v_receiver_balance + v_sum),
    in_user_object_id,
    'Перевод средств от пользователя ' || in_user_object_id);

  perform actions.create_transaction(
    in_user_object_id,
    in_user_object_id,
    v_receiver_id,
    v_description,
    v_sum,
    v_user_balance - v_sum,
    v_receiver_balance + v_sum,
    true,
    true);

  perform actions.create_notification(
    in_user_object_id,
    array[v_receiver_id],
    (
      'Входящий перевод на сумму ' ||
      v_sum ||
      '.<br>Остаток: ' ||
      (v_receiver_balance + v_sum) ||
      '.<br>Отправитель: ' ||
      coalesce(
        json.get_opt_string(data.get_attribute_value(v_receiver_id, in_user_object_id, data.get_attribute_id('name'))),
        'Неизвестный') ||
      '.<br>Сообщение: ' ||
      v_description
    ),
    'transactions');
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

